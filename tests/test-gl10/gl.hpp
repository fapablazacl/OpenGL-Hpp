#ifndef __gl_hpp__
#define __gl_hpp__
#ifndef __glad_h_
#error This header requires glad.h to be included previously
#endif

namespace gl {
enum class ReadBufferMode : GLenum {
    eNONE = 0,
    eNONE_OES = 0,
    eFRONT_LEFT = 0x0400,
    eFRONT_RIGHT = 0x0401,
    eBACK_LEFT = 0x0402,
    eBACK_RIGHT = 0x0403,
    eFRONT = 0x0404,
    eBACK = 0x0405,
    eLEFT = 0x0406,
    eRIGHT = 0x0407,
    eAUX0 = 0x0409,
    eAUX1 = 0x040A,
    eAUX2 = 0x040B,
    eAUX3 = 0x040C,
    eCOLOR_ATTACHMENT0 = 0x8CE0,
    eCOLOR_ATTACHMENT1 = 0x8CE1,
    eCOLOR_ATTACHMENT2 = 0x8CE2,
    eCOLOR_ATTACHMENT3 = 0x8CE3,
    eCOLOR_ATTACHMENT4 = 0x8CE4,
    eCOLOR_ATTACHMENT5 = 0x8CE5,
    eCOLOR_ATTACHMENT6 = 0x8CE6,
    eCOLOR_ATTACHMENT7 = 0x8CE7,
    eCOLOR_ATTACHMENT8 = 0x8CE8,
    eCOLOR_ATTACHMENT9 = 0x8CE9,
    eCOLOR_ATTACHMENT10 = 0x8CEA,
    eCOLOR_ATTACHMENT11 = 0x8CEB,
    eCOLOR_ATTACHMENT12 = 0x8CEC,
    eCOLOR_ATTACHMENT13 = 0x8CED,
    eCOLOR_ATTACHMENT14 = 0x8CEE,
    eCOLOR_ATTACHMENT15 = 0x8CEF
};
enum class RenderbufferTarget : GLenum {
    eRENDERBUFFER = 0x8D41,
    eRENDERBUFFER_OES = 0x8D41
};
enum class BufferTargetARB : GLenum {
    ePARAMETER_BUFFER = 0x80EE,
    eARRAY_BUFFER = 0x8892,
    eELEMENT_ARRAY_BUFFER = 0x8893,
    ePIXEL_PACK_BUFFER = 0x88EB,
    ePIXEL_UNPACK_BUFFER = 0x88EC,
    eUNIFORM_BUFFER = 0x8A11,
    eTEXTURE_BUFFER = 0x8C2A,
    eTRANSFORM_FEEDBACK_BUFFER = 0x8C8E,
    eCOPY_READ_BUFFER = 0x8F36,
    eCOPY_WRITE_BUFFER = 0x8F37,
    eDRAW_INDIRECT_BUFFER = 0x8F3F,
    eSHADER_STORAGE_BUFFER = 0x90D2,
    eDISPATCH_INDIRECT_BUFFER = 0x90EE,
    eQUERY_BUFFER = 0x9192,
    eATOMIC_COUNTER_BUFFER = 0x92C0
};
enum class TriangleFace : GLenum {
    eFRONT = 0x0404,
    eBACK = 0x0405,
    eFRONT_AND_BACK = 0x0408
};
enum class BufferUsageARB : GLenum {
    eSTREAM_DRAW = 0x88E0,
    eSTREAM_READ = 0x88E1,
    eSTREAM_COPY = 0x88E2,
    eSTATIC_DRAW = 0x88E4,
    eSTATIC_READ = 0x88E5,
    eSTATIC_COPY = 0x88E6,
    eDYNAMIC_DRAW = 0x88E8,
    eDYNAMIC_READ = 0x88E9,
    eDYNAMIC_COPY = 0x88EA
};
enum class ClearBufferMask : GLenum {
    eDEPTH_BUFFER_BIT = 0x00000100,
    eACCUM_BUFFER_BIT = 0x00000200,
    eSTENCIL_BUFFER_BIT = 0x00000400,
    eCOLOR_BUFFER_BIT = 0x00004000,
    eCOVERAGE_BUFFER_BIT_NV = 0x00008000
};
enum class VertexProvokingMode : GLenum {
    eFIRST_VERTEX_CONVENTION = 0x8E4D,
    eLAST_VERTEX_CONVENTION = 0x8E4E
};
enum class PointParameterNameARB : GLenum {
    ePOINT_SIZE_MIN = 0x8126,
    ePOINT_SIZE_MIN_ARB = 0x8126,
    ePOINT_SIZE_MIN_EXT = 0x8126,
    ePOINT_SIZE_MIN_SGIS = 0x8126,
    ePOINT_SIZE_MAX = 0x8127,
    ePOINT_SIZE_MAX_ARB = 0x8127,
    ePOINT_SIZE_MAX_EXT = 0x8127,
    ePOINT_SIZE_MAX_SGIS = 0x8127,
    ePOINT_FADE_THRESHOLD_SIZE = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_ARB = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_EXT = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128,
    eDISTANCE_ATTENUATION_EXT = 0x8129,
    eDISTANCE_ATTENUATION_SGIS = 0x8129,
    ePOINT_DISTANCE_ATTENUATION = 0x8129,
    ePOINT_DISTANCE_ATTENUATION_ARB = 0x8129
};
enum class StencilOp : GLenum {
    eZERO = 0,
    eINVERT = 0x150A,
    eKEEP = 0x1E00,
    eREPLACE = 0x1E01,
    eINCR = 0x1E02,
    eDECR = 0x1E03,
    eINCR_WRAP = 0x8507,
    eDECR_WRAP = 0x8508
};
enum class ClampColorTargetARB : GLenum {
    eCLAMP_VERTEX_COLOR_ARB = 0x891A,
    eCLAMP_FRAGMENT_COLOR_ARB = 0x891B,
    eCLAMP_READ_COLOR = 0x891C,
    eCLAMP_READ_COLOR_ARB = 0x891C
};
enum class BufferPNameARB : GLenum {
    eBUFFER_IMMUTABLE_STORAGE = 0x821F,
    eBUFFER_STORAGE_FLAGS = 0x8220,
    eBUFFER_SIZE = 0x8764,
    eBUFFER_SIZE_ARB = 0x8764,
    eBUFFER_USAGE = 0x8765,
    eBUFFER_USAGE_ARB = 0x8765,
    eBUFFER_ACCESS = 0x88BB,
    eBUFFER_ACCESS_ARB = 0x88BB,
    eBUFFER_MAPPED = 0x88BC,
    eBUFFER_MAPPED_ARB = 0x88BC,
    eBUFFER_ACCESS_FLAGS = 0x911F,
    eBUFFER_MAP_LENGTH = 0x9120,
    eBUFFER_MAP_OFFSET = 0x9121
};
enum class VertexPointerType : GLenum {
    eSHORT = 0x1402,
    eINT = 0x1404,
    eFLOAT = 0x1406,
    eDOUBLE = 0x140A
};
enum class NormalPointerType : GLenum {
    eBYTE = 0x1400,
    eSHORT = 0x1402,
    eINT = 0x1404,
    eFLOAT = 0x1406,
    eDOUBLE = 0x140A
};
enum class StringName : GLenum {
    eVENDOR = 0x1F00,
    eRENDERER = 0x1F01,
    eVERSION = 0x1F02,
    eEXTENSIONS = 0x1F03,
    eSHADING_LANGUAGE_VERSION = 0x8B8C
};
enum class SyncObjectMask : GLenum {
    eSYNC_FLUSH_COMMANDS_BIT = 0x00000001,
    eSYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001
};
enum class HintMode : GLenum {
    eDONT_CARE = 0x1100,
    eFASTEST = 0x1101,
    eNICEST = 0x1102
};
enum class Boolean : GLboolean {
    eFALSE = 0,
    eTRUE = 1
};
enum class SamplerParameterF : GLenum {
    eTEXTURE_BORDER_COLOR = 0x1004,
    eTEXTURE_MIN_LOD = 0x813A,
    eTEXTURE_MAX_LOD = 0x813B,
    eTEXTURE_MAX_ANISOTROPY = 0x84FE,
    eTEXTURE_LOD_BIAS = 0x8501,
    eTEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A
};
enum class GetMultisamplePNameNV : GLenum {
    eSAMPLE_POSITION = 0x8E50,
    eSAMPLE_LOCATION_ARB = 0x8E50,
    ePROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341
};
enum class TexCoordPointerType : GLenum {
    eSHORT = 0x1402,
    eINT = 0x1404,
    eFLOAT = 0x1406,
    eDOUBLE = 0x140A
};
enum class BlendingFactor : GLenum {
    eZERO = 0,
    eONE = 1,
    eSRC_COLOR = 0x0300,
    eONE_MINUS_SRC_COLOR = 0x0301,
    eSRC_ALPHA = 0x0302,
    eONE_MINUS_SRC_ALPHA = 0x0303,
    eDST_ALPHA = 0x0304,
    eONE_MINUS_DST_ALPHA = 0x0305,
    eDST_COLOR = 0x0306,
    eONE_MINUS_DST_COLOR = 0x0307,
    eSRC_ALPHA_SATURATE = 0x0308,
    eCONSTANT_COLOR = 0x8001,
    eONE_MINUS_CONSTANT_COLOR = 0x8002,
    eCONSTANT_ALPHA = 0x8003,
    eONE_MINUS_CONSTANT_ALPHA = 0x8004,
    eSRC1_ALPHA = 0x8589,
    eSRC1_COLOR = 0x88F9,
    eONE_MINUS_SRC1_COLOR = 0x88FA,
    eONE_MINUS_SRC1_ALPHA = 0x88FB
};
enum class AttributeType : GLenum {
    eINT = 0x1404,
    eUNSIGNED_INT = 0x1405,
    eFLOAT = 0x1406,
    eDOUBLE = 0x140A,
    eINT64_ARB = 0x140E,
    eINT64_NV = 0x140E,
    eUNSIGNED_INT64_ARB = 0x140F,
    eUNSIGNED_INT64_NV = 0x140F,
    eFLOAT_VEC2 = 0x8B50,
    eFLOAT_VEC2_ARB = 0x8B50,
    eFLOAT_VEC3 = 0x8B51,
    eFLOAT_VEC3_ARB = 0x8B51,
    eFLOAT_VEC4 = 0x8B52,
    eFLOAT_VEC4_ARB = 0x8B52,
    eINT_VEC2 = 0x8B53,
    eINT_VEC2_ARB = 0x8B53,
    eINT_VEC3 = 0x8B54,
    eINT_VEC3_ARB = 0x8B54,
    eINT_VEC4 = 0x8B55,
    eINT_VEC4_ARB = 0x8B55,
    eBOOL = 0x8B56,
    eBOOL_ARB = 0x8B56,
    eBOOL_VEC2 = 0x8B57,
    eBOOL_VEC2_ARB = 0x8B57,
    eBOOL_VEC3 = 0x8B58,
    eBOOL_VEC3_ARB = 0x8B58,
    eBOOL_VEC4 = 0x8B59,
    eBOOL_VEC4_ARB = 0x8B59,
    eFLOAT_MAT2 = 0x8B5A,
    eFLOAT_MAT2_ARB = 0x8B5A,
    eFLOAT_MAT3 = 0x8B5B,
    eFLOAT_MAT3_ARB = 0x8B5B,
    eFLOAT_MAT4 = 0x8B5C,
    eFLOAT_MAT4_ARB = 0x8B5C,
    eSAMPLER_1D = 0x8B5D,
    eSAMPLER_1D_ARB = 0x8B5D,
    eSAMPLER_2D = 0x8B5E,
    eSAMPLER_2D_ARB = 0x8B5E,
    eSAMPLER_3D = 0x8B5F,
    eSAMPLER_3D_ARB = 0x8B5F,
    eSAMPLER_3D_OES = 0x8B5F,
    eSAMPLER_CUBE = 0x8B60,
    eSAMPLER_CUBE_ARB = 0x8B60,
    eSAMPLER_1D_SHADOW = 0x8B61,
    eSAMPLER_1D_SHADOW_ARB = 0x8B61,
    eSAMPLER_2D_SHADOW = 0x8B62,
    eSAMPLER_2D_SHADOW_ARB = 0x8B62,
    eSAMPLER_2D_SHADOW_EXT = 0x8B62,
    eSAMPLER_2D_RECT = 0x8B63,
    eSAMPLER_2D_RECT_ARB = 0x8B63,
    eSAMPLER_2D_RECT_SHADOW = 0x8B64,
    eSAMPLER_2D_RECT_SHADOW_ARB = 0x8B64,
    eFLOAT_MAT2x3 = 0x8B65,
    eFLOAT_MAT2x3_NV = 0x8B65,
    eFLOAT_MAT2x4 = 0x8B66,
    eFLOAT_MAT2x4_NV = 0x8B66,
    eFLOAT_MAT3x2 = 0x8B67,
    eFLOAT_MAT3x2_NV = 0x8B67,
    eFLOAT_MAT3x4 = 0x8B68,
    eFLOAT_MAT3x4_NV = 0x8B68,
    eFLOAT_MAT4x2 = 0x8B69,
    eFLOAT_MAT4x2_NV = 0x8B69,
    eFLOAT_MAT4x3 = 0x8B6A,
    eFLOAT_MAT4x3_NV = 0x8B6A,
    eSAMPLER_BUFFER = 0x8DC2,
    eSAMPLER_1D_ARRAY_SHADOW = 0x8DC3,
    eSAMPLER_2D_ARRAY_SHADOW = 0x8DC4,
    eSAMPLER_CUBE_SHADOW = 0x8DC5,
    eUNSIGNED_INT_VEC2 = 0x8DC6,
    eUNSIGNED_INT_VEC3 = 0x8DC7,
    eUNSIGNED_INT_VEC4 = 0x8DC8,
    eINT_SAMPLER_1D = 0x8DC9,
    eINT_SAMPLER_2D = 0x8DCA,
    eINT_SAMPLER_3D = 0x8DCB,
    eINT_SAMPLER_CUBE = 0x8DCC,
    eINT_SAMPLER_2D_RECT = 0x8DCD,
    eINT_SAMPLER_1D_ARRAY = 0x8DCE,
    eINT_SAMPLER_2D_ARRAY = 0x8DCF,
    eINT_SAMPLER_BUFFER = 0x8DD0,
    eUNSIGNED_INT_SAMPLER_1D = 0x8DD1,
    eUNSIGNED_INT_SAMPLER_2D = 0x8DD2,
    eUNSIGNED_INT_SAMPLER_3D = 0x8DD3,
    eUNSIGNED_INT_SAMPLER_CUBE = 0x8DD4,
    eUNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5,
    eUNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6,
    eUNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,
    eUNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8,
    eDOUBLE_MAT2 = 0x8F46,
    eDOUBLE_MAT3 = 0x8F47,
    eDOUBLE_MAT4 = 0x8F48,
    eDOUBLE_MAT2x3 = 0x8F49,
    eDOUBLE_MAT2x4 = 0x8F4A,
    eDOUBLE_MAT3x2 = 0x8F4B,
    eDOUBLE_MAT3x4 = 0x8F4C,
    eDOUBLE_MAT4x2 = 0x8F4D,
    eDOUBLE_MAT4x3 = 0x8F4E,
    eINT64_VEC2_ARB = 0x8FE9,
    eINT64_VEC3_ARB = 0x8FEA,
    eINT64_VEC4_ARB = 0x8FEB,
    eUNSIGNED_INT64_VEC2_ARB = 0x8FF5,
    eUNSIGNED_INT64_VEC3_ARB = 0x8FF6,
    eUNSIGNED_INT64_VEC4_ARB = 0x8FF7,
    eDOUBLE_VEC2 = 0x8FFC,
    eDOUBLE_VEC3 = 0x8FFD,
    eDOUBLE_VEC4 = 0x8FFE,
    eSAMPLER_CUBE_MAP_ARRAY = 0x900C,
    eSAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D,
    eINT_SAMPLER_CUBE_MAP_ARRAY = 0x900E,
    eUNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
    eIMAGE_1D = 0x904C,
    eIMAGE_2D = 0x904D,
    eIMAGE_3D = 0x904E,
    eIMAGE_2D_RECT = 0x904F,
    eIMAGE_CUBE = 0x9050,
    eIMAGE_BUFFER = 0x9051,
    eIMAGE_1D_ARRAY = 0x9052,
    eIMAGE_2D_ARRAY = 0x9053,
    eIMAGE_CUBE_MAP_ARRAY = 0x9054,
    eIMAGE_2D_MULTISAMPLE = 0x9055,
    eIMAGE_2D_MULTISAMPLE_ARRAY = 0x9056,
    eINT_IMAGE_1D = 0x9057,
    eINT_IMAGE_2D = 0x9058,
    eINT_IMAGE_3D = 0x9059,
    eINT_IMAGE_2D_RECT = 0x905A,
    eINT_IMAGE_CUBE = 0x905B,
    eINT_IMAGE_BUFFER = 0x905C,
    eINT_IMAGE_1D_ARRAY = 0x905D,
    eINT_IMAGE_2D_ARRAY = 0x905E,
    eINT_IMAGE_CUBE_MAP_ARRAY = 0x905F,
    eINT_IMAGE_2D_MULTISAMPLE = 0x9060,
    eINT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061,
    eUNSIGNED_INT_IMAGE_1D = 0x9062,
    eUNSIGNED_INT_IMAGE_2D = 0x9063,
    eUNSIGNED_INT_IMAGE_3D = 0x9064,
    eUNSIGNED_INT_IMAGE_2D_RECT = 0x9065,
    eUNSIGNED_INT_IMAGE_CUBE = 0x9066,
    eUNSIGNED_INT_IMAGE_BUFFER = 0x9067,
    eUNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068,
    eUNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069,
    eUNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
    eUNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B,
    eUNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C,
    eSAMPLER_2D_MULTISAMPLE = 0x9108,
    eINT_SAMPLER_2D_MULTISAMPLE = 0x9109,
    eUNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
    eSAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B,
    eINT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
    eUNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D
};
enum class VertexAttribPointerType : GLenum {
    eBYTE = 0x1400,
    eUNSIGNED_BYTE = 0x1401,
    eSHORT = 0x1402,
    eUNSIGNED_SHORT = 0x1403,
    eINT = 0x1404,
    eUNSIGNED_INT = 0x1405,
    eFLOAT = 0x1406,
    eDOUBLE = 0x140A,
    eHALF_FLOAT = 0x140B,
    eFIXED = 0x140C,
    eINT64_ARB = 0x140E,
    eINT64_NV = 0x140E,
    eUNSIGNED_INT64_ARB = 0x140F,
    eUNSIGNED_INT64_NV = 0x140F,
    eUNSIGNED_INT_2_10_10_10_REV = 0x8368,
    eUNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368,
    eUNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
    eINT_2_10_10_10_REV = 0x8D9F
};
enum class MapBufferAccessMask : GLenum {
    eMAP_READ_BIT = 0x0001,
    eMAP_READ_BIT_EXT = 0x0001,
    eMAP_WRITE_BIT = 0x0002,
    eMAP_WRITE_BIT_EXT = 0x0002,
    eMAP_INVALIDATE_RANGE_BIT = 0x0004,
    eMAP_INVALIDATE_RANGE_BIT_EXT = 0x0004,
    eMAP_INVALIDATE_BUFFER_BIT = 0x0008,
    eMAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008,
    eMAP_FLUSH_EXPLICIT_BIT = 0x0010,
    eMAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010,
    eMAP_UNSYNCHRONIZED_BIT = 0x0020,
    eMAP_UNSYNCHRONIZED_BIT_EXT = 0x0020,
    eMAP_PERSISTENT_BIT = 0x0040,
    eMAP_PERSISTENT_BIT_EXT = 0x0040,
    eMAP_COHERENT_BIT = 0x0080,
    eMAP_COHERENT_BIT_EXT = 0x0080
};
enum class UniformBlockPName : GLenum {
    eUNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0,
    eUNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1,
    eUNIFORM_BLOCK_BINDING = 0x8A3F,
    eUNIFORM_BLOCK_DATA_SIZE = 0x8A40,
    eUNIFORM_BLOCK_NAME_LENGTH = 0x8A41,
    eUNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42,
    eUNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43,
    eUNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44,
    eUNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45,
    eUNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,
    eUNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC
};
enum class VertexAttribEnum : GLenum {
    eVERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
    eVERTEX_ATTRIB_ARRAY_SIZE = 0x8623,
    eVERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,
    eVERTEX_ATTRIB_ARRAY_TYPE = 0x8625,
    eCURRENT_VERTEX_ATTRIB = 0x8626,
    eVERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
    eVERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
    eVERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD,
    eVERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE
};
enum class BlitFramebufferFilter : GLenum {
    eNEAREST = 0x2600,
    eLINEAR = 0x2601
};
enum class ColorPointerType : GLenum {
    eBYTE = 0x1400,
    eUNSIGNED_BYTE = 0x1401,
    eUNSIGNED_SHORT = 0x1403,
    eUNSIGNED_INT = 0x1405
};
enum class PixelType : GLenum {
    eBYTE = 0x1400,
    eUNSIGNED_BYTE = 0x1401,
    eSHORT = 0x1402,
    eUNSIGNED_SHORT = 0x1403,
    eINT = 0x1404,
    eUNSIGNED_INT = 0x1405,
    eFLOAT = 0x1406,
    eHALF_FLOAT = 0x140B,
    eHALF_FLOAT_ARB = 0x140B,
    eHALF_FLOAT_NV = 0x140B,
    eHALF_APPLE = 0x140B,
    eBITMAP = 0x1A00,
    eUNSIGNED_BYTE_3_3_2 = 0x8032,
    eUNSIGNED_BYTE_3_3_2_EXT = 0x8032,
    eUNSIGNED_SHORT_4_4_4_4 = 0x8033,
    eUNSIGNED_SHORT_4_4_4_4_EXT = 0x8033,
    eUNSIGNED_SHORT_5_5_5_1 = 0x8034,
    eUNSIGNED_SHORT_5_5_5_1_EXT = 0x8034,
    eUNSIGNED_INT_8_8_8_8 = 0x8035,
    eUNSIGNED_INT_8_8_8_8_EXT = 0x8035,
    eUNSIGNED_INT_10_10_10_2 = 0x8036,
    eUNSIGNED_INT_10_10_10_2_EXT = 0x8036,
    eUNSIGNED_BYTE_2_3_3_REV = 0x8362,
    eUNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362,
    eUNSIGNED_SHORT_5_6_5 = 0x8363,
    eUNSIGNED_SHORT_5_6_5_EXT = 0x8363,
    eUNSIGNED_SHORT_5_6_5_REV = 0x8364,
    eUNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364,
    eUNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
    eUNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365,
    eUNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365,
    eUNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
    eUNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366,
    eUNSIGNED_INT_8_8_8_8_REV = 0x8367,
    eUNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367,
    eUNSIGNED_INT_2_10_10_10_REV = 0x8368,
    eUNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368,
    eUNSIGNED_INT_24_8 = 0x84FA,
    eUNSIGNED_INT_24_8_EXT = 0x84FA,
    eUNSIGNED_INT_24_8_NV = 0x84FA,
    eUNSIGNED_INT_24_8_OES = 0x84FA,
    eUNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
    eUNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3B,
    eUNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B,
    eUNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
    eUNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3E,
    eUNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E,
    eFLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
    eFLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD
};
enum class QueryCounterTarget : GLenum {
    eTIMESTAMP = 0x8E28,
    eTIMESTAMP_EXT = 0x8E28
};
enum class HintTarget : GLenum {
    ePERSPECTIVE_CORRECTION_HINT = 0x0C50,
    ePOINT_SMOOTH_HINT = 0x0C51,
    eLINE_SMOOTH_HINT = 0x0C52,
    ePOLYGON_SMOOTH_HINT = 0x0C53,
    eFOG_HINT = 0x0C54,
    ePACK_CMYK_HINT_EXT = 0x800E,
    eUNPACK_CMYK_HINT_EXT = 0x800F,
    ePHONG_HINT_WIN = 0x80EB,
    eCLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0,
    eTEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E,
    eGENERATE_MIPMAP_HINT = 0x8192,
    eGENERATE_MIPMAP_HINT_SGIS = 0x8192,
    ePROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
    eCONVOLUTION_HINT_SGIX = 0x8316,
    eSCALEBIAS_HINT_SGIX = 0x8322,
    eLINE_QUALITY_HINT_SGIX = 0x835B,
    eVERTEX_PRECLIP_SGIX = 0x83EE,
    eVERTEX_PRECLIP_HINT_SGIX = 0x83EF,
    eTEXTURE_COMPRESSION_HINT = 0x84EF,
    eTEXTURE_COMPRESSION_HINT_ARB = 0x84EF,
    eVERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F,
    eMULTISAMPLE_FILTER_HINT_NV = 0x8534,
    eTRANSFORM_HINT_APPLE = 0x85B1,
    eTEXTURE_STORAGE_HINT_APPLE = 0x85BC,
    eFRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
    eFRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B,
    eFRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B,
    eBINNING_CONTROL_HINT_QCOM = 0x8FB0,
    ePREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8,
    eCONSERVE_MEMORY_HINT_PGI = 0x1A1FD,
    eRECLAIM_MEMORY_HINT_PGI = 0x1A1FE,
    eNATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203,
    eNATIVE_GRAPHICS_END_HINT_PGI = 0x1A204,
    eALWAYS_FAST_HINT_PGI = 0x1A20C,
    eALWAYS_SOFT_HINT_PGI = 0x1A20D,
    eALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E,
    eALLOW_DRAW_WIN_HINT_PGI = 0x1A20F,
    eALLOW_DRAW_FRG_HINT_PGI = 0x1A210,
    eALLOW_DRAW_MEM_HINT_PGI = 0x1A211,
    eSTRICT_DEPTHFUNC_HINT_PGI = 0x1A216,
    eSTRICT_LIGHTING_HINT_PGI = 0x1A217,
    eSTRICT_SCISSOR_HINT_PGI = 0x1A218,
    eFULL_STIPPLE_HINT_PGI = 0x1A219,
    eCLIP_NEAR_HINT_PGI = 0x1A220,
    eCLIP_FAR_HINT_PGI = 0x1A221,
    eWIDE_LINE_HINT_PGI = 0x1A222,
    eBACK_NORMALS_HINT_PGI = 0x1A223,
    eVERTEX_DATA_HINT_PGI = 0x1A22A,
    eVERTEX_CONSISTENT_HINT_PGI = 0x1A22B,
    eMATERIAL_SIDE_HINT_PGI = 0x1A22C,
    eMAX_VERTEX_HINT_PGI = 0x1A22D
};
enum class BlendEquationModeEXT : GLenum {
    eFUNC_ADD = 0x8006,
    eFUNC_ADD_EXT = 0x8006,
    eMIN = 0x8007,
    eMIN_EXT = 0x8007,
    eMAX = 0x8008,
    eMAX_EXT = 0x8008,
    eFUNC_SUBTRACT = 0x800A,
    eFUNC_SUBTRACT_EXT = 0x800A,
    eFUNC_REVERSE_SUBTRACT = 0x800B,
    eFUNC_REVERSE_SUBTRACT_EXT = 0x800B,
    eALPHA_MIN_SGIX = 0x8320,
    eALPHA_MAX_SGIX = 0x8321
};
enum class GetPName : GLenum {
    eCURRENT_COLOR = 0x0B00,
    eCURRENT_INDEX = 0x0B01,
    eCURRENT_NORMAL = 0x0B02,
    eCURRENT_TEXTURE_COORDS = 0x0B03,
    eCURRENT_RASTER_COLOR = 0x0B04,
    eCURRENT_RASTER_INDEX = 0x0B05,
    eCURRENT_RASTER_TEXTURE_COORDS = 0x0B06,
    eCURRENT_RASTER_POSITION = 0x0B07,
    eCURRENT_RASTER_POSITION_VALID = 0x0B08,
    eCURRENT_RASTER_DISTANCE = 0x0B09,
    ePOINT_SMOOTH = 0x0B10,
    ePOINT_SIZE = 0x0B11,
    ePOINT_SIZE_RANGE = 0x0B12,
    eSMOOTH_POINT_SIZE_RANGE = 0x0B12,
    ePOINT_SIZE_GRANULARITY = 0x0B13,
    eSMOOTH_POINT_SIZE_GRANULARITY = 0x0B13,
    eLINE_SMOOTH = 0x0B20,
    eLINE_WIDTH = 0x0B21,
    eLINE_WIDTH_RANGE = 0x0B22,
    eSMOOTH_LINE_WIDTH_RANGE = 0x0B22,
    eLINE_WIDTH_GRANULARITY = 0x0B23,
    eSMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23,
    eLINE_STIPPLE = 0x0B24,
    eLINE_STIPPLE_PATTERN = 0x0B25,
    eLINE_STIPPLE_REPEAT = 0x0B26,
    eLIST_MODE = 0x0B30,
    eMAX_LIST_NESTING = 0x0B31,
    eLIST_BASE = 0x0B32,
    eLIST_INDEX = 0x0B33,
    ePOLYGON_MODE = 0x0B40,
    ePOLYGON_SMOOTH = 0x0B41,
    ePOLYGON_STIPPLE = 0x0B42,
    eEDGE_FLAG = 0x0B43,
    eCULL_FACE = 0x0B44,
    eCULL_FACE_MODE = 0x0B45,
    eFRONT_FACE = 0x0B46,
    eLIGHTING = 0x0B50,
    eLIGHT_MODEL_LOCAL_VIEWER = 0x0B51,
    eLIGHT_MODEL_TWO_SIDE = 0x0B52,
    eLIGHT_MODEL_AMBIENT = 0x0B53,
    eSHADE_MODEL = 0x0B54,
    eCOLOR_MATERIAL_FACE = 0x0B55,
    eCOLOR_MATERIAL_PARAMETER = 0x0B56,
    eCOLOR_MATERIAL = 0x0B57,
    eFOG = 0x0B60,
    eFOG_INDEX = 0x0B61,
    eFOG_DENSITY = 0x0B62,
    eFOG_START = 0x0B63,
    eFOG_END = 0x0B64,
    eFOG_MODE = 0x0B65,
    eFOG_COLOR = 0x0B66,
    eDEPTH_RANGE = 0x0B70,
    eDEPTH_TEST = 0x0B71,
    eDEPTH_WRITEMASK = 0x0B72,
    eDEPTH_CLEAR_VALUE = 0x0B73,
    eDEPTH_FUNC = 0x0B74,
    eACCUM_CLEAR_VALUE = 0x0B80,
    eSTENCIL_TEST = 0x0B90,
    eSTENCIL_CLEAR_VALUE = 0x0B91,
    eSTENCIL_FUNC = 0x0B92,
    eSTENCIL_VALUE_MASK = 0x0B93,
    eSTENCIL_FAIL = 0x0B94,
    eSTENCIL_PASS_DEPTH_FAIL = 0x0B95,
    eSTENCIL_PASS_DEPTH_PASS = 0x0B96,
    eSTENCIL_REF = 0x0B97,
    eSTENCIL_WRITEMASK = 0x0B98,
    eMATRIX_MODE = 0x0BA0,
    eNORMALIZE = 0x0BA1,
    eVIEWPORT = 0x0BA2,
    eMODELVIEW_STACK_DEPTH = 0x0BA3,
    eMODELVIEW0_STACK_DEPTH_EXT = 0x0BA3,
    ePROJECTION_STACK_DEPTH = 0x0BA4,
    eTEXTURE_STACK_DEPTH = 0x0BA5,
    eMODELVIEW_MATRIX = 0x0BA6,
    eMODELVIEW0_MATRIX_EXT = 0x0BA6,
    ePROJECTION_MATRIX = 0x0BA7,
    eTEXTURE_MATRIX = 0x0BA8,
    eATTRIB_STACK_DEPTH = 0x0BB0,
    eCLIENT_ATTRIB_STACK_DEPTH = 0x0BB1,
    eALPHA_TEST = 0x0BC0,
    eALPHA_TEST_QCOM = 0x0BC0,
    eALPHA_TEST_FUNC = 0x0BC1,
    eALPHA_TEST_FUNC_QCOM = 0x0BC1,
    eALPHA_TEST_REF = 0x0BC2,
    eALPHA_TEST_REF_QCOM = 0x0BC2,
    eDITHER = 0x0BD0,
    eBLEND_DST = 0x0BE0,
    eBLEND_SRC = 0x0BE1,
    eBLEND = 0x0BE2,
    eLOGIC_OP_MODE = 0x0BF0,
    eINDEX_LOGIC_OP = 0x0BF1,
    eLOGIC_OP = 0x0BF1,
    eCOLOR_LOGIC_OP = 0x0BF2,
    eAUX_BUFFERS = 0x0C00,
    eDRAW_BUFFER = 0x0C01,
    eDRAW_BUFFER_EXT = 0x0C01,
    eREAD_BUFFER = 0x0C02,
    eREAD_BUFFER_EXT = 0x0C02,
    eREAD_BUFFER_NV = 0x0C02,
    eSCISSOR_BOX = 0x0C10,
    eSCISSOR_TEST = 0x0C11,
    eINDEX_CLEAR_VALUE = 0x0C20,
    eINDEX_WRITEMASK = 0x0C21,
    eCOLOR_CLEAR_VALUE = 0x0C22,
    eCOLOR_WRITEMASK = 0x0C23,
    eINDEX_MODE = 0x0C30,
    eRGBA_MODE = 0x0C31,
    eDOUBLEBUFFER = 0x0C32,
    eSTEREO = 0x0C33,
    eRENDER_MODE = 0x0C40,
    ePERSPECTIVE_CORRECTION_HINT = 0x0C50,
    ePOINT_SMOOTH_HINT = 0x0C51,
    eLINE_SMOOTH_HINT = 0x0C52,
    ePOLYGON_SMOOTH_HINT = 0x0C53,
    eFOG_HINT = 0x0C54,
    eTEXTURE_GEN_S = 0x0C60,
    eTEXTURE_GEN_T = 0x0C61,
    eTEXTURE_GEN_R = 0x0C62,
    eTEXTURE_GEN_Q = 0x0C63,
    ePIXEL_MAP_I_TO_I_SIZE = 0x0CB0,
    ePIXEL_MAP_S_TO_S_SIZE = 0x0CB1,
    ePIXEL_MAP_I_TO_R_SIZE = 0x0CB2,
    ePIXEL_MAP_I_TO_G_SIZE = 0x0CB3,
    ePIXEL_MAP_I_TO_B_SIZE = 0x0CB4,
    ePIXEL_MAP_I_TO_A_SIZE = 0x0CB5,
    ePIXEL_MAP_R_TO_R_SIZE = 0x0CB6,
    ePIXEL_MAP_G_TO_G_SIZE = 0x0CB7,
    ePIXEL_MAP_B_TO_B_SIZE = 0x0CB8,
    ePIXEL_MAP_A_TO_A_SIZE = 0x0CB9,
    eUNPACK_SWAP_BYTES = 0x0CF0,
    eUNPACK_LSB_FIRST = 0x0CF1,
    eUNPACK_ROW_LENGTH = 0x0CF2,
    eUNPACK_SKIP_ROWS = 0x0CF3,
    eUNPACK_SKIP_PIXELS = 0x0CF4,
    eUNPACK_ALIGNMENT = 0x0CF5,
    ePACK_SWAP_BYTES = 0x0D00,
    ePACK_LSB_FIRST = 0x0D01,
    ePACK_ROW_LENGTH = 0x0D02,
    ePACK_SKIP_ROWS = 0x0D03,
    ePACK_SKIP_PIXELS = 0x0D04,
    ePACK_ALIGNMENT = 0x0D05,
    eMAP_COLOR = 0x0D10,
    eMAP_STENCIL = 0x0D11,
    eINDEX_SHIFT = 0x0D12,
    eINDEX_OFFSET = 0x0D13,
    eRED_SCALE = 0x0D14,
    eRED_BIAS = 0x0D15,
    eZOOM_X = 0x0D16,
    eZOOM_Y = 0x0D17,
    eGREEN_SCALE = 0x0D18,
    eGREEN_BIAS = 0x0D19,
    eBLUE_SCALE = 0x0D1A,
    eBLUE_BIAS = 0x0D1B,
    eALPHA_SCALE = 0x0D1C,
    eALPHA_BIAS = 0x0D1D,
    eDEPTH_SCALE = 0x0D1E,
    eDEPTH_BIAS = 0x0D1F,
    eMAX_EVAL_ORDER = 0x0D30,
    eMAX_LIGHTS = 0x0D31,
    eMAX_CLIP_PLANES = 0x0D32,
    eMAX_CLIP_DISTANCES = 0x0D32,
    eMAX_TEXTURE_SIZE = 0x0D33,
    eMAX_PIXEL_MAP_TABLE = 0x0D34,
    eMAX_ATTRIB_STACK_DEPTH = 0x0D35,
    eMAX_MODELVIEW_STACK_DEPTH = 0x0D36,
    eMAX_NAME_STACK_DEPTH = 0x0D37,
    eMAX_PROJECTION_STACK_DEPTH = 0x0D38,
    eMAX_TEXTURE_STACK_DEPTH = 0x0D39,
    eMAX_VIEWPORT_DIMS = 0x0D3A,
    eMAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B,
    eSUBPIXEL_BITS = 0x0D50,
    eINDEX_BITS = 0x0D51,
    eRED_BITS = 0x0D52,
    eGREEN_BITS = 0x0D53,
    eBLUE_BITS = 0x0D54,
    eALPHA_BITS = 0x0D55,
    eDEPTH_BITS = 0x0D56,
    eSTENCIL_BITS = 0x0D57,
    eACCUM_RED_BITS = 0x0D58,
    eACCUM_GREEN_BITS = 0x0D59,
    eACCUM_BLUE_BITS = 0x0D5A,
    eACCUM_ALPHA_BITS = 0x0D5B,
    eNAME_STACK_DEPTH = 0x0D70,
    eAUTO_NORMAL = 0x0D80,
    eMAP1_COLOR_4 = 0x0D90,
    eMAP1_INDEX = 0x0D91,
    eMAP1_NORMAL = 0x0D92,
    eMAP1_TEXTURE_COORD_1 = 0x0D93,
    eMAP1_TEXTURE_COORD_2 = 0x0D94,
    eMAP1_TEXTURE_COORD_3 = 0x0D95,
    eMAP1_TEXTURE_COORD_4 = 0x0D96,
    eMAP1_VERTEX_3 = 0x0D97,
    eMAP1_VERTEX_4 = 0x0D98,
    eMAP2_COLOR_4 = 0x0DB0,
    eMAP2_INDEX = 0x0DB1,
    eMAP2_NORMAL = 0x0DB2,
    eMAP2_TEXTURE_COORD_1 = 0x0DB3,
    eMAP2_TEXTURE_COORD_2 = 0x0DB4,
    eMAP2_TEXTURE_COORD_3 = 0x0DB5,
    eMAP2_TEXTURE_COORD_4 = 0x0DB6,
    eMAP2_VERTEX_3 = 0x0DB7,
    eMAP2_VERTEX_4 = 0x0DB8,
    eMAP1_GRID_DOMAIN = 0x0DD0,
    eMAP1_GRID_SEGMENTS = 0x0DD1,
    eMAP2_GRID_DOMAIN = 0x0DD2,
    eMAP2_GRID_SEGMENTS = 0x0DD3,
    eTEXTURE_1D = 0x0DE0,
    eTEXTURE_2D = 0x0DE1,
    eFEEDBACK_BUFFER_SIZE = 0x0DF1,
    eFEEDBACK_BUFFER_TYPE = 0x0DF2,
    eSELECTION_BUFFER_SIZE = 0x0DF4,
    ePOLYGON_OFFSET_UNITS = 0x2A00,
    ePOLYGON_OFFSET_POINT = 0x2A01,
    ePOLYGON_OFFSET_LINE = 0x2A02,
    eCLIP_PLANE0 = 0x3000,
    eCLIP_PLANE1 = 0x3001,
    eCLIP_PLANE2 = 0x3002,
    eCLIP_PLANE3 = 0x3003,
    eCLIP_PLANE4 = 0x3004,
    eCLIP_PLANE5 = 0x3005,
    eLIGHT0 = 0x4000,
    eLIGHT1 = 0x4001,
    eLIGHT2 = 0x4002,
    eLIGHT3 = 0x4003,
    eLIGHT4 = 0x4004,
    eLIGHT5 = 0x4005,
    eLIGHT6 = 0x4006,
    eLIGHT7 = 0x4007,
    eBLEND_COLOR = 0x8005,
    eBLEND_COLOR_EXT = 0x8005,
    eBLEND_EQUATION = 0x8009,
    eBLEND_EQUATION_EXT = 0x8009,
    eBLEND_EQUATION_OES = 0x8009,
    eBLEND_EQUATION_RGB = 0x8009,
    ePACK_CMYK_HINT_EXT = 0x800E,
    eUNPACK_CMYK_HINT_EXT = 0x800F,
    eCONVOLUTION_1D_EXT = 0x8010,
    eCONVOLUTION_2D_EXT = 0x8011,
    eSEPARABLE_2D_EXT = 0x8012,
    ePOST_CONVOLUTION_RED_SCALE_EXT = 0x801C,
    ePOST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D,
    ePOST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E,
    ePOST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F,
    ePOST_CONVOLUTION_RED_BIAS_EXT = 0x8020,
    ePOST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021,
    ePOST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022,
    ePOST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023,
    eHISTOGRAM_EXT = 0x8024,
    eMINMAX_EXT = 0x802E,
    ePOLYGON_OFFSET_FILL = 0x8037,
    ePOLYGON_OFFSET_FACTOR = 0x8038,
    ePOLYGON_OFFSET_BIAS_EXT = 0x8039,
    eRESCALE_NORMAL_EXT = 0x803A,
    eTEXTURE_BINDING_1D = 0x8068,
    eTEXTURE_BINDING_2D = 0x8069,
    eTEXTURE_3D_BINDING_EXT = 0x806A,
    eTEXTURE_BINDING_3D = 0x806A,
    ePACK_SKIP_IMAGES = 0x806B,
    ePACK_SKIP_IMAGES_EXT = 0x806B,
    ePACK_IMAGE_HEIGHT = 0x806C,
    ePACK_IMAGE_HEIGHT_EXT = 0x806C,
    eUNPACK_SKIP_IMAGES = 0x806D,
    eUNPACK_SKIP_IMAGES_EXT = 0x806D,
    eUNPACK_IMAGE_HEIGHT = 0x806E,
    eUNPACK_IMAGE_HEIGHT_EXT = 0x806E,
    eTEXTURE_3D_EXT = 0x806F,
    eMAX_3D_TEXTURE_SIZE = 0x8073,
    eMAX_3D_TEXTURE_SIZE_EXT = 0x8073,
    eVERTEX_ARRAY = 0x8074,
    eNORMAL_ARRAY = 0x8075,
    eCOLOR_ARRAY = 0x8076,
    eINDEX_ARRAY = 0x8077,
    eTEXTURE_COORD_ARRAY = 0x8078,
    eEDGE_FLAG_ARRAY = 0x8079,
    eVERTEX_ARRAY_SIZE = 0x807A,
    eVERTEX_ARRAY_TYPE = 0x807B,
    eVERTEX_ARRAY_STRIDE = 0x807C,
    eVERTEX_ARRAY_COUNT_EXT = 0x807D,
    eNORMAL_ARRAY_TYPE = 0x807E,
    eNORMAL_ARRAY_STRIDE = 0x807F,
    eNORMAL_ARRAY_COUNT_EXT = 0x8080,
    eCOLOR_ARRAY_SIZE = 0x8081,
    eCOLOR_ARRAY_TYPE = 0x8082,
    eCOLOR_ARRAY_STRIDE = 0x8083,
    eCOLOR_ARRAY_COUNT_EXT = 0x8084,
    eINDEX_ARRAY_TYPE = 0x8085,
    eINDEX_ARRAY_STRIDE = 0x8086,
    eINDEX_ARRAY_COUNT_EXT = 0x8087,
    eTEXTURE_COORD_ARRAY_SIZE = 0x8088,
    eTEXTURE_COORD_ARRAY_TYPE = 0x8089,
    eTEXTURE_COORD_ARRAY_STRIDE = 0x808A,
    eTEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B,
    eEDGE_FLAG_ARRAY_STRIDE = 0x808C,
    eEDGE_FLAG_ARRAY_COUNT_EXT = 0x808D,
    eINTERLACE_SGIX = 0x8094,
    eDETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096,
    eMULTISAMPLE_SGIS = 0x809D,
    eSAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
    eSAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
    eSAMPLE_MASK_SGIS = 0x80A0,
    eSAMPLE_BUFFERS = 0x80A8,
    eSAMPLE_BUFFERS_SGIS = 0x80A8,
    eSAMPLES = 0x80A9,
    eSAMPLES_SGIS = 0x80A9,
    eSAMPLE_COVERAGE_VALUE = 0x80AA,
    eSAMPLE_MASK_VALUE_SGIS = 0x80AA,
    eSAMPLE_COVERAGE_INVERT = 0x80AB,
    eSAMPLE_MASK_INVERT_SGIS = 0x80AB,
    eSAMPLE_PATTERN_SGIS = 0x80AC,
    eCOLOR_MATRIX_SGI = 0x80B1,
    eCOLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2,
    eMAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3,
    ePOST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4,
    ePOST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5,
    ePOST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6,
    ePOST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7,
    ePOST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8,
    ePOST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9,
    ePOST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA,
    ePOST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB,
    eTEXTURE_COLOR_TABLE_SGI = 0x80BC,
    eBLEND_DST_RGB = 0x80C8,
    eBLEND_SRC_RGB = 0x80C9,
    eBLEND_DST_ALPHA = 0x80CA,
    eBLEND_SRC_ALPHA = 0x80CB,
    eCOLOR_TABLE_SGI = 0x80D0,
    ePOST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
    ePOST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
    eMAX_ELEMENTS_VERTICES = 0x80E8,
    eMAX_ELEMENTS_INDICES = 0x80E9,
    ePOINT_SIZE_MIN = 0x8126,
    ePOINT_SIZE_MIN_ARB = 0x8126,
    ePOINT_SIZE_MIN_EXT = 0x8126,
    ePOINT_SIZE_MIN_SGIS = 0x8126,
    ePOINT_SIZE_MAX = 0x8127,
    ePOINT_SIZE_MAX_ARB = 0x8127,
    ePOINT_SIZE_MAX_EXT = 0x8127,
    ePOINT_SIZE_MAX_SGIS = 0x8127,
    ePOINT_FADE_THRESHOLD_SIZE = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_ARB = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_EXT = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128,
    eDISTANCE_ATTENUATION_EXT = 0x8129,
    eDISTANCE_ATTENUATION_SGIS = 0x8129,
    ePOINT_DISTANCE_ATTENUATION = 0x8129,
    ePOINT_DISTANCE_ATTENUATION_ARB = 0x8129,
    eFOG_FUNC_POINTS_SGIS = 0x812B,
    eMAX_FOG_FUNC_POINTS_SGIS = 0x812C,
    ePACK_SKIP_VOLUMES_SGIS = 0x8130,
    ePACK_IMAGE_DEPTH_SGIS = 0x8131,
    eUNPACK_SKIP_VOLUMES_SGIS = 0x8132,
    eUNPACK_IMAGE_DEPTH_SGIS = 0x8133,
    eTEXTURE_4D_SGIS = 0x8134,
    eMAX_4D_TEXTURE_SIZE_SGIS = 0x8138,
    ePIXEL_TEX_GEN_SGIX = 0x8139,
    ePIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E,
    ePIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F,
    ePIXEL_TILE_WIDTH_SGIX = 0x8140,
    ePIXEL_TILE_HEIGHT_SGIX = 0x8141,
    ePIXEL_TILE_GRID_WIDTH_SGIX = 0x8142,
    ePIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143,
    ePIXEL_TILE_GRID_DEPTH_SGIX = 0x8144,
    ePIXEL_TILE_CACHE_SIZE_SGIX = 0x8145,
    eSPRITE_SGIX = 0x8148,
    eSPRITE_MODE_SGIX = 0x8149,
    eSPRITE_AXIS_SGIX = 0x814A,
    eSPRITE_TRANSLATION_SGIX = 0x814B,
    eTEXTURE_4D_BINDING_SGIS = 0x814F,
    eMAX_CLIPMAP_DEPTH_SGIX = 0x8177,
    eMAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178,
    ePOST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B,
    ePOST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C,
    eREFERENCE_PLANE_SGIX = 0x817D,
    eREFERENCE_PLANE_EQUATION_SGIX = 0x817E,
    eIR_INSTRUMENT1_SGIX = 0x817F,
    eINSTRUMENT_MEASUREMENTS_SGIX = 0x8181,
    eCALLIGRAPHIC_FRAGMENT_SGIX = 0x8183,
    eFRAMEZOOM_SGIX = 0x818B,
    eFRAMEZOOM_FACTOR_SGIX = 0x818C,
    eMAX_FRAMEZOOM_FACTOR_SGIX = 0x818D,
    eGENERATE_MIPMAP_HINT_SGIS = 0x8192,
    eDEFORMATIONS_MASK_SGIX = 0x8196,
    eFOG_OFFSET_SGIX = 0x8198,
    eFOG_OFFSET_VALUE_SGIX = 0x8199,
    eLIGHT_MODEL_COLOR_CONTROL = 0x81F8,
    eSHARED_TEXTURE_PALETTE_EXT = 0x81FB,
    eMAJOR_VERSION = 0x821B,
    eMINOR_VERSION = 0x821C,
    eNUM_EXTENSIONS = 0x821D,
    eCONTEXT_FLAGS = 0x821E,
    ePROGRAM_PIPELINE_BINDING = 0x825A,
    eMAX_VIEWPORTS = 0x825B,
    eVIEWPORT_SUBPIXEL_BITS = 0x825C,
    eVIEWPORT_BOUNDS_RANGE = 0x825D,
    eLAYER_PROVOKING_VERTEX = 0x825E,
    eVIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
    eMAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
    eMAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
    eMAX_COMPUTE_ATOMIC_COUNTERS = 0x8265,
    eMAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
    eMAX_DEBUG_GROUP_STACK_DEPTH = 0x826C,
    eDEBUG_GROUP_STACK_DEPTH = 0x826D,
    eMAX_UNIFORM_LOCATIONS = 0x826E,
    eVERTEX_BINDING_DIVISOR = 0x82D6,
    eVERTEX_BINDING_OFFSET = 0x82D7,
    eVERTEX_BINDING_STRIDE = 0x82D8,
    eMAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
    eMAX_VERTEX_ATTRIB_BINDINGS = 0x82DA,
    eMAX_LABEL_LENGTH = 0x82E8,
    eCONVOLUTION_HINT_SGIX = 0x8316,
    eASYNC_MARKER_SGIX = 0x8329,
    ePIXEL_TEX_GEN_MODE_SGIX = 0x832B,
    eASYNC_HISTOGRAM_SGIX = 0x832C,
    eMAX_ASYNC_HISTOGRAM_SGIX = 0x832D,
    ePIXEL_TEXTURE_SGIS = 0x8353,
    eASYNC_TEX_IMAGE_SGIX = 0x835C,
    eASYNC_DRAW_PIXELS_SGIX = 0x835D,
    eASYNC_READ_PIXELS_SGIX = 0x835E,
    eMAX_ASYNC_TEX_IMAGE_SGIX = 0x835F,
    eMAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360,
    eMAX_ASYNC_READ_PIXELS_SGIX = 0x8361,
    eVERTEX_PRECLIP_SGIX = 0x83EE,
    eVERTEX_PRECLIP_HINT_SGIX = 0x83EF,
    eFRAGMENT_LIGHTING_SGIX = 0x8400,
    eFRAGMENT_COLOR_MATERIAL_SGIX = 0x8401,
    eFRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402,
    eFRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403,
    eMAX_FRAGMENT_LIGHTS_SGIX = 0x8404,
    eMAX_ACTIVE_LIGHTS_SGIX = 0x8405,
    eLIGHT_ENV_MODE_SGIX = 0x8407,
    eFRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408,
    eFRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409,
    eFRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A,
    eFRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B,
    eFRAGMENT_LIGHT0_SGIX = 0x840C,
    ePACK_RESAMPLE_SGIX = 0x842E,
    eUNPACK_RESAMPLE_SGIX = 0x842F,
    eALIASED_POINT_SIZE_RANGE = 0x846D,
    eALIASED_LINE_WIDTH_RANGE = 0x846E,
    eACTIVE_TEXTURE = 0x84E0,
    eMAX_RENDERBUFFER_SIZE = 0x84E8,
    eTEXTURE_COMPRESSION_HINT = 0x84EF,
    eTEXTURE_BINDING_RECTANGLE = 0x84F6,
    eTEXTURE_BINDING_RECTANGLE_ARB = 0x84F6,
    eTEXTURE_BINDING_RECTANGLE_NV = 0x84F6,
    eMAX_RECTANGLE_TEXTURE_SIZE = 0x84F8,
    eMAX_TEXTURE_LOD_BIAS = 0x84FD,
    eTEXTURE_BINDING_CUBE_MAP = 0x8514,
    eTEXTURE_BINDING_CUBE_MAP_ARB = 0x8514,
    eTEXTURE_BINDING_CUBE_MAP_EXT = 0x8514,
    eTEXTURE_BINDING_CUBE_MAP_OES = 0x8514,
    eMAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
    eMAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C,
    eMAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C,
    eMAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C,
    ePACK_SUBSAMPLE_RATE_SGIX = 0x85A0,
    eUNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1,
    eVERTEX_ARRAY_BINDING = 0x85B5,
    ePROGRAM_POINT_SIZE = 0x8642,
    eNUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
    eCOMPRESSED_TEXTURE_FORMATS = 0x86A3,
    eNUM_PROGRAM_BINARY_FORMATS = 0x87FE,
    ePROGRAM_BINARY_FORMATS = 0x87FF,
    eSTENCIL_BACK_FUNC = 0x8800,
    eSTENCIL_BACK_FAIL = 0x8801,
    eSTENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,
    eSTENCIL_BACK_PASS_DEPTH_PASS = 0x8803,
    eMAX_DRAW_BUFFERS = 0x8824,
    eBLEND_EQUATION_ALPHA = 0x883D,
    eMAX_VERTEX_ATTRIBS = 0x8869,
    eMAX_TEXTURE_IMAGE_UNITS = 0x8872,
    eARRAY_BUFFER_BINDING = 0x8894,
    eELEMENT_ARRAY_BUFFER_BINDING = 0x8895,
    ePIXEL_PACK_BUFFER_BINDING = 0x88ED,
    ePIXEL_UNPACK_BUFFER_BINDING = 0x88EF,
    eMAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC,
    eMAX_ARRAY_TEXTURE_LAYERS = 0x88FF,
    eMIN_PROGRAM_TEXEL_OFFSET = 0x8904,
    eMAX_PROGRAM_TEXEL_OFFSET = 0x8905,
    eSAMPLER_BINDING = 0x8919,
    eFRAGMENT_SHADER_ATI = 0x8920,
    eUNIFORM_BUFFER_BINDING = 0x8A28,
    eUNIFORM_BUFFER_START = 0x8A29,
    eUNIFORM_BUFFER_SIZE = 0x8A2A,
    eMAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B,
    eMAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C,
    eMAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D,
    eMAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E,
    eMAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F,
    eMAX_UNIFORM_BLOCK_SIZE = 0x8A30,
    eMAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,
    eMAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
    eMAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
    eUNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,
    eMAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
    eMAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,
    eMAX_VARYING_FLOATS = 0x8B4B,
    eMAX_VARYING_COMPONENTS = 0x8B4B,
    eMAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
    eMAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
    eFRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
    eCURRENT_PROGRAM = 0x8B8D,
    eIMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
    eIMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
    eTEXTURE_BINDING_1D_ARRAY = 0x8C1C,
    eTEXTURE_BINDING_2D_ARRAY = 0x8C1D,
    eMAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
    eMAX_TEXTURE_BUFFER_SIZE = 0x8C2B,
    eTEXTURE_BINDING_BUFFER = 0x8C2C,
    eTRANSFORM_FEEDBACK_BUFFER_START = 0x8C84,
    eTRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85,
    eTRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F,
    eMOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 0x8C90,
    eMOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 0x8C91,
    eSTENCIL_BACK_REF = 0x8CA3,
    eSTENCIL_BACK_VALUE_MASK = 0x8CA4,
    eSTENCIL_BACK_WRITEMASK = 0x8CA5,
    eDRAW_FRAMEBUFFER_BINDING = 0x8CA6,
    eRENDERBUFFER_BINDING = 0x8CA7,
    eREAD_FRAMEBUFFER_BINDING = 0x8CAA,
    eMAX_COLOR_ATTACHMENTS = 0x8CDF,
    eMAX_COLOR_ATTACHMENTS_EXT = 0x8CDF,
    eMAX_COLOR_ATTACHMENTS_NV = 0x8CDF,
    eTEXTURE_GEN_STR_OES = 0x8D60,
    eMAX_ELEMENT_INDEX = 0x8D6B,
    eMAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
    eSHADER_BINARY_FORMATS = 0x8DF8,
    eNUM_SHADER_BINARY_FORMATS = 0x8DF9,
    eSHADER_COMPILER = 0x8DFA,
    eMAX_VERTEX_UNIFORM_VECTORS = 0x8DFB,
    eMAX_VARYING_VECTORS = 0x8DFC,
    eMAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD,
    eTIMESTAMP = 0x8E28,
    eTIMESTAMP_EXT = 0x8E28,
    ePROVOKING_VERTEX = 0x8E4F,
    eMAX_SAMPLE_MASK_WORDS = 0x8E59,
    eMAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
    eMAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
    eFETCH_PER_SAMPLE_ARM = 0x8F65,
    eFRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66,
    eFRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = 0x8F6F,
    ePRIMITIVE_RESTART_INDEX = 0x8F9E,
    eMIN_MAP_BUFFER_ALIGNMENT = 0x90BC,
    eSHADER_STORAGE_BUFFER_BINDING = 0x90D3,
    eSHADER_STORAGE_BUFFER_START = 0x90D4,
    eSHADER_STORAGE_BUFFER_SIZE = 0x90D5,
    eMAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6,
    eMAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,
    eMAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
    eMAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9,
    eMAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
    eMAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB,
    eMAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC,
    eMAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD,
    eSHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF,
    eMAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB,
    eDISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
    eTEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
    eTEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
    eMAX_COLOR_TEXTURE_SAMPLES = 0x910E,
    eMAX_DEPTH_TEXTURE_SAMPLES = 0x910F,
    eMAX_INTEGER_SAMPLES = 0x9110,
    eMAX_SERVER_WAIT_TIMEOUT = 0x9111,
    eMAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,
    eMAX_GEOMETRY_INPUT_COMPONENTS = 0x9123,
    eMAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
    eMAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,
    eCONTEXT_PROFILE_MASK = 0x9126,
    eTEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F,
    eMAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB,
    eMAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
    eMAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE,
    eMAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF,
    eMAX_VERTEX_ATOMIC_COUNTERS = 0x92D2,
    eMAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
    eMAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4,
    eMAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5,
    eMAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6,
    eMAX_COMBINED_ATOMIC_COUNTERS = 0x92D7,
    eMAX_FRAMEBUFFER_WIDTH = 0x9315,
    eMAX_FRAMEBUFFER_HEIGHT = 0x9316,
    eMAX_FRAMEBUFFER_LAYERS = 0x9317,
    eMAX_FRAMEBUFFER_SAMPLES = 0x9318,
    eNUM_DEVICE_UUIDS_EXT = 0x9596,
    eDEVICE_UUID_EXT = 0x9597,
    eDRIVER_UUID_EXT = 0x9598,
    eDEVICE_LUID_EXT = 0x9599,
    eDEVICE_NODE_MASK_EXT = 0x959A,
    eSHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1,
    eSHADING_RATE_IMAGE_PALETTE_COUNT_NV = 0x95B2,
    eMAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 0x95B6,
    eFRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2,
    eSHADING_RATE_QCOM = 0x96A4,
    eSHADING_RATE_EXT = 0x96D0,
    eMIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D7,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D8,
    eMIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96D9,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96DA,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = 0x96DB,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = 0x96DC,
    eFRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = 0x96DD,
    eFRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = 0x96DE,
    eFRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = 0x96DF
};
enum class ConditionalRenderMode : GLenum {
    eQUERY_WAIT = 0x8E13,
    eQUERY_NO_WAIT = 0x8E14,
    eQUERY_BY_REGION_WAIT = 0x8E15,
    eQUERY_BY_REGION_NO_WAIT = 0x8E16,
    eQUERY_WAIT_INVERTED = 0x8E17,
    eQUERY_NO_WAIT_INVERTED = 0x8E18,
    eQUERY_BY_REGION_WAIT_INVERTED = 0x8E19,
    eQUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A
};
enum class BufferPointerNameARB : GLenum {
    eBUFFER_MAP_POINTER = 0x88BD,
    eBUFFER_MAP_POINTER_ARB = 0x88BD
};
enum class FrontFaceDirection : GLenum {
    eCW = 0x0900,
    eCCW = 0x0901
};
enum class DepthFunction : GLenum {
    eNEVER = 0x0200,
    eLESS = 0x0201,
    eEQUAL = 0x0202,
    eLEQUAL = 0x0203,
    eGREATER = 0x0204,
    eNOTEQUAL = 0x0205,
    eGEQUAL = 0x0206,
    eALWAYS = 0x0207
};
enum class VertexAttribPropertyARB : GLenum {
    eVERTEX_ATTRIB_BINDING = 0x82D4,
    eVERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5,
    eVERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
    eVERTEX_ATTRIB_ARRAY_SIZE = 0x8623,
    eVERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,
    eVERTEX_ATTRIB_ARRAY_TYPE = 0x8625,
    eCURRENT_VERTEX_ATTRIB = 0x8626,
    eVERTEX_ATTRIB_ARRAY_LONG = 0x874E,
    eVERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
    eVERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
    eVERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD,
    eVERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD,
    eVERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE
};
enum class TextureTarget : GLenum {
    eTEXTURE_1D = 0x0DE0,
    eTEXTURE_2D = 0x0DE1,
    ePROXY_TEXTURE_1D = 0x8063,
    ePROXY_TEXTURE_1D_EXT = 0x8063,
    ePROXY_TEXTURE_2D = 0x8064,
    ePROXY_TEXTURE_2D_EXT = 0x8064,
    eTEXTURE_3D = 0x806F,
    eTEXTURE_3D_EXT = 0x806F,
    eTEXTURE_3D_OES = 0x806F,
    ePROXY_TEXTURE_3D = 0x8070,
    ePROXY_TEXTURE_3D_EXT = 0x8070,
    eDETAIL_TEXTURE_2D_SGIS = 0x8095,
    eTEXTURE_4D_SGIS = 0x8134,
    ePROXY_TEXTURE_4D_SGIS = 0x8135,
    eTEXTURE_RECTANGLE = 0x84F5,
    eTEXTURE_RECTANGLE_ARB = 0x84F5,
    eTEXTURE_RECTANGLE_NV = 0x84F5,
    ePROXY_TEXTURE_RECTANGLE = 0x84F7,
    ePROXY_TEXTURE_RECTANGLE_ARB = 0x84F7,
    ePROXY_TEXTURE_RECTANGLE_NV = 0x84F7,
    eTEXTURE_CUBE_MAP = 0x8513,
    eTEXTURE_CUBE_MAP_ARB = 0x8513,
    eTEXTURE_CUBE_MAP_EXT = 0x8513,
    eTEXTURE_CUBE_MAP_OES = 0x8513,
    eTEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,
    eTEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515,
    eTEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515,
    eTEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515,
    eTEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,
    eTEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516,
    eTEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516,
    eTEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516,
    eTEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,
    eTEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517,
    eTEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517,
    eTEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518,
    eTEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,
    eTEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519,
    eTEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519,
    eTEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A,
    ePROXY_TEXTURE_CUBE_MAP = 0x851B,
    ePROXY_TEXTURE_CUBE_MAP_ARB = 0x851B,
    ePROXY_TEXTURE_CUBE_MAP_EXT = 0x851B,
    eTEXTURE_1D_ARRAY = 0x8C18,
    ePROXY_TEXTURE_1D_ARRAY = 0x8C19,
    ePROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19,
    eTEXTURE_2D_ARRAY = 0x8C1A,
    ePROXY_TEXTURE_2D_ARRAY = 0x8C1B,
    ePROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B,
    eTEXTURE_BUFFER = 0x8C2A,
    eRENDERBUFFER = 0x8D41,
    eTEXTURE_CUBE_MAP_ARRAY = 0x9009,
    eTEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009,
    eTEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009,
    eTEXTURE_CUBE_MAP_ARRAY_OES = 0x9009,
    ePROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B,
    ePROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B,
    eTEXTURE_2D_MULTISAMPLE = 0x9100,
    ePROXY_TEXTURE_2D_MULTISAMPLE = 0x9101,
    eTEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102,
    ePROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103
};
enum class LogicOp : GLenum {
    eCLEAR = 0x1500,
    eAND = 0x1501,
    eAND_REVERSE = 0x1502,
    eCOPY = 0x1503,
    eAND_INVERTED = 0x1504,
    eNOOP = 0x1505,
    eXOR = 0x1506,
    eOR = 0x1507,
    eNOR = 0x1508,
    eEQUIV = 0x1509,
    eINVERT = 0x150A,
    eOR_REVERSE = 0x150B,
    eCOPY_INVERTED = 0x150C,
    eOR_INVERTED = 0x150D,
    eNAND = 0x150E,
    eSET = 0x150F
};
enum class DrawElementsType : GLenum {
    eUNSIGNED_BYTE = 0x1401,
    eUNSIGNED_SHORT = 0x1403,
    eUNSIGNED_INT = 0x1405
};
enum class PrimitiveType : GLenum {
    ePOINTS = 0x0000,
    eLINES = 0x0001,
    eLINE_LOOP = 0x0002,
    eLINE_STRIP = 0x0003,
    eTRIANGLES = 0x0004,
    eTRIANGLE_STRIP = 0x0005,
    eTRIANGLE_FAN = 0x0006,
    eQUADS = 0x0007,
    eQUADS_EXT = 0x0007,
    eQUAD_STRIP = 0x0008,
    ePOLYGON = 0x0009,
    eLINES_ADJACENCY = 0x000A,
    eLINES_ADJACENCY_ARB = 0x000A,
    eLINES_ADJACENCY_EXT = 0x000A,
    eLINE_STRIP_ADJACENCY = 0x000B,
    eLINE_STRIP_ADJACENCY_ARB = 0x000B,
    eLINE_STRIP_ADJACENCY_EXT = 0x000B,
    eTRIANGLES_ADJACENCY = 0x000C,
    eTRIANGLES_ADJACENCY_ARB = 0x000C,
    eTRIANGLES_ADJACENCY_EXT = 0x000C,
    eTRIANGLE_STRIP_ADJACENCY = 0x000D,
    eTRIANGLE_STRIP_ADJACENCY_ARB = 0x000D,
    eTRIANGLE_STRIP_ADJACENCY_EXT = 0x000D,
    ePATCHES = 0x000E,
    ePATCHES_EXT = 0x000E
};
enum class ShaderType : GLenum {
    eFRAGMENT_SHADER = 0x8B30,
    eFRAGMENT_SHADER_ARB = 0x8B30,
    eVERTEX_SHADER = 0x8B31,
    eVERTEX_SHADER_ARB = 0x8B31,
    eGEOMETRY_SHADER = 0x8DD9,
    eTESS_EVALUATION_SHADER = 0x8E87,
    eTESS_CONTROL_SHADER = 0x8E88,
    eCOMPUTE_SHADER = 0x91B9
};
enum class PixelStoreParameter : GLenum {
    eUNPACK_SWAP_BYTES = 0x0CF0,
    eUNPACK_LSB_FIRST = 0x0CF1,
    eUNPACK_ROW_LENGTH = 0x0CF2,
    eUNPACK_ROW_LENGTH_EXT = 0x0CF2,
    eUNPACK_SKIP_ROWS = 0x0CF3,
    eUNPACK_SKIP_ROWS_EXT = 0x0CF3,
    eUNPACK_SKIP_PIXELS = 0x0CF4,
    eUNPACK_SKIP_PIXELS_EXT = 0x0CF4,
    eUNPACK_ALIGNMENT = 0x0CF5,
    ePACK_SWAP_BYTES = 0x0D00,
    ePACK_LSB_FIRST = 0x0D01,
    ePACK_ROW_LENGTH = 0x0D02,
    ePACK_SKIP_ROWS = 0x0D03,
    ePACK_SKIP_PIXELS = 0x0D04,
    ePACK_ALIGNMENT = 0x0D05,
    ePACK_SKIP_IMAGES = 0x806B,
    ePACK_SKIP_IMAGES_EXT = 0x806B,
    ePACK_IMAGE_HEIGHT = 0x806C,
    ePACK_IMAGE_HEIGHT_EXT = 0x806C,
    eUNPACK_SKIP_IMAGES = 0x806D,
    eUNPACK_SKIP_IMAGES_EXT = 0x806D,
    eUNPACK_IMAGE_HEIGHT = 0x806E,
    eUNPACK_IMAGE_HEIGHT_EXT = 0x806E,
    ePACK_SKIP_VOLUMES_SGIS = 0x8130,
    ePACK_IMAGE_DEPTH_SGIS = 0x8131,
    eUNPACK_SKIP_VOLUMES_SGIS = 0x8132,
    eUNPACK_IMAGE_DEPTH_SGIS = 0x8133,
    ePIXEL_TILE_WIDTH_SGIX = 0x8140,
    ePIXEL_TILE_HEIGHT_SGIX = 0x8141,
    ePIXEL_TILE_GRID_WIDTH_SGIX = 0x8142,
    ePIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143,
    ePIXEL_TILE_GRID_DEPTH_SGIX = 0x8144,
    ePIXEL_TILE_CACHE_SIZE_SGIX = 0x8145,
    ePACK_RESAMPLE_SGIX = 0x842E,
    eUNPACK_RESAMPLE_SGIX = 0x842F,
    ePACK_SUBSAMPLE_RATE_SGIX = 0x85A0,
    eUNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1,
    ePACK_RESAMPLE_OML = 0x8984,
    eUNPACK_RESAMPLE_OML = 0x8985
};
enum class SyncCondition : GLenum {
    eSYNC_GPU_COMMANDS_COMPLETE = 0x9117
};
enum class SyncParameterName : GLenum {
    eOBJECT_TYPE = 0x9112,
    eSYNC_CONDITION = 0x9113,
    eSYNC_STATUS = 0x9114,
    eSYNC_FLAGS = 0x9115
};
enum class SyncBehaviorFlags : GLenum {
    eNONE = 0
};
enum class TextureUnit : GLenum {
    eTEXTURE0 = 0x84C0,
    eTEXTURE1 = 0x84C1,
    eTEXTURE2 = 0x84C2,
    eTEXTURE3 = 0x84C3,
    eTEXTURE4 = 0x84C4,
    eTEXTURE5 = 0x84C5,
    eTEXTURE6 = 0x84C6,
    eTEXTURE7 = 0x84C7,
    eTEXTURE8 = 0x84C8,
    eTEXTURE9 = 0x84C9,
    eTEXTURE10 = 0x84CA,
    eTEXTURE11 = 0x84CB,
    eTEXTURE12 = 0x84CC,
    eTEXTURE13 = 0x84CD,
    eTEXTURE14 = 0x84CE,
    eTEXTURE15 = 0x84CF,
    eTEXTURE16 = 0x84D0,
    eTEXTURE17 = 0x84D1,
    eTEXTURE18 = 0x84D2,
    eTEXTURE19 = 0x84D3,
    eTEXTURE20 = 0x84D4,
    eTEXTURE21 = 0x84D5,
    eTEXTURE22 = 0x84D6,
    eTEXTURE23 = 0x84D7,
    eTEXTURE24 = 0x84D8,
    eTEXTURE25 = 0x84D9,
    eTEXTURE26 = 0x84DA,
    eTEXTURE27 = 0x84DB,
    eTEXTURE28 = 0x84DC,
    eTEXTURE29 = 0x84DD,
    eTEXTURE30 = 0x84DE,
    eTEXTURE31 = 0x84DF
};
enum class ShaderParameterName : GLenum {
    eSHADER_TYPE = 0x8B4F,
    eDELETE_STATUS = 0x8B80,
    eCOMPILE_STATUS = 0x8B81,
    eINFO_LOG_LENGTH = 0x8B84,
    eSHADER_SOURCE_LENGTH = 0x8B88
};
enum class PixelFormat : GLenum {
    eUNSIGNED_SHORT = 0x1403,
    eUNSIGNED_INT = 0x1405,
    eCOLOR_INDEX = 0x1900,
    eSTENCIL_INDEX = 0x1901,
    eDEPTH_COMPONENT = 0x1902,
    eRED = 0x1903,
    eRED_EXT = 0x1903,
    eGREEN = 0x1904,
    eBLUE = 0x1905,
    eALPHA = 0x1906,
    eRGB = 0x1907,
    eRGBA = 0x1908,
    eLUMINANCE = 0x1909,
    eLUMINANCE_ALPHA = 0x190A,
    eABGR_EXT = 0x8000,
    eCMYK_EXT = 0x800C,
    eCMYKA_EXT = 0x800D,
    eBGR = 0x80E0,
    eBGR_EXT = 0x80E0,
    eBGRA = 0x80E1,
    eBGRA_EXT = 0x80E1,
    eBGRA_IMG = 0x80E1,
    eYCRCB_422_SGIX = 0x81BB,
    eYCRCB_444_SGIX = 0x81BC,
    eRG = 0x8227,
    eRG_INTEGER = 0x8228,
    eDEPTH_STENCIL = 0x84F9,
    eRED_INTEGER = 0x8D94,
    eGREEN_INTEGER = 0x8D95,
    eBLUE_INTEGER = 0x8D96,
    eRGB_INTEGER = 0x8D98,
    eRGBA_INTEGER = 0x8D99,
    eBGR_INTEGER = 0x8D9A,
    eBGRA_INTEGER = 0x8D9B
};
enum class Buffer : GLenum {
    eCOLOR = 0x1800,
    eDEPTH = 0x1801,
    eSTENCIL = 0x1802
};
enum class QueryObjectParameterName : GLenum {
    eQUERY_TARGET = 0x82EA,
    eQUERY_RESULT = 0x8866,
    eQUERY_RESULT_AVAILABLE = 0x8867,
    eQUERY_RESULT_NO_WAIT = 0x9194
};
enum class QueryParameterName : GLenum {
    eQUERY_COUNTER_BITS = 0x8864,
    eCURRENT_QUERY = 0x8865
};
enum class RenderbufferParameterName : GLenum {
    eRENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB,
    eRENDERBUFFER_SAMPLES = 0x8CAB,
    eRENDERBUFFER_SAMPLES_ANGLE = 0x8CAB,
    eRENDERBUFFER_SAMPLES_APPLE = 0x8CAB,
    eRENDERBUFFER_SAMPLES_EXT = 0x8CAB,
    eRENDERBUFFER_SAMPLES_NV = 0x8CAB,
    eRENDERBUFFER_WIDTH = 0x8D42,
    eRENDERBUFFER_WIDTH_EXT = 0x8D42,
    eRENDERBUFFER_WIDTH_OES = 0x8D42,
    eRENDERBUFFER_HEIGHT = 0x8D43,
    eRENDERBUFFER_HEIGHT_EXT = 0x8D43,
    eRENDERBUFFER_HEIGHT_OES = 0x8D43,
    eRENDERBUFFER_INTERNAL_FORMAT = 0x8D44,
    eRENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44,
    eRENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44,
    eRENDERBUFFER_RED_SIZE = 0x8D50,
    eRENDERBUFFER_RED_SIZE_EXT = 0x8D50,
    eRENDERBUFFER_RED_SIZE_OES = 0x8D50,
    eRENDERBUFFER_GREEN_SIZE = 0x8D51,
    eRENDERBUFFER_GREEN_SIZE_EXT = 0x8D51,
    eRENDERBUFFER_GREEN_SIZE_OES = 0x8D51,
    eRENDERBUFFER_BLUE_SIZE = 0x8D52,
    eRENDERBUFFER_BLUE_SIZE_EXT = 0x8D52,
    eRENDERBUFFER_BLUE_SIZE_OES = 0x8D52,
    eRENDERBUFFER_ALPHA_SIZE = 0x8D53,
    eRENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53,
    eRENDERBUFFER_ALPHA_SIZE_OES = 0x8D53,
    eRENDERBUFFER_DEPTH_SIZE = 0x8D54,
    eRENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54,
    eRENDERBUFFER_DEPTH_SIZE_OES = 0x8D54,
    eRENDERBUFFER_STENCIL_SIZE = 0x8D55,
    eRENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55,
    eRENDERBUFFER_STENCIL_SIZE_OES = 0x8D55,
    eRENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10,
    eRENDERBUFFER_SAMPLES_IMG = 0x9133,
    eRENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2
};
enum class FramebufferAttachmentParameterName : GLenum {
    eFRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,
    eFRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210,
    eFRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,
    eFRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211,
    eFRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,
    eFRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,
    eFRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,
    eFRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,
    eFRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,
    eFRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,
    eFRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
    eFRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0,
    eFRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0,
    eFRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,
    eFRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1,
    eFRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C,
    eFRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7,
    eFRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7,
    eFRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7,
    eFRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8DA7,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913F,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630,
    eFRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632
};
enum class UniformPName : GLenum {
    eUNIFORM_TYPE = 0x8A37,
    eUNIFORM_SIZE = 0x8A38,
    eUNIFORM_NAME_LENGTH = 0x8A39,
    eUNIFORM_BLOCK_INDEX = 0x8A3A,
    eUNIFORM_OFFSET = 0x8A3B,
    eUNIFORM_ARRAY_STRIDE = 0x8A3C,
    eUNIFORM_MATRIX_STRIDE = 0x8A3D,
    eUNIFORM_IS_ROW_MAJOR = 0x8A3E,
    eUNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA
};
enum class InternalFormat : GLenum {
    eSTENCIL_INDEX = 0x1901,
    eSTENCIL_INDEX_OES = 0x1901,
    eDEPTH_COMPONENT = 0x1902,
    eRED = 0x1903,
    eRED_EXT = 0x1903,
    eRGB = 0x1907,
    eRGBA = 0x1908,
    eR3_G3_B2 = 0x2A10,
    eALPHA4 = 0x803B,
    eALPHA4_EXT = 0x803B,
    eALPHA8 = 0x803C,
    eALPHA8_EXT = 0x803C,
    eALPHA8_OES = 0x803C,
    eALPHA12 = 0x803D,
    eALPHA12_EXT = 0x803D,
    eALPHA16 = 0x803E,
    eALPHA16_EXT = 0x803E,
    eLUMINANCE4 = 0x803F,
    eLUMINANCE4_EXT = 0x803F,
    eLUMINANCE8 = 0x8040,
    eLUMINANCE8_EXT = 0x8040,
    eLUMINANCE8_OES = 0x8040,
    eLUMINANCE12 = 0x8041,
    eLUMINANCE12_EXT = 0x8041,
    eLUMINANCE16 = 0x8042,
    eLUMINANCE16_EXT = 0x8042,
    eLUMINANCE4_ALPHA4 = 0x8043,
    eLUMINANCE4_ALPHA4_EXT = 0x8043,
    eLUMINANCE4_ALPHA4_OES = 0x8043,
    eLUMINANCE6_ALPHA2 = 0x8044,
    eLUMINANCE6_ALPHA2_EXT = 0x8044,
    eLUMINANCE8_ALPHA8 = 0x8045,
    eLUMINANCE8_ALPHA8_EXT = 0x8045,
    eLUMINANCE8_ALPHA8_OES = 0x8045,
    eLUMINANCE12_ALPHA4 = 0x8046,
    eLUMINANCE12_ALPHA4_EXT = 0x8046,
    eLUMINANCE12_ALPHA12 = 0x8047,
    eLUMINANCE12_ALPHA12_EXT = 0x8047,
    eLUMINANCE16_ALPHA16 = 0x8048,
    eLUMINANCE16_ALPHA16_EXT = 0x8048,
    eINTENSITY = 0x8049,
    eINTENSITY4 = 0x804A,
    eINTENSITY4_EXT = 0x804A,
    eINTENSITY8 = 0x804B,
    eINTENSITY8_EXT = 0x804B,
    eINTENSITY12 = 0x804C,
    eINTENSITY12_EXT = 0x804C,
    eINTENSITY16 = 0x804D,
    eINTENSITY16_EXT = 0x804D,
    eRGB2_EXT = 0x804E,
    eRGB4 = 0x804F,
    eRGB4_EXT = 0x804F,
    eRGB5 = 0x8050,
    eRGB5_EXT = 0x8050,
    eRGB8 = 0x8051,
    eRGB8_EXT = 0x8051,
    eRGB8_OES = 0x8051,
    eRGB10 = 0x8052,
    eRGB10_EXT = 0x8052,
    eRGB12 = 0x8053,
    eRGB12_EXT = 0x8053,
    eRGB16 = 0x8054,
    eRGB16_EXT = 0x8054,
    eRGBA2 = 0x8055,
    eRGBA2_EXT = 0x8055,
    eRGBA4 = 0x8056,
    eRGBA4_EXT = 0x8056,
    eRGBA4_OES = 0x8056,
    eRGB5_A1 = 0x8057,
    eRGB5_A1_EXT = 0x8057,
    eRGB5_A1_OES = 0x8057,
    eRGBA8 = 0x8058,
    eRGBA8_EXT = 0x8058,
    eRGBA8_OES = 0x8058,
    eRGB10_A2 = 0x8059,
    eRGB10_A2_EXT = 0x8059,
    eRGBA12 = 0x805A,
    eRGBA12_EXT = 0x805A,
    eRGBA16 = 0x805B,
    eRGBA16_EXT = 0x805B,
    eDUAL_ALPHA4_SGIS = 0x8110,
    eDUAL_ALPHA8_SGIS = 0x8111,
    eDUAL_ALPHA12_SGIS = 0x8112,
    eDUAL_ALPHA16_SGIS = 0x8113,
    eDUAL_LUMINANCE4_SGIS = 0x8114,
    eDUAL_LUMINANCE8_SGIS = 0x8115,
    eDUAL_LUMINANCE12_SGIS = 0x8116,
    eDUAL_LUMINANCE16_SGIS = 0x8117,
    eDUAL_INTENSITY4_SGIS = 0x8118,
    eDUAL_INTENSITY8_SGIS = 0x8119,
    eDUAL_INTENSITY12_SGIS = 0x811A,
    eDUAL_INTENSITY16_SGIS = 0x811B,
    eDUAL_LUMINANCE_ALPHA4_SGIS = 0x811C,
    eDUAL_LUMINANCE_ALPHA8_SGIS = 0x811D,
    eQUAD_ALPHA4_SGIS = 0x811E,
    eQUAD_ALPHA8_SGIS = 0x811F,
    eQUAD_LUMINANCE4_SGIS = 0x8120,
    eQUAD_LUMINANCE8_SGIS = 0x8121,
    eQUAD_INTENSITY4_SGIS = 0x8122,
    eQUAD_INTENSITY8_SGIS = 0x8123,
    eDEPTH_COMPONENT16 = 0x81A5,
    eDEPTH_COMPONENT16_ARB = 0x81A5,
    eDEPTH_COMPONENT16_OES = 0x81A5,
    eDEPTH_COMPONENT16_SGIX = 0x81A5,
    eDEPTH_COMPONENT24 = 0x81A6,
    eDEPTH_COMPONENT24_ARB = 0x81A6,
    eDEPTH_COMPONENT24_OES = 0x81A6,
    eDEPTH_COMPONENT24_SGIX = 0x81A6,
    eDEPTH_COMPONENT32 = 0x81A7,
    eDEPTH_COMPONENT32_ARB = 0x81A7,
    eDEPTH_COMPONENT32_OES = 0x81A7,
    eDEPTH_COMPONENT32_SGIX = 0x81A7,
    eCOMPRESSED_RED = 0x8225,
    eCOMPRESSED_RG = 0x8226,
    eRG = 0x8227,
    eR8 = 0x8229,
    eR8_EXT = 0x8229,
    eR16 = 0x822A,
    eR16_EXT = 0x822A,
    eRG8 = 0x822B,
    eRG8_EXT = 0x822B,
    eRG16 = 0x822C,
    eRG16_EXT = 0x822C,
    eR16F = 0x822D,
    eR16F_EXT = 0x822D,
    eR32F = 0x822E,
    eR32F_EXT = 0x822E,
    eRG16F = 0x822F,
    eRG16F_EXT = 0x822F,
    eRG32F = 0x8230,
    eRG32F_EXT = 0x8230,
    eR8I = 0x8231,
    eR8UI = 0x8232,
    eR16I = 0x8233,
    eR16UI = 0x8234,
    eR32I = 0x8235,
    eR32UI = 0x8236,
    eRG8I = 0x8237,
    eRG8UI = 0x8238,
    eRG16I = 0x8239,
    eRG16UI = 0x823A,
    eRG32I = 0x823B,
    eRG32UI = 0x823C,
    eCOMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
    eCOMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
    eCOMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2,
    eCOMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
    eCOMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3,
    eCOMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,
    eCOMPRESSED_RGB = 0x84ED,
    eCOMPRESSED_RGBA = 0x84EE,
    eDEPTH_STENCIL = 0x84F9,
    eDEPTH_STENCIL_EXT = 0x84F9,
    eDEPTH_STENCIL_NV = 0x84F9,
    eDEPTH_STENCIL_OES = 0x84F9,
    eDEPTH_STENCIL_MESA = 0x8750,
    eRGBA32F = 0x8814,
    eRGBA32F_ARB = 0x8814,
    eRGBA32F_EXT = 0x8814,
    eRGB32F = 0x8815,
    eRGB32F_ARB = 0x8815,
    eRGB32F_EXT = 0x8815,
    eRGBA16F = 0x881A,
    eRGBA16F_ARB = 0x881A,
    eRGBA16F_EXT = 0x881A,
    eRGB16F = 0x881B,
    eRGB16F_ARB = 0x881B,
    eRGB16F_EXT = 0x881B,
    eDEPTH24_STENCIL8 = 0x88F0,
    eDEPTH24_STENCIL8_EXT = 0x88F0,
    eDEPTH24_STENCIL8_OES = 0x88F0,
    eR11F_G11F_B10F = 0x8C3A,
    eR11F_G11F_B10F_APPLE = 0x8C3A,
    eR11F_G11F_B10F_EXT = 0x8C3A,
    eRGB9_E5 = 0x8C3D,
    eRGB9_E5_APPLE = 0x8C3D,
    eRGB9_E5_EXT = 0x8C3D,
    eSRGB = 0x8C40,
    eSRGB_EXT = 0x8C40,
    eSRGB8 = 0x8C41,
    eSRGB8_EXT = 0x8C41,
    eSRGB8_NV = 0x8C41,
    eSRGB_ALPHA = 0x8C42,
    eSRGB_ALPHA_EXT = 0x8C42,
    eSRGB8_ALPHA8 = 0x8C43,
    eSRGB8_ALPHA8_EXT = 0x8C43,
    eCOMPRESSED_SRGB = 0x8C48,
    eCOMPRESSED_SRGB_ALPHA = 0x8C49,
    eCOMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,
    eCOMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F,
    eDEPTH_COMPONENT32F = 0x8CAC,
    eDEPTH32F_STENCIL8 = 0x8CAD,
    eSTENCIL_INDEX1 = 0x8D46,
    eSTENCIL_INDEX1_EXT = 0x8D46,
    eSTENCIL_INDEX1_OES = 0x8D46,
    eSTENCIL_INDEX4 = 0x8D47,
    eSTENCIL_INDEX4_EXT = 0x8D47,
    eSTENCIL_INDEX4_OES = 0x8D47,
    eSTENCIL_INDEX8 = 0x8D48,
    eSTENCIL_INDEX8_EXT = 0x8D48,
    eSTENCIL_INDEX8_OES = 0x8D48,
    eSTENCIL_INDEX16 = 0x8D49,
    eSTENCIL_INDEX16_EXT = 0x8D49,
    eRGB565_OES = 0x8D62,
    eRGB565 = 0x8D62,
    eETC1_RGB8_OES = 0x8D64,
    eRGBA32UI = 0x8D70,
    eRGBA32UI_EXT = 0x8D70,
    eRGB32UI = 0x8D71,
    eRGB32UI_EXT = 0x8D71,
    eALPHA32UI_EXT = 0x8D72,
    eINTENSITY32UI_EXT = 0x8D73,
    eLUMINANCE32UI_EXT = 0x8D74,
    eLUMINANCE_ALPHA32UI_EXT = 0x8D75,
    eRGBA16UI = 0x8D76,
    eRGBA16UI_EXT = 0x8D76,
    eRGB16UI = 0x8D77,
    eRGB16UI_EXT = 0x8D77,
    eALPHA16UI_EXT = 0x8D78,
    eINTENSITY16UI_EXT = 0x8D79,
    eLUMINANCE16UI_EXT = 0x8D7A,
    eLUMINANCE_ALPHA16UI_EXT = 0x8D7B,
    eRGBA8UI = 0x8D7C,
    eRGBA8UI_EXT = 0x8D7C,
    eRGB8UI = 0x8D7D,
    eRGB8UI_EXT = 0x8D7D,
    eALPHA8UI_EXT = 0x8D7E,
    eINTENSITY8UI_EXT = 0x8D7F,
    eLUMINANCE8UI_EXT = 0x8D80,
    eLUMINANCE_ALPHA8UI_EXT = 0x8D81,
    eRGBA32I = 0x8D82,
    eRGBA32I_EXT = 0x8D82,
    eRGB32I = 0x8D83,
    eRGB32I_EXT = 0x8D83,
    eALPHA32I_EXT = 0x8D84,
    eINTENSITY32I_EXT = 0x8D85,
    eLUMINANCE32I_EXT = 0x8D86,
    eLUMINANCE_ALPHA32I_EXT = 0x8D87,
    eRGBA16I = 0x8D88,
    eRGBA16I_EXT = 0x8D88,
    eRGB16I = 0x8D89,
    eRGB16I_EXT = 0x8D89,
    eALPHA16I_EXT = 0x8D8A,
    eINTENSITY16I_EXT = 0x8D8B,
    eLUMINANCE16I_EXT = 0x8D8C,
    eLUMINANCE_ALPHA16I_EXT = 0x8D8D,
    eRGBA8I = 0x8D8E,
    eRGBA8I_EXT = 0x8D8E,
    eRGB8I = 0x8D8F,
    eRGB8I_EXT = 0x8D8F,
    eALPHA8I_EXT = 0x8D90,
    eINTENSITY8I_EXT = 0x8D91,
    eLUMINANCE8I_EXT = 0x8D92,
    eLUMINANCE_ALPHA8I_EXT = 0x8D93,
    eDEPTH_COMPONENT32F_NV = 0x8DAB,
    eDEPTH32F_STENCIL8_NV = 0x8DAC,
    eCOMPRESSED_RED_RGTC1 = 0x8DBB,
    eCOMPRESSED_RED_RGTC1_EXT = 0x8DBB,
    eCOMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC,
    eCOMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC,
    eCOMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD,
    eCOMPRESSED_RG_RGTC2 = 0x8DBD,
    eCOMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE,
    eCOMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE,
    eCOMPRESSED_RGBA_BPTC_UNORM = 0x8E8C,
    eCOMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C,
    eCOMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F,
    eR8_SNORM = 0x8F94,
    eRG8_SNORM = 0x8F95,
    eRGB8_SNORM = 0x8F96,
    eRGBA8_SNORM = 0x8F97,
    eR16_SNORM = 0x8F98,
    eR16_SNORM_EXT = 0x8F98,
    eRG16_SNORM = 0x8F99,
    eRG16_SNORM_EXT = 0x8F99,
    eRGB16_SNORM = 0x8F9A,
    eRGB16_SNORM_EXT = 0x8F9A,
    eRGBA16_SNORM = 0x8F9B,
    eRGBA16_SNORM_EXT = 0x8F9B,
    eSR8_EXT = 0x8FBD,
    eSRG8_EXT = 0x8FBE,
    eRGB10_A2UI = 0x906F,
    eCOMPRESSED_R11_EAC = 0x9270,
    eCOMPRESSED_R11_EAC_OES = 0x9270,
    eCOMPRESSED_SIGNED_R11_EAC = 0x9271,
    eCOMPRESSED_SIGNED_R11_EAC_OES = 0x9271,
    eCOMPRESSED_RG11_EAC = 0x9272,
    eCOMPRESSED_RG11_EAC_OES = 0x9272,
    eCOMPRESSED_SIGNED_RG11_EAC = 0x9273,
    eCOMPRESSED_SIGNED_RG11_EAC_OES = 0x9273,
    eCOMPRESSED_RGB8_ETC2 = 0x9274,
    eCOMPRESSED_RGB8_ETC2_OES = 0x9274,
    eCOMPRESSED_SRGB8_ETC2 = 0x9275,
    eCOMPRESSED_SRGB8_ETC2_OES = 0x9275,
    eCOMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
    eCOMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276,
    eCOMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
    eCOMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277,
    eCOMPRESSED_RGBA8_ETC2_EAC = 0x9278,
    eCOMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278,
    eCOMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
    eCOMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279,
    eCOMPRESSED_RGBA_ASTC_4x4 = 0x93B0,
    eCOMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,
    eCOMPRESSED_RGBA_ASTC_5x4 = 0x93B1,
    eCOMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,
    eCOMPRESSED_RGBA_ASTC_5x5 = 0x93B2,
    eCOMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,
    eCOMPRESSED_RGBA_ASTC_6x5 = 0x93B3,
    eCOMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,
    eCOMPRESSED_RGBA_ASTC_6x6 = 0x93B4,
    eCOMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,
    eCOMPRESSED_RGBA_ASTC_8x5 = 0x93B5,
    eCOMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,
    eCOMPRESSED_RGBA_ASTC_8x6 = 0x93B6,
    eCOMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,
    eCOMPRESSED_RGBA_ASTC_8x8 = 0x93B7,
    eCOMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,
    eCOMPRESSED_RGBA_ASTC_10x5 = 0x93B8,
    eCOMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,
    eCOMPRESSED_RGBA_ASTC_10x6 = 0x93B9,
    eCOMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,
    eCOMPRESSED_RGBA_ASTC_10x8 = 0x93BA,
    eCOMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,
    eCOMPRESSED_RGBA_ASTC_10x10 = 0x93BB,
    eCOMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,
    eCOMPRESSED_RGBA_ASTC_12x10 = 0x93BC,
    eCOMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,
    eCOMPRESSED_RGBA_ASTC_12x12 = 0x93BD,
    eCOMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,
    eCOMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0,
    eCOMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1,
    eCOMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2,
    eCOMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3,
    eCOMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4,
    eCOMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5,
    eCOMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6,
    eCOMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7,
    eCOMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8,
    eCOMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9
};
enum class PolygonMode : GLenum {
    ePOINT = 0x1B00,
    eLINE = 0x1B01,
    eFILL = 0x1B02
};
enum class StencilFunction : GLenum {
    eNEVER = 0x0200,
    eLESS = 0x0201,
    eEQUAL = 0x0202,
    eLEQUAL = 0x0203,
    eGREATER = 0x0204,
    eNOTEQUAL = 0x0205,
    eGEQUAL = 0x0206,
    eALWAYS = 0x0207
};
enum class QueryTarget : GLenum {
    eTRANSFORM_FEEDBACK_OVERFLOW = 0x82EC,
    eVERTICES_SUBMITTED = 0x82EE,
    ePRIMITIVES_SUBMITTED = 0x82EF,
    eVERTEX_SHADER_INVOCATIONS = 0x82F0,
    eTIME_ELAPSED = 0x88BF,
    eSAMPLES_PASSED = 0x8914,
    eANY_SAMPLES_PASSED = 0x8C2F,
    ePRIMITIVES_GENERATED = 0x8C87,
    eTRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,
    eANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A
};
enum class DrawBufferMode : GLenum {
    eNONE = 0,
    eNONE_OES = 0,
    eFRONT_LEFT = 0x0400,
    eFRONT_RIGHT = 0x0401,
    eBACK_LEFT = 0x0402,
    eBACK_RIGHT = 0x0403,
    eFRONT = 0x0404,
    eBACK = 0x0405,
    eLEFT = 0x0406,
    eRIGHT = 0x0407,
    eFRONT_AND_BACK = 0x0408,
    eAUX0 = 0x0409,
    eAUX1 = 0x040A,
    eAUX2 = 0x040B,
    eAUX3 = 0x040C,
    eCOLOR_ATTACHMENT0 = 0x8CE0,
    eCOLOR_ATTACHMENT0_NV = 0x8CE0,
    eCOLOR_ATTACHMENT1 = 0x8CE1,
    eCOLOR_ATTACHMENT1_NV = 0x8CE1,
    eCOLOR_ATTACHMENT2 = 0x8CE2,
    eCOLOR_ATTACHMENT2_NV = 0x8CE2,
    eCOLOR_ATTACHMENT3 = 0x8CE3,
    eCOLOR_ATTACHMENT3_NV = 0x8CE3,
    eCOLOR_ATTACHMENT4 = 0x8CE4,
    eCOLOR_ATTACHMENT4_NV = 0x8CE4,
    eCOLOR_ATTACHMENT5 = 0x8CE5,
    eCOLOR_ATTACHMENT5_NV = 0x8CE5,
    eCOLOR_ATTACHMENT6 = 0x8CE6,
    eCOLOR_ATTACHMENT6_NV = 0x8CE6,
    eCOLOR_ATTACHMENT7 = 0x8CE7,
    eCOLOR_ATTACHMENT7_NV = 0x8CE7,
    eCOLOR_ATTACHMENT8 = 0x8CE8,
    eCOLOR_ATTACHMENT8_NV = 0x8CE8,
    eCOLOR_ATTACHMENT9 = 0x8CE9,
    eCOLOR_ATTACHMENT9_NV = 0x8CE9,
    eCOLOR_ATTACHMENT10 = 0x8CEA,
    eCOLOR_ATTACHMENT10_NV = 0x8CEA,
    eCOLOR_ATTACHMENT11 = 0x8CEB,
    eCOLOR_ATTACHMENT11_NV = 0x8CEB,
    eCOLOR_ATTACHMENT12 = 0x8CEC,
    eCOLOR_ATTACHMENT12_NV = 0x8CEC,
    eCOLOR_ATTACHMENT13 = 0x8CED,
    eCOLOR_ATTACHMENT13_NV = 0x8CED,
    eCOLOR_ATTACHMENT14 = 0x8CEE,
    eCOLOR_ATTACHMENT14_NV = 0x8CEE,
    eCOLOR_ATTACHMENT15 = 0x8CEF,
    eCOLOR_ATTACHMENT15_NV = 0x8CEF,
    eCOLOR_ATTACHMENT16 = 0x8CF0,
    eCOLOR_ATTACHMENT17 = 0x8CF1,
    eCOLOR_ATTACHMENT18 = 0x8CF2,
    eCOLOR_ATTACHMENT19 = 0x8CF3,
    eCOLOR_ATTACHMENT20 = 0x8CF4,
    eCOLOR_ATTACHMENT21 = 0x8CF5,
    eCOLOR_ATTACHMENT22 = 0x8CF6,
    eCOLOR_ATTACHMENT23 = 0x8CF7,
    eCOLOR_ATTACHMENT24 = 0x8CF8,
    eCOLOR_ATTACHMENT25 = 0x8CF9,
    eCOLOR_ATTACHMENT26 = 0x8CFA,
    eCOLOR_ATTACHMENT27 = 0x8CFB,
    eCOLOR_ATTACHMENT28 = 0x8CFC,
    eCOLOR_ATTACHMENT29 = 0x8CFD,
    eCOLOR_ATTACHMENT30 = 0x8CFE,
    eCOLOR_ATTACHMENT31 = 0x8CFF
};
enum class FramebufferTarget : GLenum {
    eREAD_FRAMEBUFFER = 0x8CA8,
    eDRAW_FRAMEBUFFER = 0x8CA9,
    eFRAMEBUFFER = 0x8D40,
    eFRAMEBUFFER_OES = 0x8D40
};
enum class VertexAttribIType : GLenum {
    eBYTE = 0x1400,
    eUNSIGNED_BYTE = 0x1401,
    eSHORT = 0x1402,
    eUNSIGNED_SHORT = 0x1403,
    eINT = 0x1404,
    eUNSIGNED_INT = 0x1405
};
enum class SamplerParameterI : GLenum {
    eTEXTURE_MAG_FILTER = 0x2800,
    eTEXTURE_MIN_FILTER = 0x2801,
    eTEXTURE_WRAP_S = 0x2802,
    eTEXTURE_WRAP_T = 0x2803,
    eTEXTURE_WRAP_R = 0x8072,
    eTEXTURE_COMPARE_MODE = 0x884C,
    eTEXTURE_COMPARE_FUNC = 0x884D,
    eTEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A
};
enum class ProgramPropertyARB : GLenum {
    eCOMPUTE_WORK_GROUP_SIZE = 0x8267,
    ePROGRAM_BINARY_LENGTH = 0x8741,
    eGEOMETRY_VERTICES_OUT = 0x8916,
    eGEOMETRY_INPUT_TYPE = 0x8917,
    eGEOMETRY_OUTPUT_TYPE = 0x8918,
    eACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35,
    eACTIVE_UNIFORM_BLOCKS = 0x8A36,
    eDELETE_STATUS = 0x8B80,
    eLINK_STATUS = 0x8B82,
    eVALIDATE_STATUS = 0x8B83,
    eINFO_LOG_LENGTH = 0x8B84,
    eATTACHED_SHADERS = 0x8B85,
    eACTIVE_UNIFORMS = 0x8B86,
    eACTIVE_UNIFORM_MAX_LENGTH = 0x8B87,
    eACTIVE_ATTRIBUTES = 0x8B89,
    eACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A,
    eTRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76,
    eTRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F,
    eTRANSFORM_FEEDBACK_VARYINGS = 0x8C83,
    eACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9
};
enum class VertexAttribPointerPropertyARB : GLenum {
    eVERTEX_ATTRIB_ARRAY_POINTER = 0x8645,
    eVERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645
};
enum class CopyBufferSubDataTarget : GLenum {
    eARRAY_BUFFER = 0x8892,
    eELEMENT_ARRAY_BUFFER = 0x8893,
    ePIXEL_PACK_BUFFER = 0x88EB,
    ePIXEL_UNPACK_BUFFER = 0x88EC,
    eUNIFORM_BUFFER = 0x8A11,
    eTEXTURE_BUFFER = 0x8C2A,
    eTRANSFORM_FEEDBACK_BUFFER = 0x8C8E,
    eCOPY_READ_BUFFER = 0x8F36,
    eCOPY_WRITE_BUFFER = 0x8F37,
    eDRAW_INDIRECT_BUFFER = 0x8F3F,
    eSHADER_STORAGE_BUFFER = 0x90D2,
    eDISPATCH_INDIRECT_BUFFER = 0x90EE,
    eQUERY_BUFFER = 0x9192,
    eATOMIC_COUNTER_BUFFER = 0x92C0
};
enum class GetTextureParameter : GLenum {
    eTEXTURE_WIDTH = 0x1000,
    eTEXTURE_HEIGHT = 0x1001,
    eTEXTURE_INTERNAL_FORMAT = 0x1003,
    eTEXTURE_COMPONENTS = 0x1003,
    eTEXTURE_BORDER_COLOR = 0x1004,
    eTEXTURE_BORDER_COLOR_NV = 0x1004,
    eTEXTURE_BORDER = 0x1005,
    eTEXTURE_MAG_FILTER = 0x2800,
    eTEXTURE_MIN_FILTER = 0x2801,
    eTEXTURE_WRAP_S = 0x2802,
    eTEXTURE_WRAP_T = 0x2803,
    eTEXTURE_RED_SIZE = 0x805C,
    eTEXTURE_GREEN_SIZE = 0x805D,
    eTEXTURE_BLUE_SIZE = 0x805E,
    eTEXTURE_ALPHA_SIZE = 0x805F,
    eTEXTURE_LUMINANCE_SIZE = 0x8060,
    eTEXTURE_INTENSITY_SIZE = 0x8061,
    eTEXTURE_PRIORITY = 0x8066,
    eTEXTURE_RESIDENT = 0x8067,
    eTEXTURE_DEPTH_EXT = 0x8071,
    eTEXTURE_WRAP_R_EXT = 0x8072,
    eDETAIL_TEXTURE_LEVEL_SGIS = 0x809A,
    eDETAIL_TEXTURE_MODE_SGIS = 0x809B,
    eDETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C,
    eSHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0,
    eSHADOW_AMBIENT_SGIX = 0x80BF,
    eDUAL_TEXTURE_SELECT_SGIS = 0x8124,
    eQUAD_TEXTURE_SELECT_SGIS = 0x8125,
    eTEXTURE_4DSIZE_SGIS = 0x8136,
    eTEXTURE_WRAP_Q_SGIS = 0x8137,
    eTEXTURE_MIN_LOD_SGIS = 0x813A,
    eTEXTURE_MAX_LOD_SGIS = 0x813B,
    eTEXTURE_BASE_LEVEL_SGIS = 0x813C,
    eTEXTURE_MAX_LEVEL_SGIS = 0x813D,
    eTEXTURE_FILTER4_SIZE_SGIS = 0x8147,
    eTEXTURE_CLIPMAP_CENTER_SGIX = 0x8171,
    eTEXTURE_CLIPMAP_FRAME_SGIX = 0x8172,
    eTEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173,
    eTEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174,
    eTEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175,
    eTEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176,
    ePOST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
    ePOST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
    eTEXTURE_LOD_BIAS_S_SGIX = 0x818E,
    eTEXTURE_LOD_BIAS_T_SGIX = 0x818F,
    eTEXTURE_LOD_BIAS_R_SGIX = 0x8190,
    eGENERATE_MIPMAP_SGIS = 0x8191,
    eTEXTURE_COMPARE_SGIX = 0x819A,
    eTEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
    eTEXTURE_LEQUAL_R_SGIX = 0x819C,
    eTEXTURE_GEQUAL_R_SGIX = 0x819D,
    eTEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
    eTEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
    eTEXTURE_MAX_CLAMP_R_SGIX = 0x836B,
    eNORMAL_MAP = 0x8511,
    eNORMAL_MAP_ARB = 0x8511,
    eNORMAL_MAP_EXT = 0x8511,
    eNORMAL_MAP_NV = 0x8511,
    eNORMAL_MAP_OES = 0x8511,
    eREFLECTION_MAP = 0x8512,
    eREFLECTION_MAP_ARB = 0x8512,
    eREFLECTION_MAP_EXT = 0x8512,
    eREFLECTION_MAP_NV = 0x8512,
    eREFLECTION_MAP_OES = 0x8512,
    eTEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A,
    eSURFACE_COMPRESSION_EXT = 0x96C0
};
enum class TextureParameterName : GLenum {
    eTEXTURE_WIDTH = 0x1000,
    eTEXTURE_HEIGHT = 0x1001,
    eTEXTURE_INTERNAL_FORMAT = 0x1003,
    eTEXTURE_COMPONENTS = 0x1003,
    eTEXTURE_BORDER_COLOR = 0x1004,
    eTEXTURE_BORDER_COLOR_NV = 0x1004,
    eTEXTURE_BORDER = 0x1005,
    eTEXTURE_MAG_FILTER = 0x2800,
    eTEXTURE_MIN_FILTER = 0x2801,
    eTEXTURE_WRAP_S = 0x2802,
    eTEXTURE_WRAP_T = 0x2803,
    eTEXTURE_RED_SIZE = 0x805C,
    eTEXTURE_GREEN_SIZE = 0x805D,
    eTEXTURE_BLUE_SIZE = 0x805E,
    eTEXTURE_ALPHA_SIZE = 0x805F,
    eTEXTURE_LUMINANCE_SIZE = 0x8060,
    eTEXTURE_INTENSITY_SIZE = 0x8061,
    eTEXTURE_PRIORITY = 0x8066,
    eTEXTURE_PRIORITY_EXT = 0x8066,
    eTEXTURE_RESIDENT = 0x8067,
    eTEXTURE_DEPTH_EXT = 0x8071,
    eTEXTURE_WRAP_R = 0x8072,
    eTEXTURE_WRAP_R_EXT = 0x8072,
    eTEXTURE_WRAP_R_OES = 0x8072,
    eDETAIL_TEXTURE_LEVEL_SGIS = 0x809A,
    eDETAIL_TEXTURE_MODE_SGIS = 0x809B,
    eDETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C,
    eSHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0,
    eSHADOW_AMBIENT_SGIX = 0x80BF,
    eDUAL_TEXTURE_SELECT_SGIS = 0x8124,
    eQUAD_TEXTURE_SELECT_SGIS = 0x8125,
    eTEXTURE_4DSIZE_SGIS = 0x8136,
    eTEXTURE_WRAP_Q_SGIS = 0x8137,
    eTEXTURE_MIN_LOD = 0x813A,
    eTEXTURE_MIN_LOD_SGIS = 0x813A,
    eTEXTURE_MAX_LOD = 0x813B,
    eTEXTURE_MAX_LOD_SGIS = 0x813B,
    eTEXTURE_BASE_LEVEL = 0x813C,
    eTEXTURE_BASE_LEVEL_SGIS = 0x813C,
    eTEXTURE_MAX_LEVEL = 0x813D,
    eTEXTURE_MAX_LEVEL_SGIS = 0x813D,
    eTEXTURE_FILTER4_SIZE_SGIS = 0x8147,
    eTEXTURE_CLIPMAP_CENTER_SGIX = 0x8171,
    eTEXTURE_CLIPMAP_FRAME_SGIX = 0x8172,
    eTEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173,
    eTEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174,
    eTEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175,
    eTEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176,
    ePOST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
    ePOST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
    eTEXTURE_LOD_BIAS_S_SGIX = 0x818E,
    eTEXTURE_LOD_BIAS_T_SGIX = 0x818F,
    eTEXTURE_LOD_BIAS_R_SGIX = 0x8190,
    eGENERATE_MIPMAP = 0x8191,
    eGENERATE_MIPMAP_SGIS = 0x8191,
    eTEXTURE_COMPARE_SGIX = 0x819A,
    eTEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
    eTEXTURE_LEQUAL_R_SGIX = 0x819C,
    eTEXTURE_GEQUAL_R_SGIX = 0x819D,
    eTEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
    eTEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
    eTEXTURE_MAX_CLAMP_R_SGIX = 0x836B,
    eTEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF,
    eTEXTURE_MAX_ANISOTROPY = 0x84FE,
    eTEXTURE_LOD_BIAS = 0x8501,
    eTEXTURE_COMPARE_MODE = 0x884C,
    eTEXTURE_COMPARE_FUNC = 0x884D,
    eTEXTURE_SWIZZLE_R = 0x8E42,
    eTEXTURE_SWIZZLE_G = 0x8E43,
    eTEXTURE_SWIZZLE_B = 0x8E44,
    eTEXTURE_SWIZZLE_A = 0x8E45,
    eTEXTURE_SWIZZLE_RGBA = 0x8E46,
    eTEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A,
    eDEPTH_STENCIL_TEXTURE_MODE = 0x90EA,
    eTEXTURE_TILING_EXT = 0x9580,
    eTEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = 0x96A0
};
enum class ClampColorModeARB : GLenum {
    eFALSE = 0,
    eTRUE = 1,
    eFIXED_ONLY = 0x891D,
    eFIXED_ONLY_ARB = 0x891D
};
enum class TransformFeedbackBufferMode : GLenum {
    eINTERLEAVED_ATTRIBS = 0x8C8C,
    eSEPARATE_ATTRIBS = 0x8C8D
};
enum class SizedInternalFormat : GLenum {
    eR3_G3_B2 = 0x2A10,
    eALPHA4 = 0x803B,
    eALPHA4_EXT = 0x803B,
    eALPHA8 = 0x803C,
    eALPHA8_EXT = 0x803C,
    eALPHA8_OES = 0x803C,
    eALPHA12 = 0x803D,
    eALPHA12_EXT = 0x803D,
    eALPHA16 = 0x803E,
    eALPHA16_EXT = 0x803E,
    eLUMINANCE4 = 0x803F,
    eLUMINANCE4_EXT = 0x803F,
    eLUMINANCE8 = 0x8040,
    eLUMINANCE8_EXT = 0x8040,
    eLUMINANCE8_OES = 0x8040,
    eLUMINANCE12 = 0x8041,
    eLUMINANCE12_EXT = 0x8041,
    eLUMINANCE16 = 0x8042,
    eLUMINANCE16_EXT = 0x8042,
    eLUMINANCE4_ALPHA4 = 0x8043,
    eLUMINANCE4_ALPHA4_EXT = 0x8043,
    eLUMINANCE4_ALPHA4_OES = 0x8043,
    eLUMINANCE6_ALPHA2 = 0x8044,
    eLUMINANCE6_ALPHA2_EXT = 0x8044,
    eLUMINANCE8_ALPHA8 = 0x8045,
    eLUMINANCE8_ALPHA8_EXT = 0x8045,
    eLUMINANCE8_ALPHA8_OES = 0x8045,
    eLUMINANCE12_ALPHA4 = 0x8046,
    eLUMINANCE12_ALPHA4_EXT = 0x8046,
    eLUMINANCE12_ALPHA12 = 0x8047,
    eLUMINANCE12_ALPHA12_EXT = 0x8047,
    eLUMINANCE16_ALPHA16 = 0x8048,
    eLUMINANCE16_ALPHA16_EXT = 0x8048,
    eINTENSITY4 = 0x804A,
    eINTENSITY4_EXT = 0x804A,
    eINTENSITY8 = 0x804B,
    eINTENSITY8_EXT = 0x804B,
    eINTENSITY12 = 0x804C,
    eINTENSITY12_EXT = 0x804C,
    eINTENSITY16 = 0x804D,
    eINTENSITY16_EXT = 0x804D,
    eRGB2_EXT = 0x804E,
    eRGB4 = 0x804F,
    eRGB4_EXT = 0x804F,
    eRGB5 = 0x8050,
    eRGB5_EXT = 0x8050,
    eRGB8 = 0x8051,
    eRGB8_EXT = 0x8051,
    eRGB8_OES = 0x8051,
    eRGB10 = 0x8052,
    eRGB10_EXT = 0x8052,
    eRGB12 = 0x8053,
    eRGB12_EXT = 0x8053,
    eRGB16 = 0x8054,
    eRGB16_EXT = 0x8054,
    eRGBA2 = 0x8055,
    eRGBA2_EXT = 0x8055,
    eRGBA4 = 0x8056,
    eRGBA4_EXT = 0x8056,
    eRGBA4_OES = 0x8056,
    eRGB5_A1 = 0x8057,
    eRGB5_A1_EXT = 0x8057,
    eRGB5_A1_OES = 0x8057,
    eRGBA8 = 0x8058,
    eRGBA8_EXT = 0x8058,
    eRGBA8_OES = 0x8058,
    eRGB10_A2 = 0x8059,
    eRGB10_A2_EXT = 0x8059,
    eRGBA12 = 0x805A,
    eRGBA12_EXT = 0x805A,
    eRGBA16 = 0x805B,
    eRGBA16_EXT = 0x805B,
    eDEPTH_COMPONENT16 = 0x81A5,
    eDEPTH_COMPONENT16_ARB = 0x81A5,
    eDEPTH_COMPONENT16_OES = 0x81A5,
    eDEPTH_COMPONENT16_SGIX = 0x81A5,
    eDEPTH_COMPONENT24 = 0x81A6,
    eDEPTH_COMPONENT24_ARB = 0x81A6,
    eDEPTH_COMPONENT24_OES = 0x81A6,
    eDEPTH_COMPONENT24_SGIX = 0x81A6,
    eDEPTH_COMPONENT32 = 0x81A7,
    eDEPTH_COMPONENT32_ARB = 0x81A7,
    eDEPTH_COMPONENT32_OES = 0x81A7,
    eDEPTH_COMPONENT32_SGIX = 0x81A7,
    eR8 = 0x8229,
    eR8_EXT = 0x8229,
    eR16 = 0x822A,
    eR16_EXT = 0x822A,
    eRG8 = 0x822B,
    eRG8_EXT = 0x822B,
    eRG16 = 0x822C,
    eRG16_EXT = 0x822C,
    eR16F = 0x822D,
    eR16F_EXT = 0x822D,
    eR32F = 0x822E,
    eR32F_EXT = 0x822E,
    eRG16F = 0x822F,
    eRG16F_EXT = 0x822F,
    eRG32F = 0x8230,
    eRG32F_EXT = 0x8230,
    eR8I = 0x8231,
    eR8UI = 0x8232,
    eR16I = 0x8233,
    eR16UI = 0x8234,
    eR32I = 0x8235,
    eR32UI = 0x8236,
    eRG8I = 0x8237,
    eRG8UI = 0x8238,
    eRG16I = 0x8239,
    eRG16UI = 0x823A,
    eRG32I = 0x823B,
    eRG32UI = 0x823C,
    eCOMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
    eCOMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
    eCOMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2,
    eCOMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
    eCOMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3,
    eCOMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,
    eRGBA32F = 0x8814,
    eRGBA32F_ARB = 0x8814,
    eRGBA32F_EXT = 0x8814,
    eRGB32F = 0x8815,
    eRGB32F_ARB = 0x8815,
    eRGB32F_EXT = 0x8815,
    eRGBA16F = 0x881A,
    eRGBA16F_ARB = 0x881A,
    eRGBA16F_EXT = 0x881A,
    eRGB16F = 0x881B,
    eRGB16F_ARB = 0x881B,
    eRGB16F_EXT = 0x881B,
    eDEPTH24_STENCIL8 = 0x88F0,
    eDEPTH24_STENCIL8_EXT = 0x88F0,
    eDEPTH24_STENCIL8_OES = 0x88F0,
    eR11F_G11F_B10F = 0x8C3A,
    eR11F_G11F_B10F_APPLE = 0x8C3A,
    eR11F_G11F_B10F_EXT = 0x8C3A,
    eRGB9_E5 = 0x8C3D,
    eRGB9_E5_APPLE = 0x8C3D,
    eRGB9_E5_EXT = 0x8C3D,
    eSRGB8 = 0x8C41,
    eSRGB8_EXT = 0x8C41,
    eSRGB8_NV = 0x8C41,
    eSRGB8_ALPHA8 = 0x8C43,
    eSRGB8_ALPHA8_EXT = 0x8C43,
    eCOMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,
    eCOMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F,
    eDEPTH_COMPONENT32F = 0x8CAC,
    eDEPTH32F_STENCIL8 = 0x8CAD,
    eSTENCIL_INDEX1 = 0x8D46,
    eSTENCIL_INDEX1_EXT = 0x8D46,
    eSTENCIL_INDEX1_OES = 0x8D46,
    eSTENCIL_INDEX4 = 0x8D47,
    eSTENCIL_INDEX4_EXT = 0x8D47,
    eSTENCIL_INDEX4_OES = 0x8D47,
    eSTENCIL_INDEX8 = 0x8D48,
    eSTENCIL_INDEX8_EXT = 0x8D48,
    eSTENCIL_INDEX8_OES = 0x8D48,
    eSTENCIL_INDEX16 = 0x8D49,
    eSTENCIL_INDEX16_EXT = 0x8D49,
    eRGB565_OES = 0x8D62,
    eRGB565 = 0x8D62,
    eETC1_RGB8_OES = 0x8D64,
    eRGBA32UI = 0x8D70,
    eRGBA32UI_EXT = 0x8D70,
    eRGB32UI = 0x8D71,
    eRGB32UI_EXT = 0x8D71,
    eALPHA32UI_EXT = 0x8D72,
    eINTENSITY32UI_EXT = 0x8D73,
    eLUMINANCE32UI_EXT = 0x8D74,
    eLUMINANCE_ALPHA32UI_EXT = 0x8D75,
    eRGBA16UI = 0x8D76,
    eRGBA16UI_EXT = 0x8D76,
    eRGB16UI = 0x8D77,
    eRGB16UI_EXT = 0x8D77,
    eALPHA16UI_EXT = 0x8D78,
    eINTENSITY16UI_EXT = 0x8D79,
    eLUMINANCE16UI_EXT = 0x8D7A,
    eLUMINANCE_ALPHA16UI_EXT = 0x8D7B,
    eRGBA8UI = 0x8D7C,
    eRGBA8UI_EXT = 0x8D7C,
    eRGB8UI = 0x8D7D,
    eRGB8UI_EXT = 0x8D7D,
    eALPHA8UI_EXT = 0x8D7E,
    eINTENSITY8UI_EXT = 0x8D7F,
    eLUMINANCE8UI_EXT = 0x8D80,
    eLUMINANCE_ALPHA8UI_EXT = 0x8D81,
    eRGBA32I = 0x8D82,
    eRGBA32I_EXT = 0x8D82,
    eRGB32I = 0x8D83,
    eRGB32I_EXT = 0x8D83,
    eALPHA32I_EXT = 0x8D84,
    eINTENSITY32I_EXT = 0x8D85,
    eLUMINANCE32I_EXT = 0x8D86,
    eLUMINANCE_ALPHA32I_EXT = 0x8D87,
    eRGBA16I = 0x8D88,
    eRGBA16I_EXT = 0x8D88,
    eRGB16I = 0x8D89,
    eRGB16I_EXT = 0x8D89,
    eALPHA16I_EXT = 0x8D8A,
    eINTENSITY16I_EXT = 0x8D8B,
    eLUMINANCE16I_EXT = 0x8D8C,
    eLUMINANCE_ALPHA16I_EXT = 0x8D8D,
    eRGBA8I = 0x8D8E,
    eRGBA8I_EXT = 0x8D8E,
    eRGB8I = 0x8D8F,
    eRGB8I_EXT = 0x8D8F,
    eALPHA8I_EXT = 0x8D90,
    eINTENSITY8I_EXT = 0x8D91,
    eLUMINANCE8I_EXT = 0x8D92,
    eLUMINANCE_ALPHA8I_EXT = 0x8D93,
    eDEPTH_COMPONENT32F_NV = 0x8DAB,
    eDEPTH32F_STENCIL8_NV = 0x8DAC,
    eCOMPRESSED_RED_RGTC1 = 0x8DBB,
    eCOMPRESSED_RED_RGTC1_EXT = 0x8DBB,
    eCOMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC,
    eCOMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC,
    eCOMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD,
    eCOMPRESSED_RG_RGTC2 = 0x8DBD,
    eCOMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE,
    eCOMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE,
    eCOMPRESSED_RGBA_BPTC_UNORM = 0x8E8C,
    eCOMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C,
    eCOMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F,
    eR8_SNORM = 0x8F94,
    eRG8_SNORM = 0x8F95,
    eRGB8_SNORM = 0x8F96,
    eRGBA8_SNORM = 0x8F97,
    eR16_SNORM = 0x8F98,
    eR16_SNORM_EXT = 0x8F98,
    eRG16_SNORM = 0x8F99,
    eRG16_SNORM_EXT = 0x8F99,
    eRGB16_SNORM = 0x8F9A,
    eRGB16_SNORM_EXT = 0x8F9A,
    eRGBA16_SNORM = 0x8F9B,
    eRGBA16_SNORM_EXT = 0x8F9B,
    eRGB10_A2UI = 0x906F,
    eCOMPRESSED_R11_EAC = 0x9270,
    eCOMPRESSED_R11_EAC_OES = 0x9270,
    eCOMPRESSED_SIGNED_R11_EAC = 0x9271,
    eCOMPRESSED_SIGNED_R11_EAC_OES = 0x9271,
    eCOMPRESSED_RG11_EAC = 0x9272,
    eCOMPRESSED_RG11_EAC_OES = 0x9272,
    eCOMPRESSED_SIGNED_RG11_EAC = 0x9273,
    eCOMPRESSED_SIGNED_RG11_EAC_OES = 0x9273,
    eCOMPRESSED_RGB8_ETC2 = 0x9274,
    eCOMPRESSED_RGB8_ETC2_OES = 0x9274,
    eCOMPRESSED_SRGB8_ETC2 = 0x9275,
    eCOMPRESSED_SRGB8_ETC2_OES = 0x9275,
    eCOMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
    eCOMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276,
    eCOMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
    eCOMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277,
    eCOMPRESSED_RGBA8_ETC2_EAC = 0x9278,
    eCOMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278,
    eCOMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
    eCOMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279,
    eCOMPRESSED_RGBA_ASTC_4x4 = 0x93B0,
    eCOMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,
    eCOMPRESSED_RGBA_ASTC_5x4 = 0x93B1,
    eCOMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,
    eCOMPRESSED_RGBA_ASTC_5x5 = 0x93B2,
    eCOMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,
    eCOMPRESSED_RGBA_ASTC_6x5 = 0x93B3,
    eCOMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,
    eCOMPRESSED_RGBA_ASTC_6x6 = 0x93B4,
    eCOMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,
    eCOMPRESSED_RGBA_ASTC_8x5 = 0x93B5,
    eCOMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,
    eCOMPRESSED_RGBA_ASTC_8x6 = 0x93B6,
    eCOMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,
    eCOMPRESSED_RGBA_ASTC_8x8 = 0x93B7,
    eCOMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,
    eCOMPRESSED_RGBA_ASTC_10x5 = 0x93B8,
    eCOMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,
    eCOMPRESSED_RGBA_ASTC_10x6 = 0x93B9,
    eCOMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,
    eCOMPRESSED_RGBA_ASTC_10x8 = 0x93BA,
    eCOMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,
    eCOMPRESSED_RGBA_ASTC_10x10 = 0x93BB,
    eCOMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,
    eCOMPRESSED_RGBA_ASTC_12x10 = 0x93BC,
    eCOMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,
    eCOMPRESSED_RGBA_ASTC_12x12 = 0x93BD,
    eCOMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,
    eCOMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0,
    eCOMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1,
    eCOMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2,
    eCOMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3,
    eCOMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4,
    eCOMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5,
    eCOMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6,
    eCOMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7,
    eCOMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8,
    eCOMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9
};
enum class EnableCap : GLenum {
    ePOINT_SMOOTH = 0x0B10,
    eLINE_SMOOTH = 0x0B20,
    eLINE_STIPPLE = 0x0B24,
    ePOLYGON_SMOOTH = 0x0B41,
    ePOLYGON_STIPPLE = 0x0B42,
    eCULL_FACE = 0x0B44,
    eLIGHTING = 0x0B50,
    eCOLOR_MATERIAL = 0x0B57,
    eFOG = 0x0B60,
    eDEPTH_TEST = 0x0B71,
    eSTENCIL_TEST = 0x0B90,
    eNORMALIZE = 0x0BA1,
    eALPHA_TEST = 0x0BC0,
    eDITHER = 0x0BD0,
    eBLEND = 0x0BE2,
    eINDEX_LOGIC_OP = 0x0BF1,
    eCOLOR_LOGIC_OP = 0x0BF2,
    eSCISSOR_TEST = 0x0C11,
    eTEXTURE_GEN_S = 0x0C60,
    eTEXTURE_GEN_T = 0x0C61,
    eTEXTURE_GEN_R = 0x0C62,
    eTEXTURE_GEN_Q = 0x0C63,
    eAUTO_NORMAL = 0x0D80,
    eMAP1_COLOR_4 = 0x0D90,
    eMAP1_INDEX = 0x0D91,
    eMAP1_NORMAL = 0x0D92,
    eMAP1_TEXTURE_COORD_1 = 0x0D93,
    eMAP1_TEXTURE_COORD_2 = 0x0D94,
    eMAP1_TEXTURE_COORD_3 = 0x0D95,
    eMAP1_TEXTURE_COORD_4 = 0x0D96,
    eMAP1_VERTEX_3 = 0x0D97,
    eMAP1_VERTEX_4 = 0x0D98,
    eMAP2_COLOR_4 = 0x0DB0,
    eMAP2_INDEX = 0x0DB1,
    eMAP2_NORMAL = 0x0DB2,
    eMAP2_TEXTURE_COORD_1 = 0x0DB3,
    eMAP2_TEXTURE_COORD_2 = 0x0DB4,
    eMAP2_TEXTURE_COORD_3 = 0x0DB5,
    eMAP2_TEXTURE_COORD_4 = 0x0DB6,
    eMAP2_VERTEX_3 = 0x0DB7,
    eMAP2_VERTEX_4 = 0x0DB8,
    eTEXTURE_1D = 0x0DE0,
    eTEXTURE_2D = 0x0DE1,
    ePOLYGON_OFFSET_POINT = 0x2A01,
    ePOLYGON_OFFSET_LINE = 0x2A02,
    eCLIP_PLANE0 = 0x3000,
    eCLIP_DISTANCE0 = 0x3000,
    eCLIP_PLANE1 = 0x3001,
    eCLIP_DISTANCE1 = 0x3001,
    eCLIP_PLANE2 = 0x3002,
    eCLIP_DISTANCE2 = 0x3002,
    eCLIP_PLANE3 = 0x3003,
    eCLIP_DISTANCE3 = 0x3003,
    eCLIP_PLANE4 = 0x3004,
    eCLIP_DISTANCE4 = 0x3004,
    eCLIP_PLANE5 = 0x3005,
    eCLIP_DISTANCE5 = 0x3005,
    eCLIP_DISTANCE6 = 0x3006,
    eCLIP_DISTANCE7 = 0x3007,
    eLIGHT0 = 0x4000,
    eLIGHT1 = 0x4001,
    eLIGHT2 = 0x4002,
    eLIGHT3 = 0x4003,
    eLIGHT4 = 0x4004,
    eLIGHT5 = 0x4005,
    eLIGHT6 = 0x4006,
    eLIGHT7 = 0x4007,
    eCONVOLUTION_1D_EXT = 0x8010,
    eCONVOLUTION_2D_EXT = 0x8011,
    eSEPARABLE_2D_EXT = 0x8012,
    eHISTOGRAM_EXT = 0x8024,
    eMINMAX_EXT = 0x802E,
    ePOLYGON_OFFSET_FILL = 0x8037,
    eRESCALE_NORMAL_EXT = 0x803A,
    eTEXTURE_3D_EXT = 0x806F,
    eVERTEX_ARRAY = 0x8074,
    eNORMAL_ARRAY = 0x8075,
    eCOLOR_ARRAY = 0x8076,
    eINDEX_ARRAY = 0x8077,
    eTEXTURE_COORD_ARRAY = 0x8078,
    eEDGE_FLAG_ARRAY = 0x8079,
    eINTERLACE_SGIX = 0x8094,
    eMULTISAMPLE = 0x809D,
    eMULTISAMPLE_SGIS = 0x809D,
    eSAMPLE_ALPHA_TO_COVERAGE = 0x809E,
    eSAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
    eSAMPLE_ALPHA_TO_ONE = 0x809F,
    eSAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
    eSAMPLE_COVERAGE = 0x80A0,
    eSAMPLE_MASK_SGIS = 0x80A0,
    eTEXTURE_COLOR_TABLE_SGI = 0x80BC,
    eCOLOR_TABLE = 0x80D0,
    eCOLOR_TABLE_SGI = 0x80D0,
    ePOST_CONVOLUTION_COLOR_TABLE = 0x80D1,
    ePOST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
    ePOST_COLOR_MATRIX_COLOR_TABLE = 0x80D2,
    ePOST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
    eTEXTURE_4D_SGIS = 0x8134,
    ePIXEL_TEX_GEN_SGIX = 0x8139,
    eSPRITE_SGIX = 0x8148,
    eREFERENCE_PLANE_SGIX = 0x817D,
    eIR_INSTRUMENT1_SGIX = 0x817F,
    eCALLIGRAPHIC_FRAGMENT_SGIX = 0x8183,
    eFRAMEZOOM_SGIX = 0x818B,
    eFOG_OFFSET_SGIX = 0x8198,
    eSHARED_TEXTURE_PALETTE_EXT = 0x81FB,
    eDEBUG_OUTPUT_SYNCHRONOUS = 0x8242,
    eASYNC_HISTOGRAM_SGIX = 0x832C,
    ePIXEL_TEXTURE_SGIS = 0x8353,
    eASYNC_TEX_IMAGE_SGIX = 0x835C,
    eASYNC_DRAW_PIXELS_SGIX = 0x835D,
    eASYNC_READ_PIXELS_SGIX = 0x835E,
    eFRAGMENT_LIGHTING_SGIX = 0x8400,
    eFRAGMENT_COLOR_MATERIAL_SGIX = 0x8401,
    eFRAGMENT_LIGHT0_SGIX = 0x840C,
    eFRAGMENT_LIGHT1_SGIX = 0x840D,
    eFRAGMENT_LIGHT2_SGIX = 0x840E,
    eFRAGMENT_LIGHT3_SGIX = 0x840F,
    eFRAGMENT_LIGHT4_SGIX = 0x8410,
    eFRAGMENT_LIGHT5_SGIX = 0x8411,
    eFRAGMENT_LIGHT6_SGIX = 0x8412,
    eFRAGMENT_LIGHT7_SGIX = 0x8413,
    eTEXTURE_RECTANGLE = 0x84F5,
    eTEXTURE_RECTANGLE_ARB = 0x84F5,
    eTEXTURE_RECTANGLE_NV = 0x84F5,
    eTEXTURE_CUBE_MAP = 0x8513,
    eTEXTURE_CUBE_MAP_ARB = 0x8513,
    eTEXTURE_CUBE_MAP_EXT = 0x8513,
    eTEXTURE_CUBE_MAP_OES = 0x8513,
    ePROGRAM_POINT_SIZE = 0x8642,
    eDEPTH_CLAMP = 0x864F,
    eTEXTURE_CUBE_MAP_SEAMLESS = 0x884F,
    eSAMPLE_SHADING = 0x8C36,
    eRASTERIZER_DISCARD = 0x8C89,
    eTEXTURE_GEN_STR_OES = 0x8D60,
    ePRIMITIVE_RESTART_FIXED_INDEX = 0x8D69,
    eFRAMEBUFFER_SRGB = 0x8DB9,
    eSAMPLE_MASK = 0x8E51,
    eFETCH_PER_SAMPLE_ARM = 0x8F65,
    ePRIMITIVE_RESTART = 0x8F9D,
    eDEBUG_OUTPUT = 0x92E0,
    eSHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1,
    eFRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2,
    eSHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 0x96A5
};
enum class UniformType : GLenum {
    eINT = 0x1404,
    eUNSIGNED_INT = 0x1405,
    eFLOAT = 0x1406,
    eDOUBLE = 0x140A,
    eFLOAT_VEC2 = 0x8B50,
    eFLOAT_VEC3 = 0x8B51,
    eFLOAT_VEC4 = 0x8B52,
    eINT_VEC2 = 0x8B53,
    eINT_VEC3 = 0x8B54,
    eINT_VEC4 = 0x8B55,
    eBOOL = 0x8B56,
    eBOOL_VEC2 = 0x8B57,
    eBOOL_VEC3 = 0x8B58,
    eBOOL_VEC4 = 0x8B59,
    eFLOAT_MAT2 = 0x8B5A,
    eFLOAT_MAT3 = 0x8B5B,
    eFLOAT_MAT4 = 0x8B5C,
    eSAMPLER_1D = 0x8B5D,
    eSAMPLER_2D = 0x8B5E,
    eSAMPLER_3D = 0x8B5F,
    eSAMPLER_CUBE = 0x8B60,
    eSAMPLER_1D_SHADOW = 0x8B61,
    eSAMPLER_2D_SHADOW = 0x8B62,
    eSAMPLER_2D_RECT = 0x8B63,
    eSAMPLER_2D_RECT_SHADOW = 0x8B64,
    eFLOAT_MAT2x3 = 0x8B65,
    eFLOAT_MAT2x4 = 0x8B66,
    eFLOAT_MAT3x2 = 0x8B67,
    eFLOAT_MAT3x4 = 0x8B68,
    eFLOAT_MAT4x2 = 0x8B69,
    eFLOAT_MAT4x3 = 0x8B6A,
    eSAMPLER_1D_ARRAY = 0x8DC0,
    eSAMPLER_2D_ARRAY = 0x8DC1,
    eSAMPLER_BUFFER = 0x8DC2,
    eSAMPLER_1D_ARRAY_SHADOW = 0x8DC3,
    eSAMPLER_2D_ARRAY_SHADOW = 0x8DC4,
    eSAMPLER_CUBE_SHADOW = 0x8DC5,
    eUNSIGNED_INT_VEC2 = 0x8DC6,
    eUNSIGNED_INT_VEC3 = 0x8DC7,
    eUNSIGNED_INT_VEC4 = 0x8DC8,
    eINT_SAMPLER_1D = 0x8DC9,
    eINT_SAMPLER_2D = 0x8DCA,
    eINT_SAMPLER_3D = 0x8DCB,
    eINT_SAMPLER_CUBE = 0x8DCC,
    eINT_SAMPLER_2D_RECT = 0x8DCD,
    eINT_SAMPLER_1D_ARRAY = 0x8DCE,
    eINT_SAMPLER_2D_ARRAY = 0x8DCF,
    eINT_SAMPLER_BUFFER = 0x8DD0,
    eUNSIGNED_INT_SAMPLER_1D = 0x8DD1,
    eUNSIGNED_INT_SAMPLER_2D = 0x8DD2,
    eUNSIGNED_INT_SAMPLER_3D = 0x8DD3,
    eUNSIGNED_INT_SAMPLER_CUBE = 0x8DD4,
    eUNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5,
    eUNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6,
    eUNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,
    eUNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8,
    eDOUBLE_MAT2 = 0x8F46,
    eDOUBLE_MAT3 = 0x8F47,
    eDOUBLE_MAT4 = 0x8F48,
    eDOUBLE_MAT2x3 = 0x8F49,
    eDOUBLE_MAT2x4 = 0x8F4A,
    eDOUBLE_MAT3x2 = 0x8F4B,
    eDOUBLE_MAT3x4 = 0x8F4C,
    eDOUBLE_MAT4x2 = 0x8F4D,
    eDOUBLE_MAT4x3 = 0x8F4E,
    eDOUBLE_VEC2 = 0x8FFC,
    eDOUBLE_VEC3 = 0x8FFD,
    eDOUBLE_VEC4 = 0x8FFE,
    eSAMPLER_CUBE_MAP_ARRAY = 0x900C,
    eSAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D,
    eINT_SAMPLER_CUBE_MAP_ARRAY = 0x900E,
    eUNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
    eSAMPLER_2D_MULTISAMPLE = 0x9108,
    eINT_SAMPLER_2D_MULTISAMPLE = 0x9109,
    eUNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
    eSAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B,
    eINT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
    eUNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D
};
enum class BufferAccessARB : GLenum {
    eREAD_ONLY = 0x88B8,
    eWRITE_ONLY = 0x88B9,
    eREAD_WRITE = 0x88BA
};
enum class FramebufferAttachment : GLenum {
    eDEPTH_STENCIL_ATTACHMENT = 0x821A,
    eCOLOR_ATTACHMENT0 = 0x8CE0,
    eCOLOR_ATTACHMENT1 = 0x8CE1,
    eCOLOR_ATTACHMENT2 = 0x8CE2,
    eCOLOR_ATTACHMENT3 = 0x8CE3,
    eCOLOR_ATTACHMENT4 = 0x8CE4,
    eCOLOR_ATTACHMENT5 = 0x8CE5,
    eCOLOR_ATTACHMENT6 = 0x8CE6,
    eCOLOR_ATTACHMENT7 = 0x8CE7,
    eCOLOR_ATTACHMENT8 = 0x8CE8,
    eCOLOR_ATTACHMENT9 = 0x8CE9,
    eCOLOR_ATTACHMENT10 = 0x8CEA,
    eCOLOR_ATTACHMENT11 = 0x8CEB,
    eCOLOR_ATTACHMENT12 = 0x8CEC,
    eCOLOR_ATTACHMENT13 = 0x8CED,
    eCOLOR_ATTACHMENT14 = 0x8CEE,
    eCOLOR_ATTACHMENT15 = 0x8CEF,
    eCOLOR_ATTACHMENT16 = 0x8CF0,
    eCOLOR_ATTACHMENT17 = 0x8CF1,
    eCOLOR_ATTACHMENT18 = 0x8CF2,
    eCOLOR_ATTACHMENT19 = 0x8CF3,
    eCOLOR_ATTACHMENT20 = 0x8CF4,
    eCOLOR_ATTACHMENT21 = 0x8CF5,
    eCOLOR_ATTACHMENT22 = 0x8CF6,
    eCOLOR_ATTACHMENT23 = 0x8CF7,
    eCOLOR_ATTACHMENT24 = 0x8CF8,
    eCOLOR_ATTACHMENT25 = 0x8CF9,
    eCOLOR_ATTACHMENT26 = 0x8CFA,
    eCOLOR_ATTACHMENT27 = 0x8CFB,
    eCOLOR_ATTACHMENT28 = 0x8CFC,
    eCOLOR_ATTACHMENT29 = 0x8CFD,
    eCOLOR_ATTACHMENT30 = 0x8CFE,
    eCOLOR_ATTACHMENT31 = 0x8CFF,
    eDEPTH_ATTACHMENT = 0x8D00,
    eSTENCIL_ATTACHMENT = 0x8D20,
    eSHADING_RATE_ATTACHMENT_EXT = 0x96D1
};
inline void cullFace(TriangleFace mode) {
    return glCullFace(static_cast<GLenum>(mode));
}
inline void frontFace(FrontFaceDirection mode) {
    return glFrontFace(static_cast<GLenum>(mode));
}
inline void hint(HintTarget target, HintMode mode) {
    return glHint(static_cast<GLenum>(target), static_cast<GLenum>(mode));
}
inline void lineWidth(GLfloat width) {
    return glLineWidth(static_cast<GLfloat>(width));
}
inline void pointSize(GLfloat size) {
    return glPointSize(static_cast<GLfloat>(size));
}
inline void polygonMode(TriangleFace face, PolygonMode mode) {
    return glPolygonMode(static_cast<GLenum>(face), static_cast<GLenum>(mode));
}
inline void scissor(GLint x, GLint y, GLsizei width, GLsizei height) {
    return glScissor(static_cast<GLint>(x), static_cast<GLint>(y), width, height);
}
inline void texParameterf(TextureTarget target, TextureParameterName pname, GLfloat param) {
    return glTexParameterf(static_cast<GLenum>(target), static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void texParameterfv(TextureTarget target, TextureParameterName pname, const GLfloat * params) {
    return glTexParameterfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void texParameteri(TextureTarget target, TextureParameterName pname, GLint param) {
    return glTexParameteri(static_cast<GLenum>(target), static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void texParameteriv(TextureTarget target, TextureParameterName pname, const GLint * params) {
    return glTexParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void texImage1D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLint border, PixelFormat format, PixelType type, const void * pixels) {
    return glTexImage1D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(internalformat), width, static_cast<GLint>(border), static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void texImage2D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLsizei height, GLint border, PixelFormat format, PixelType type, const void * pixels) {
    return glTexImage2D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(internalformat), width, height, static_cast<GLint>(border), static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void drawBuffer(DrawBufferMode buf) {
    return glDrawBuffer(static_cast<GLenum>(buf));
}
inline void clear(ClearBufferMask mask) {
    return glClear(static_cast<GLbitfield>(mask));
}
inline void clearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    return glClearColor(static_cast<GLfloat>(red), static_cast<GLfloat>(green), static_cast<GLfloat>(blue), static_cast<GLfloat>(alpha));
}
inline void clearStencil(GLint s) {
    return glClearStencil(static_cast<GLint>(s));
}
inline void clearDepth(GLdouble depth) {
    return glClearDepth(depth);
}
inline void stencilMask(GLuint mask) {
    return glStencilMask(static_cast<GLuint>(mask));
}
inline void colorMask(Boolean red, Boolean green, Boolean blue, Boolean alpha) {
    return glColorMask(static_cast<GLboolean>(red), static_cast<GLboolean>(green), static_cast<GLboolean>(blue), static_cast<GLboolean>(alpha));
}
inline void depthMask(Boolean flag) {
    return glDepthMask(static_cast<GLboolean>(flag));
}
inline void disable(EnableCap cap) {
    return glDisable(static_cast<GLenum>(cap));
}
inline void enable(EnableCap cap) {
    return glEnable(static_cast<GLenum>(cap));
}
inline void finish() {
    return glFinish();
}
inline void flush() {
    return glFlush();
}
inline void blendFunc(BlendingFactor sfactor, BlendingFactor dfactor) {
    return glBlendFunc(static_cast<GLenum>(sfactor), static_cast<GLenum>(dfactor));
}
inline void logicOp(LogicOp opcode) {
    return glLogicOp(static_cast<GLenum>(opcode));
}
inline void stencilFunc(StencilFunction func, GLint ref, GLuint mask) {
    return glStencilFunc(static_cast<GLenum>(func), static_cast<GLint>(ref), static_cast<GLuint>(mask));
}
inline void stencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass) {
    return glStencilOp(static_cast<GLenum>(fail), static_cast<GLenum>(zfail), static_cast<GLenum>(zpass));
}
inline void depthFunc(DepthFunction func) {
    return glDepthFunc(static_cast<GLenum>(func));
}
inline void pixelStoref(PixelStoreParameter pname, GLfloat param) {
    return glPixelStoref(static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void pixelStorei(PixelStoreParameter pname, GLint param) {
    return glPixelStorei(static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void readBuffer(ReadBufferMode src) {
    return glReadBuffer(static_cast<GLenum>(src));
}
inline void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, PixelFormat format, PixelType type, void * pixels) {
    return glReadPixels(static_cast<GLint>(x), static_cast<GLint>(y), width, height, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void getBooleanv(GetPName pname, Boolean * data) {
    return glGetBooleanv(static_cast<GLenum>(pname), reinterpret_cast<GLboolean *>(data));
}
inline void getDoublev(GetPName pname, GLdouble * data) {
    return glGetDoublev(static_cast<GLenum>(pname), data);
}
inline GLenum  getError() {
    return glGetError();
}
inline void getFloatv(GetPName pname, GLfloat * data) {
    return glGetFloatv(static_cast<GLenum>(pname), data);
}
inline void getIntegerv(GetPName pname, GLint * data) {
    return glGetIntegerv(static_cast<GLenum>(pname), data);
}
inline const GLubyte * getString(StringName name) {
    return glGetString(static_cast<GLenum>(name));
}
inline void getTexImage(TextureTarget target, GLint level, PixelFormat format, PixelType type, void * pixels) {
    return glGetTexImage(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void getTexParameterfv(TextureTarget target, GetTextureParameter pname, GLfloat * params) {
    return glGetTexParameterfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void getTexParameteriv(TextureTarget target, GetTextureParameter pname, GLint * params) {
    return glGetTexParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void getTexLevelParameterfv(TextureTarget target, GLint level, GetTextureParameter pname, GLfloat * params) {
    return glGetTexLevelParameterfv(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(pname), params);
}
inline void getTexLevelParameteriv(TextureTarget target, GLint level, GetTextureParameter pname, GLint * params) {
    return glGetTexLevelParameteriv(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(pname), params);
}
inline GLboolean  isEnabled(EnableCap cap) {
    return glIsEnabled(static_cast<GLenum>(cap));
}
inline void depthRange(GLdouble n, GLdouble f) {
    return glDepthRange(n, f);
}
inline void viewport(GLint x, GLint y, GLsizei width, GLsizei height) {
    return glViewport(static_cast<GLint>(x), static_cast<GLint>(y), width, height);
}
inline void drawArrays(PrimitiveType mode, GLint first, GLsizei count) {
    return glDrawArrays(static_cast<GLenum>(mode), first, count);
}
inline void drawElements(PrimitiveType mode, GLsizei count, DrawElementsType type, const void * indices) {
    return glDrawElements(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices);
}
inline void polygonOffset(GLfloat factor, GLfloat units) {
    return glPolygonOffset(factor, units);
}
inline void copyTexImage1D(TextureTarget target, GLint level, InternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    return glCopyTexImage1D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(internalformat), static_cast<GLint>(x), static_cast<GLint>(y), width, static_cast<GLint>(border));
}
inline void copyTexImage2D(TextureTarget target, GLint level, InternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    return glCopyTexImage2D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(internalformat), static_cast<GLint>(x), static_cast<GLint>(y), width, height, static_cast<GLint>(border));
}
inline void copyTexSubImage1D(TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    return glCopyTexSubImage1D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), static_cast<GLint>(x), static_cast<GLint>(y), width);
}
inline void copyTexSubImage2D(TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    return glCopyTexSubImage2D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), static_cast<GLint>(yoffset), static_cast<GLint>(x), static_cast<GLint>(y), width, height);
}
inline void texSubImage1D(TextureTarget target, GLint level, GLint xoffset, GLsizei width, PixelFormat format, PixelType type, const void * pixels) {
    return glTexSubImage1D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), width, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void texSubImage2D(TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, PixelFormat format, PixelType type, const void * pixels) {
    return glTexSubImage2D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), static_cast<GLint>(yoffset), width, height, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void bindTexture(TextureTarget target, GLuint texture) {
    return glBindTexture(static_cast<GLenum>(target), static_cast<GLuint>(texture));
}
inline void deleteTextures(GLsizei n, const GLuint * textures) {
    return glDeleteTextures(n, textures);
}
inline void genTextures(GLsizei n, GLuint * textures) {
    return glGenTextures(n, textures);
}
inline GLboolean  isTexture(GLuint texture) {
    return glIsTexture(static_cast<GLuint>(texture));
}
inline void drawRangeElements(PrimitiveType mode, GLuint start, GLuint end, GLsizei count, DrawElementsType type, const void * indices) {
    return glDrawRangeElements(static_cast<GLenum>(mode), start, end, count, static_cast<GLenum>(type), indices);
}
inline void texImage3D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, PixelFormat format, PixelType type, const void * pixels) {
    return glTexImage3D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(internalformat), width, height, depth, static_cast<GLint>(border), static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void texSubImage3D(TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, PixelFormat format, PixelType type, const void * pixels) {
    return glTexSubImage3D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), static_cast<GLint>(yoffset), static_cast<GLint>(zoffset), width, height, depth, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void copyTexSubImage3D(TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    return glCopyTexSubImage3D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), static_cast<GLint>(yoffset), static_cast<GLint>(zoffset), static_cast<GLint>(x), static_cast<GLint>(y), width, height);
}
inline void activeTexture(TextureUnit texture) {
    return glActiveTexture(static_cast<GLenum>(texture));
}
inline void sampleCoverage(GLfloat value, Boolean invert) {
    return glSampleCoverage(value, static_cast<GLboolean>(invert));
}
inline void compressedTexImage3D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
    return glCompressedTexImage3D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(internalformat), width, height, depth, static_cast<GLint>(border), imageSize, static_cast<const void *>(data));
}
inline void compressedTexImage2D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
    return glCompressedTexImage2D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(internalformat), width, height, static_cast<GLint>(border), imageSize, static_cast<const void *>(data));
}
inline void compressedTexImage1D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
    return glCompressedTexImage1D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(internalformat), width, static_cast<GLint>(border), imageSize, static_cast<const void *>(data));
}
inline void compressedTexSubImage3D(TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, InternalFormat format, GLsizei imageSize, const void * data) {
    return glCompressedTexSubImage3D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), static_cast<GLint>(yoffset), static_cast<GLint>(zoffset), width, height, depth, static_cast<GLenum>(format), imageSize, static_cast<const void *>(data));
}
inline void compressedTexSubImage2D(TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, InternalFormat format, GLsizei imageSize, const void * data) {
    return glCompressedTexSubImage2D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), static_cast<GLint>(yoffset), width, height, static_cast<GLenum>(format), imageSize, static_cast<const void *>(data));
}
inline void compressedTexSubImage1D(TextureTarget target, GLint level, GLint xoffset, GLsizei width, InternalFormat format, GLsizei imageSize, const void * data) {
    return glCompressedTexSubImage1D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(xoffset), width, static_cast<GLenum>(format), imageSize, static_cast<const void *>(data));
}
inline void getCompressedTexImage(TextureTarget target, GLint level, void * img) {
    return glGetCompressedTexImage(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<void *>(img));
}
inline void blendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) {
    return glBlendFuncSeparate(static_cast<GLenum>(sfactorRGB), static_cast<GLenum>(dfactorRGB), static_cast<GLenum>(sfactorAlpha), static_cast<GLenum>(dfactorAlpha));
}
inline void multiDrawArrays(PrimitiveType mode, const GLint * first, const GLsizei * count, GLsizei drawcount) {
    return glMultiDrawArrays(static_cast<GLenum>(mode), first, count, drawcount);
}
inline void multiDrawElements(PrimitiveType mode, const GLsizei * count, DrawElementsType type, const void *const* indices, GLsizei drawcount) {
    return glMultiDrawElements(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices, drawcount);
}
inline void pointParameterf(PointParameterNameARB pname, GLfloat param) {
    return glPointParameterf(static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void pointParameterfv(PointParameterNameARB pname, const GLfloat * params) {
    return glPointParameterfv(static_cast<GLenum>(pname), params);
}
inline void pointParameteri(PointParameterNameARB pname, GLint param) {
    return glPointParameteri(static_cast<GLenum>(pname), param);
}
inline void pointParameteriv(PointParameterNameARB pname, const GLint * params) {
    return glPointParameteriv(static_cast<GLenum>(pname), params);
}
inline void blendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    return glBlendColor(static_cast<GLfloat>(red), static_cast<GLfloat>(green), static_cast<GLfloat>(blue), static_cast<GLfloat>(alpha));
}
inline void blendEquation(BlendEquationModeEXT mode) {
    return glBlendEquation(static_cast<GLenum>(mode));
}
inline void genQueries(GLsizei n, GLuint * ids) {
    return glGenQueries(n, ids);
}
inline void deleteQueries(GLsizei n, const GLuint * ids) {
    return glDeleteQueries(n, ids);
}
inline GLboolean  isQuery(GLuint id) {
    return glIsQuery(id);
}
inline void beginQuery(QueryTarget target, GLuint id) {
    return glBeginQuery(static_cast<GLenum>(target), id);
}
inline void endQuery(QueryTarget target) {
    return glEndQuery(static_cast<GLenum>(target));
}
inline void getQueryiv(QueryTarget target, QueryParameterName pname, GLint * params) {
    return glGetQueryiv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void getQueryObjectiv(GLuint id, QueryObjectParameterName pname, GLint * params) {
    return glGetQueryObjectiv(id, static_cast<GLenum>(pname), params);
}
inline void getQueryObjectuiv(GLuint id, QueryObjectParameterName pname, GLuint * params) {
    return glGetQueryObjectuiv(id, static_cast<GLenum>(pname), params);
}
inline void bindBuffer(BufferTargetARB target, GLuint buffer) {
    return glBindBuffer(static_cast<GLenum>(target), buffer);
}
inline void deleteBuffers(GLsizei n, const GLuint * buffers) {
    return glDeleteBuffers(n, buffers);
}
inline void genBuffers(GLsizei n, GLuint * buffers) {
    return glGenBuffers(n, buffers);
}
inline GLboolean  isBuffer(GLuint buffer) {
    return glIsBuffer(buffer);
}
inline void bufferData(BufferTargetARB target, GLsizeiptr size, const void * data, BufferUsageARB usage) {
    return glBufferData(static_cast<GLenum>(target), static_cast<GLsizeiptr>(size), data, static_cast<GLenum>(usage));
}
inline void bufferSubData(BufferTargetARB target, GLintptr offset, GLsizeiptr size, const void * data) {
    return glBufferSubData(static_cast<GLenum>(target), static_cast<GLintptr>(offset), static_cast<GLsizeiptr>(size), data);
}
inline void getBufferSubData(BufferTargetARB target, GLintptr offset, GLsizeiptr size, void * data) {
    return glGetBufferSubData(static_cast<GLenum>(target), static_cast<GLintptr>(offset), static_cast<GLsizeiptr>(size), data);
}
inline void * mapBuffer(BufferTargetARB target, BufferAccessARB access) {
    return glMapBuffer(static_cast<GLenum>(target), static_cast<GLenum>(access));
}
inline GLboolean  unmapBuffer(BufferTargetARB target) {
    return glUnmapBuffer(static_cast<GLenum>(target));
}
inline void getBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, GLint * params) {
    return glGetBufferParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void getBufferPointerv(BufferTargetARB target, BufferPointerNameARB pname, void ** params) {
    return glGetBufferPointerv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void blendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) {
    return glBlendEquationSeparate(static_cast<GLenum>(modeRGB), static_cast<GLenum>(modeAlpha));
}
inline void drawBuffers(GLsizei n, const DrawBufferMode * bufs) {
    return glDrawBuffers(n, bufs);
}
inline void stencilOpSeparate(TriangleFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass) {
    return glStencilOpSeparate(static_cast<GLenum>(face), static_cast<GLenum>(sfail), static_cast<GLenum>(dpfail), static_cast<GLenum>(dppass));
}
inline void stencilFuncSeparate(TriangleFace face, StencilFunction func, GLint ref, GLuint mask) {
    return glStencilFuncSeparate(static_cast<GLenum>(face), static_cast<GLenum>(func), static_cast<GLint>(ref), static_cast<GLuint>(mask));
}
inline void stencilMaskSeparate(TriangleFace face, GLuint mask) {
    return glStencilMaskSeparate(static_cast<GLenum>(face), static_cast<GLuint>(mask));
}
inline void attachShader(GLuint program, GLuint shader) {
    return glAttachShader(program, shader);
}
inline void bindAttribLocation(GLuint program, GLuint index, const GLchar * name) {
    return glBindAttribLocation(program, index, name);
}
inline void compileShader(GLuint shader) {
    return glCompileShader(shader);
}
inline GLuint  createProgram() {
    return glCreateProgram();
}
inline GLuint  createShader(ShaderType type) {
    return glCreateShader(static_cast<GLenum>(type));
}
inline void deleteProgram(GLuint program) {
    return glDeleteProgram(program);
}
inline void deleteShader(GLuint shader) {
    return glDeleteShader(shader);
}
inline void detachShader(GLuint program, GLuint shader) {
    return glDetachShader(program, shader);
}
inline void disableVertexAttribArray(GLuint index) {
    return glDisableVertexAttribArray(index);
}
inline void enableVertexAttribArray(GLuint index) {
    return glEnableVertexAttribArray(index);
}
inline void getActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, AttributeType * type, GLchar * name) {
    return glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}
inline void getActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, UniformType * type, GLchar * name) {
    return glGetActiveUniform(program, index, bufSize, length, size, type, name);
}
inline void getAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) {
    return glGetAttachedShaders(program, maxCount, count, shaders);
}
inline GLint  getAttribLocation(GLuint program, const GLchar * name) {
    return glGetAttribLocation(program, name);
}
inline void getProgramiv(GLuint program, ProgramPropertyARB pname, GLint * params) {
    return glGetProgramiv(program, static_cast<GLenum>(pname), params);
}
inline void getProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
    return glGetProgramInfoLog(program, bufSize, length, infoLog);
}
inline void getShaderiv(GLuint shader, ShaderParameterName pname, GLint * params) {
    return glGetShaderiv(shader, static_cast<GLenum>(pname), params);
}
inline void getShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
    return glGetShaderInfoLog(shader, bufSize, length, infoLog);
}
inline void getShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
    return glGetShaderSource(shader, bufSize, length, source);
}
inline GLint  getUniformLocation(GLuint program, const GLchar * name) {
    return glGetUniformLocation(program, name);
}
inline void getUniformfv(GLuint program, GLint location, GLfloat * params) {
    return glGetUniformfv(program, location, params);
}
inline void getUniformiv(GLuint program, GLint location, GLint * params) {
    return glGetUniformiv(program, location, params);
}
inline void getVertexAttribdv(GLuint index, VertexAttribPropertyARB pname, GLdouble * params) {
    return glGetVertexAttribdv(index, static_cast<GLenum>(pname), params);
}
inline void getVertexAttribfv(GLuint index, VertexAttribPropertyARB pname, GLfloat * params) {
    return glGetVertexAttribfv(index, static_cast<GLenum>(pname), params);
}
inline void getVertexAttribiv(GLuint index, VertexAttribPropertyARB pname, GLint * params) {
    return glGetVertexAttribiv(index, static_cast<GLenum>(pname), params);
}
inline void getVertexAttribPointerv(GLuint index, VertexAttribPointerPropertyARB pname, void ** pointer) {
    return glGetVertexAttribPointerv(index, static_cast<GLenum>(pname), pointer);
}
inline GLboolean  isProgram(GLuint program) {
    return glIsProgram(program);
}
inline GLboolean  isShader(GLuint shader) {
    return glIsShader(shader);
}
inline void linkProgram(GLuint program) {
    return glLinkProgram(program);
}
inline void shaderSource(GLuint shader, GLsizei count, const GLchar string, const GLint * length) {
    return glShaderSource(shader, count, string, length);
}
inline void useProgram(GLuint program) {
    return glUseProgram(program);
}
inline void uniform1f(GLint location, GLfloat v0) {
    return glUniform1f(location, v0);
}
inline void uniform2f(GLint location, GLfloat v0, GLfloat v1) {
    return glUniform2f(location, v0, v1);
}
inline void uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    return glUniform3f(location, v0, v1, v2);
}
inline void uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    return glUniform4f(location, v0, v1, v2, v3);
}
inline void uniform1i(GLint location, GLint v0) {
    return glUniform1i(location, v0);
}
inline void uniform2i(GLint location, GLint v0, GLint v1) {
    return glUniform2i(location, v0, v1);
}
inline void uniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
    return glUniform3i(location, v0, v1, v2);
}
inline void uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    return glUniform4i(location, v0, v1, v2, v3);
}
inline void uniform1fv(GLint location, GLsizei count, const GLfloat * value) {
    return glUniform1fv(location, count, value);
}
inline void uniform2fv(GLint location, GLsizei count, const GLfloat * value) {
    return glUniform2fv(location, count, value);
}
inline void uniform3fv(GLint location, GLsizei count, const GLfloat * value) {
    return glUniform3fv(location, count, value);
}
inline void uniform4fv(GLint location, GLsizei count, const GLfloat * value) {
    return glUniform4fv(location, count, value);
}
inline void uniform1iv(GLint location, GLsizei count, const GLint * value) {
    return glUniform1iv(location, count, value);
}
inline void uniform2iv(GLint location, GLsizei count, const GLint * value) {
    return glUniform2iv(location, count, value);
}
inline void uniform3iv(GLint location, GLsizei count, const GLint * value) {
    return glUniform3iv(location, count, value);
}
inline void uniform4iv(GLint location, GLsizei count, const GLint * value) {
    return glUniform4iv(location, count, value);
}
inline void uniformMatrix2fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix2fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void uniformMatrix3fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix3fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void uniformMatrix4fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix4fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void validateProgram(GLuint program) {
    return glValidateProgram(program);
}
inline void vertexAttrib1d(GLuint index, GLdouble x) {
    return glVertexAttrib1d(index, x);
}
inline void vertexAttrib1dv(GLuint index, const GLdouble * v) {
    return glVertexAttrib1dv(index, v);
}
inline void vertexAttrib1f(GLuint index, GLfloat x) {
    return glVertexAttrib1f(index, x);
}
inline void vertexAttrib1fv(GLuint index, const GLfloat * v) {
    return glVertexAttrib1fv(index, v);
}
inline void vertexAttrib1s(GLuint index, GLshort x) {
    return glVertexAttrib1s(index, x);
}
inline void vertexAttrib1sv(GLuint index, const GLshort * v) {
    return glVertexAttrib1sv(index, v);
}
inline void vertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
    return glVertexAttrib2d(index, x, y);
}
inline void vertexAttrib2dv(GLuint index, const GLdouble * v) {
    return glVertexAttrib2dv(index, v);
}
inline void vertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
    return glVertexAttrib2f(index, x, y);
}
inline void vertexAttrib2fv(GLuint index, const GLfloat * v) {
    return glVertexAttrib2fv(index, v);
}
inline void vertexAttrib2s(GLuint index, GLshort x, GLshort y) {
    return glVertexAttrib2s(index, x, y);
}
inline void vertexAttrib2sv(GLuint index, const GLshort * v) {
    return glVertexAttrib2sv(index, v);
}
inline void vertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    return glVertexAttrib3d(index, x, y, z);
}
inline void vertexAttrib3dv(GLuint index, const GLdouble * v) {
    return glVertexAttrib3dv(index, v);
}
inline void vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    return glVertexAttrib3f(index, x, y, z);
}
inline void vertexAttrib3fv(GLuint index, const GLfloat * v) {
    return glVertexAttrib3fv(index, v);
}
inline void vertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
    return glVertexAttrib3s(index, x, y, z);
}
inline void vertexAttrib3sv(GLuint index, const GLshort * v) {
    return glVertexAttrib3sv(index, v);
}
inline void vertexAttrib4Nbv(GLuint index, const GLbyte * v) {
    return glVertexAttrib4Nbv(index, v);
}
inline void vertexAttrib4Niv(GLuint index, const GLint * v) {
    return glVertexAttrib4Niv(index, v);
}
inline void vertexAttrib4Nsv(GLuint index, const GLshort * v) {
    return glVertexAttrib4Nsv(index, v);
}
inline void vertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    return glVertexAttrib4Nub(index, x, y, z, w);
}
inline void vertexAttrib4Nubv(GLuint index, const GLubyte * v) {
    return glVertexAttrib4Nubv(index, v);
}
inline void vertexAttrib4Nuiv(GLuint index, const GLuint * v) {
    return glVertexAttrib4Nuiv(index, v);
}
inline void vertexAttrib4Nusv(GLuint index, const GLushort * v) {
    return glVertexAttrib4Nusv(index, v);
}
inline void vertexAttrib4bv(GLuint index, const GLbyte * v) {
    return glVertexAttrib4bv(index, v);
}
inline void vertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    return glVertexAttrib4d(index, x, y, z, w);
}
inline void vertexAttrib4dv(GLuint index, const GLdouble * v) {
    return glVertexAttrib4dv(index, v);
}
inline void vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    return glVertexAttrib4f(index, x, y, z, w);
}
inline void vertexAttrib4fv(GLuint index, const GLfloat * v) {
    return glVertexAttrib4fv(index, v);
}
inline void vertexAttrib4iv(GLuint index, const GLint * v) {
    return glVertexAttrib4iv(index, v);
}
inline void vertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    return glVertexAttrib4s(index, x, y, z, w);
}
inline void vertexAttrib4sv(GLuint index, const GLshort * v) {
    return glVertexAttrib4sv(index, v);
}
inline void vertexAttrib4ubv(GLuint index, const GLubyte * v) {
    return glVertexAttrib4ubv(index, v);
}
inline void vertexAttrib4uiv(GLuint index, const GLuint * v) {
    return glVertexAttrib4uiv(index, v);
}
inline void vertexAttrib4usv(GLuint index, const GLushort * v) {
    return glVertexAttrib4usv(index, v);
}
inline void vertexAttribPointer(GLuint index, GLint size, VertexAttribPointerType type, Boolean normalized, GLsizei stride, const void * pointer) {
    return glVertexAttribPointer(index, size, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), stride, pointer);
}
inline void uniformMatrix2x3fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix2x3fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void uniformMatrix3x2fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix3x2fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void uniformMatrix2x4fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix2x4fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void uniformMatrix4x2fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix4x2fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void uniformMatrix3x4fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix3x4fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void uniformMatrix4x3fv(GLint location, GLsizei count, Boolean transpose, const GLfloat * value) {
    return glUniformMatrix4x3fv(location, count, static_cast<GLboolean>(transpose), value);
}
inline void colorMaski(GLuint index, Boolean r, Boolean g, Boolean b, Boolean a) {
    return glColorMaski(index, static_cast<GLboolean>(r), static_cast<GLboolean>(g), static_cast<GLboolean>(b), static_cast<GLboolean>(a));
}
inline void getBooleani_v(BufferTargetARB target, GLuint index, Boolean * data) {
    return glGetBooleani_v(static_cast<GLenum>(target), index, reinterpret_cast<GLboolean *>(data));
}
inline void getIntegeri_v(GetPName target, GLuint index, GLint * data) {
    return glGetIntegeri_v(static_cast<GLenum>(target), index, data);
}
inline void enablei(EnableCap target, GLuint index) {
    return glEnablei(static_cast<GLenum>(target), index);
}
inline void disablei(EnableCap target, GLuint index) {
    return glDisablei(static_cast<GLenum>(target), index);
}
inline GLboolean  isEnabledi(EnableCap target, GLuint index) {
    return glIsEnabledi(static_cast<GLenum>(target), index);
}
inline void beginTransformFeedback(PrimitiveType primitiveMode) {
    return glBeginTransformFeedback(static_cast<GLenum>(primitiveMode));
}
inline void endTransformFeedback() {
    return glEndTransformFeedback();
}
inline void bindBufferRange(BufferTargetARB target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    return glBindBufferRange(static_cast<GLenum>(target), index, buffer, static_cast<GLintptr>(offset), static_cast<GLsizeiptr>(size));
}
inline void bindBufferBase(BufferTargetARB target, GLuint index, GLuint buffer) {
    return glBindBufferBase(static_cast<GLenum>(target), index, buffer);
}
inline void transformFeedbackVaryings(GLuint program, GLsizei count, const GLchar varyings, TransformFeedbackBufferMode bufferMode) {
    return glTransformFeedbackVaryings(program, count, varyings, static_cast<GLenum>(bufferMode));
}
inline void getTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, AttributeType * type, GLchar * name) {
    return glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}
inline void clampColor(ClampColorTargetARB target, ClampColorModeARB clamp) {
    return glClampColor(static_cast<GLenum>(target), static_cast<GLenum>(clamp));
}
inline void beginConditionalRender(GLuint id, ConditionalRenderMode mode) {
    return glBeginConditionalRender(id, static_cast<GLenum>(mode));
}
inline void endConditionalRender() {
    return glEndConditionalRender();
}
inline void vertexAttribIPointer(GLuint index, GLint size, VertexAttribIType type, GLsizei stride, const void * pointer) {
    return glVertexAttribIPointer(index, size, static_cast<GLenum>(type), stride, pointer);
}
inline void getVertexAttribIiv(GLuint index, VertexAttribEnum pname, GLint * params) {
    return glGetVertexAttribIiv(index, static_cast<GLenum>(pname), params);
}
inline void getVertexAttribIuiv(GLuint index, VertexAttribEnum pname, GLuint * params) {
    return glGetVertexAttribIuiv(index, static_cast<GLenum>(pname), params);
}
inline void vertexAttribI1i(GLuint index, GLint x) {
    return glVertexAttribI1i(index, x);
}
inline void vertexAttribI2i(GLuint index, GLint x, GLint y) {
    return glVertexAttribI2i(index, x, y);
}
inline void vertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
    return glVertexAttribI3i(index, x, y, z);
}
inline void vertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
    return glVertexAttribI4i(index, x, y, z, w);
}
inline void vertexAttribI1ui(GLuint index, GLuint x) {
    return glVertexAttribI1ui(index, x);
}
inline void vertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
    return glVertexAttribI2ui(index, x, y);
}
inline void vertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
    return glVertexAttribI3ui(index, x, y, z);
}
inline void vertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    return glVertexAttribI4ui(index, x, y, z, w);
}
inline void vertexAttribI1iv(GLuint index, const GLint * v) {
    return glVertexAttribI1iv(index, v);
}
inline void vertexAttribI2iv(GLuint index, const GLint * v) {
    return glVertexAttribI2iv(index, v);
}
inline void vertexAttribI3iv(GLuint index, const GLint * v) {
    return glVertexAttribI3iv(index, v);
}
inline void vertexAttribI4iv(GLuint index, const GLint * v) {
    return glVertexAttribI4iv(index, v);
}
inline void vertexAttribI1uiv(GLuint index, const GLuint * v) {
    return glVertexAttribI1uiv(index, v);
}
inline void vertexAttribI2uiv(GLuint index, const GLuint * v) {
    return glVertexAttribI2uiv(index, v);
}
inline void vertexAttribI3uiv(GLuint index, const GLuint * v) {
    return glVertexAttribI3uiv(index, v);
}
inline void vertexAttribI4uiv(GLuint index, const GLuint * v) {
    return glVertexAttribI4uiv(index, v);
}
inline void vertexAttribI4bv(GLuint index, const GLbyte * v) {
    return glVertexAttribI4bv(index, v);
}
inline void vertexAttribI4sv(GLuint index, const GLshort * v) {
    return glVertexAttribI4sv(index, v);
}
inline void vertexAttribI4ubv(GLuint index, const GLubyte * v) {
    return glVertexAttribI4ubv(index, v);
}
inline void vertexAttribI4usv(GLuint index, const GLushort * v) {
    return glVertexAttribI4usv(index, v);
}
inline void getUniformuiv(GLuint program, GLint location, GLuint * params) {
    return glGetUniformuiv(program, location, params);
}
inline void bindFragDataLocation(GLuint program, GLuint color, const GLchar * name) {
    return glBindFragDataLocation(program, color, name);
}
inline GLint  getFragDataLocation(GLuint program, const GLchar * name) {
    return glGetFragDataLocation(program, name);
}
inline void uniform1ui(GLint location, GLuint v0) {
    return glUniform1ui(location, v0);
}
inline void uniform2ui(GLint location, GLuint v0, GLuint v1) {
    return glUniform2ui(location, v0, v1);
}
inline void uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
    return glUniform3ui(location, v0, v1, v2);
}
inline void uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    return glUniform4ui(location, v0, v1, v2, v3);
}
inline void uniform1uiv(GLint location, GLsizei count, const GLuint * value) {
    return glUniform1uiv(location, count, value);
}
inline void uniform2uiv(GLint location, GLsizei count, const GLuint * value) {
    return glUniform2uiv(location, count, value);
}
inline void uniform3uiv(GLint location, GLsizei count, const GLuint * value) {
    return glUniform3uiv(location, count, value);
}
inline void uniform4uiv(GLint location, GLsizei count, const GLuint * value) {
    return glUniform4uiv(location, count, value);
}
inline void texParameterIiv(TextureTarget target, TextureParameterName pname, const GLint * params) {
    return glTexParameterIiv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void texParameterIuiv(TextureTarget target, TextureParameterName pname, const GLuint * params) {
    return glTexParameterIuiv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void getTexParameterIiv(TextureTarget target, GetTextureParameter pname, GLint * params) {
    return glGetTexParameterIiv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void getTexParameterIuiv(TextureTarget target, GetTextureParameter pname, GLuint * params) {
    return glGetTexParameterIuiv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void clearBufferiv(Buffer buffer, GLint drawbuffer, const GLint * value) {
    return glClearBufferiv(static_cast<GLenum>(buffer), static_cast<GLint>(drawbuffer), value);
}
inline void clearBufferuiv(Buffer buffer, GLint drawbuffer, const GLuint * value) {
    return glClearBufferuiv(static_cast<GLenum>(buffer), static_cast<GLint>(drawbuffer), value);
}
inline void clearBufferfv(Buffer buffer, GLint drawbuffer, const GLfloat * value) {
    return glClearBufferfv(static_cast<GLenum>(buffer), static_cast<GLint>(drawbuffer), value);
}
inline void clearBufferfi(Buffer buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
    return glClearBufferfi(static_cast<GLenum>(buffer), static_cast<GLint>(drawbuffer), depth, stencil);
}
inline const GLubyte * getStringi(StringName name, GLuint index) {
    return glGetStringi(static_cast<GLenum>(name), index);
}
inline GLboolean  isRenderbuffer(GLuint renderbuffer) {
    return glIsRenderbuffer(renderbuffer);
}
inline void bindRenderbuffer(RenderbufferTarget target, GLuint renderbuffer) {
    return glBindRenderbuffer(static_cast<GLenum>(target), renderbuffer);
}
inline void deleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) {
    return glDeleteRenderbuffers(n, renderbuffers);
}
inline void genRenderbuffers(GLsizei n, GLuint * renderbuffers) {
    return glGenRenderbuffers(n, renderbuffers);
}
inline void renderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, GLsizei width, GLsizei height) {
    return glRenderbufferStorage(static_cast<GLenum>(target), static_cast<GLenum>(internalformat), width, height);
}
inline void getRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, GLint * params) {
    return glGetRenderbufferParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline GLboolean  isFramebuffer(GLuint framebuffer) {
    return glIsFramebuffer(framebuffer);
}
inline void bindFramebuffer(FramebufferTarget target, GLuint framebuffer) {
    return glBindFramebuffer(static_cast<GLenum>(target), framebuffer);
}
inline void deleteFramebuffers(GLsizei n, const GLuint * framebuffers) {
    return glDeleteFramebuffers(n, framebuffers);
}
inline void genFramebuffers(GLsizei n, GLuint * framebuffers) {
    return glGenFramebuffers(n, framebuffers);
}
inline GLenum  checkFramebufferStatus(FramebufferTarget target) {
    return glCheckFramebufferStatus(static_cast<GLenum>(target));
}
inline void framebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, GLuint texture, GLint level) {
    return glFramebufferTexture1D(static_cast<GLenum>(target), static_cast<GLenum>(attachment), static_cast<GLenum>(textarget), texture, level);
}
inline void framebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, GLuint texture, GLint level) {
    return glFramebufferTexture2D(static_cast<GLenum>(target), static_cast<GLenum>(attachment), static_cast<GLenum>(textarget), texture, level);
}
inline void framebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, GLuint texture, GLint level, GLint zoffset) {
    return glFramebufferTexture3D(static_cast<GLenum>(target), static_cast<GLenum>(attachment), static_cast<GLenum>(textarget), texture, level, zoffset);
}
inline void framebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, GLuint renderbuffer) {
    return glFramebufferRenderbuffer(static_cast<GLenum>(target), static_cast<GLenum>(attachment), static_cast<GLenum>(renderbuffertarget), renderbuffer);
}
inline void getFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, GLint * params) {
    return glGetFramebufferAttachmentParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(attachment), static_cast<GLenum>(pname), params);
}
inline void generateMipmap(TextureTarget target) {
    return glGenerateMipmap(static_cast<GLenum>(target));
}
inline void blitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, ClearBufferMask mask, BlitFramebufferFilter filter) {
    return glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, static_cast<GLbitfield>(mask), static_cast<GLenum>(filter));
}
inline void renderbufferStorageMultisample(RenderbufferTarget target, GLsizei samples, InternalFormat internalformat, GLsizei width, GLsizei height) {
    return glRenderbufferStorageMultisample(static_cast<GLenum>(target), samples, static_cast<GLenum>(internalformat), width, height);
}
inline void framebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, GLuint texture, GLint level, GLint layer) {
    return glFramebufferTextureLayer(static_cast<GLenum>(target), static_cast<GLenum>(attachment), static_cast<GLuint>(texture), static_cast<GLint>(level), static_cast<GLint>(layer));
}
inline void * mapBufferRange(BufferTargetARB target, GLintptr offset, GLsizeiptr length, MapBufferAccessMask access) {
    return glMapBufferRange(static_cast<GLenum>(target), static_cast<GLintptr>(offset), static_cast<GLsizeiptr>(length), static_cast<GLbitfield>(access));
}
inline void flushMappedBufferRange(BufferTargetARB target, GLintptr offset, GLsizeiptr length) {
    return glFlushMappedBufferRange(static_cast<GLenum>(target), static_cast<GLintptr>(offset), static_cast<GLsizeiptr>(length));
}
inline void bindVertexArray(GLuint array) {
    return glBindVertexArray(array);
}
inline void deleteVertexArrays(GLsizei n, const GLuint * arrays) {
    return glDeleteVertexArrays(n, arrays);
}
inline void genVertexArrays(GLsizei n, GLuint * arrays) {
    return glGenVertexArrays(n, arrays);
}
inline GLboolean  isVertexArray(GLuint array) {
    return glIsVertexArray(array);
}
inline void drawArraysInstanced(PrimitiveType mode, GLint first, GLsizei count, GLsizei instancecount) {
    return glDrawArraysInstanced(static_cast<GLenum>(mode), first, count, instancecount);
}
inline void drawElementsInstanced(PrimitiveType mode, GLsizei count, DrawElementsType type, const void * indices, GLsizei instancecount) {
    return glDrawElementsInstanced(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices, instancecount);
}
inline void texBuffer(TextureTarget target, SizedInternalFormat internalformat, GLuint buffer) {
    return glTexBuffer(static_cast<GLenum>(target), static_cast<GLenum>(internalformat), buffer);
}
inline void primitiveRestartIndex(GLuint index) {
    return glPrimitiveRestartIndex(index);
}
inline void copyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    return glCopyBufferSubData(static_cast<GLenum>(readTarget), static_cast<GLenum>(writeTarget), static_cast<GLintptr>(readOffset), static_cast<GLintptr>(writeOffset), static_cast<GLsizeiptr>(size));
}
inline void getUniformIndices(GLuint program, GLsizei uniformCount, const GLchar uniformNames, GLuint * uniformIndices) {
    return glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}
inline void getActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, UniformPName pname, GLint * params) {
    return glGetActiveUniformsiv(program, uniformCount, uniformIndices, static_cast<GLenum>(pname), params);
}
inline void getActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) {
    return glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}
inline GLuint  getUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) {
    return glGetUniformBlockIndex(program, uniformBlockName);
}
inline void getActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, UniformBlockPName pname, GLint * params) {
    return glGetActiveUniformBlockiv(program, uniformBlockIndex, static_cast<GLenum>(pname), params);
}
inline void getActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) {
    return glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
inline void uniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
    return glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}
inline void bindBufferRange(BufferTargetARB target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    return glBindBufferRange(static_cast<GLenum>(target), index, buffer, static_cast<GLintptr>(offset), static_cast<GLsizeiptr>(size));
}
inline void bindBufferBase(BufferTargetARB target, GLuint index, GLuint buffer) {
    return glBindBufferBase(static_cast<GLenum>(target), index, buffer);
}
inline void getIntegeri_v(GetPName target, GLuint index, GLint * data) {
    return glGetIntegeri_v(static_cast<GLenum>(target), index, data);
}
inline void drawElementsBaseVertex(PrimitiveType mode, GLsizei count, DrawElementsType type, const void * indices, GLint basevertex) {
    return glDrawElementsBaseVertex(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices, basevertex);
}
inline void drawRangeElementsBaseVertex(PrimitiveType mode, GLuint start, GLuint end, GLsizei count, DrawElementsType type, const void * indices, GLint basevertex) {
    return glDrawRangeElementsBaseVertex(static_cast<GLenum>(mode), start, end, count, static_cast<GLenum>(type), indices, basevertex);
}
inline void drawElementsInstancedBaseVertex(PrimitiveType mode, GLsizei count, DrawElementsType type, const void * indices, GLsizei instancecount, GLint basevertex) {
    return glDrawElementsInstancedBaseVertex(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices, instancecount, basevertex);
}
inline void multiDrawElementsBaseVertex(PrimitiveType mode, const GLsizei * count, DrawElementsType type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) {
    return glMultiDrawElementsBaseVertex(static_cast<GLenum>(mode), count, static_cast<GLenum>(type), indices, drawcount, basevertex);
}
inline void provokingVertex(VertexProvokingMode mode) {
    return glProvokingVertex(static_cast<GLenum>(mode));
}
inline GLsync  fenceSync(SyncCondition condition, SyncBehaviorFlags flags) {
    return glFenceSync(static_cast<GLenum>(condition), static_cast<GLbitfield>(flags));
}
inline GLboolean  isSync(GLsync sync) {
    return glIsSync(static_cast<GLsync>(sync));
}
inline void deleteSync(GLsync sync) {
    return glDeleteSync(static_cast<GLsync>(sync));
}
inline GLenum  clientWaitSync(GLsync sync, SyncObjectMask flags, GLuint64 timeout) {
    return glClientWaitSync(static_cast<GLsync>(sync), static_cast<GLbitfield>(flags), timeout);
}
inline void waitSync(GLsync sync, SyncBehaviorFlags flags, GLuint64 timeout) {
    return glWaitSync(static_cast<GLsync>(sync), static_cast<GLbitfield>(flags), timeout);
}
inline void getInteger64v(GetPName pname, GLint64 * data) {
    return glGetInteger64v(static_cast<GLenum>(pname), data);
}
inline void getSynciv(GLsync sync, SyncParameterName pname, GLsizei count, GLsizei * length, GLint * values) {
    return glGetSynciv(static_cast<GLsync>(sync), static_cast<GLenum>(pname), count, length, values);
}
inline void getInteger64i_v(GetPName target, GLuint index, GLint64 * data) {
    return glGetInteger64i_v(static_cast<GLenum>(target), index, data);
}
inline void getBufferParameteri64v(BufferTargetARB target, BufferPNameARB pname, GLint64 * params) {
    return glGetBufferParameteri64v(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void framebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, GLuint texture, GLint level) {
    return glFramebufferTexture(static_cast<GLenum>(target), static_cast<GLenum>(attachment), texture, level);
}
inline void texImage2DMultisample(TextureTarget target, GLsizei samples, InternalFormat internalformat, GLsizei width, GLsizei height, Boolean fixedsamplelocations) {
    return glTexImage2DMultisample(static_cast<GLenum>(target), samples, static_cast<GLenum>(internalformat), width, height, static_cast<GLboolean>(fixedsamplelocations));
}
inline void texImage3DMultisample(TextureTarget target, GLsizei samples, InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, Boolean fixedsamplelocations) {
    return glTexImage3DMultisample(static_cast<GLenum>(target), samples, static_cast<GLenum>(internalformat), width, height, depth, static_cast<GLboolean>(fixedsamplelocations));
}
inline void getMultisamplefv(GetMultisamplePNameNV pname, GLuint index, GLfloat * val) {
    return glGetMultisamplefv(static_cast<GLenum>(pname), index, val);
}
inline void sampleMaski(GLuint maskNumber, GLbitfield mask) {
    return glSampleMaski(maskNumber, mask);
}
inline void bindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) {
    return glBindFragDataLocationIndexed(program, colorNumber, index, name);
}
inline GLint  getFragDataIndex(GLuint program, const GLchar * name) {
    return glGetFragDataIndex(program, name);
}
inline void genSamplers(GLsizei count, GLuint * samplers) {
    return glGenSamplers(count, samplers);
}
inline void deleteSamplers(GLsizei count, const GLuint * samplers) {
    return glDeleteSamplers(count, samplers);
}
inline GLboolean  isSampler(GLuint sampler) {
    return glIsSampler(sampler);
}
inline void bindSampler(GLuint unit, GLuint sampler) {
    return glBindSampler(unit, sampler);
}
inline void samplerParameteri(GLuint sampler, SamplerParameterI pname, GLint param) {
    return glSamplerParameteri(sampler, static_cast<GLenum>(pname), param);
}
inline void samplerParameteriv(GLuint sampler, SamplerParameterI pname, const GLint * param) {
    return glSamplerParameteriv(sampler, static_cast<GLenum>(pname), param);
}
inline void samplerParameterf(GLuint sampler, SamplerParameterF pname, GLfloat param) {
    return glSamplerParameterf(sampler, static_cast<GLenum>(pname), param);
}
inline void samplerParameterfv(GLuint sampler, SamplerParameterF pname, const GLfloat * param) {
    return glSamplerParameterfv(sampler, static_cast<GLenum>(pname), param);
}
inline void samplerParameterIiv(GLuint sampler, SamplerParameterI pname, const GLint * param) {
    return glSamplerParameterIiv(sampler, static_cast<GLenum>(pname), param);
}
inline void samplerParameterIuiv(GLuint sampler, SamplerParameterI pname, const GLuint * param) {
    return glSamplerParameterIuiv(sampler, static_cast<GLenum>(pname), param);
}
inline void getSamplerParameteriv(GLuint sampler, SamplerParameterI pname, GLint * params) {
    return glGetSamplerParameteriv(sampler, static_cast<GLenum>(pname), params);
}
inline void getSamplerParameterIiv(GLuint sampler, SamplerParameterI pname, GLint * params) {
    return glGetSamplerParameterIiv(sampler, static_cast<GLenum>(pname), params);
}
inline void getSamplerParameterfv(GLuint sampler, SamplerParameterF pname, GLfloat * params) {
    return glGetSamplerParameterfv(sampler, static_cast<GLenum>(pname), params);
}
inline void getSamplerParameterIuiv(GLuint sampler, SamplerParameterI pname, GLuint * params) {
    return glGetSamplerParameterIuiv(sampler, static_cast<GLenum>(pname), params);
}
inline void queryCounter(GLuint id, QueryCounterTarget target) {
    return glQueryCounter(id, static_cast<GLenum>(target));
}
inline void getQueryObjecti64v(GLuint id, QueryObjectParameterName pname, GLint64 * params) {
    return glGetQueryObjecti64v(id, static_cast<GLenum>(pname), params);
}
inline void getQueryObjectui64v(GLuint id, QueryObjectParameterName pname, GLuint64 * params) {
    return glGetQueryObjectui64v(id, static_cast<GLenum>(pname), params);
}
inline void vertexAttribDivisor(GLuint index, GLuint divisor) {
    return glVertexAttribDivisor(index, divisor);
}
inline void vertexAttribP1ui(GLuint index, VertexAttribPointerType type, Boolean normalized, GLuint value) {
    return glVertexAttribP1ui(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexAttribP1uiv(GLuint index, VertexAttribPointerType type, Boolean normalized, const GLuint * value) {
    return glVertexAttribP1uiv(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexAttribP2ui(GLuint index, VertexAttribPointerType type, Boolean normalized, GLuint value) {
    return glVertexAttribP2ui(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexAttribP2uiv(GLuint index, VertexAttribPointerType type, Boolean normalized, const GLuint * value) {
    return glVertexAttribP2uiv(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexAttribP3ui(GLuint index, VertexAttribPointerType type, Boolean normalized, GLuint value) {
    return glVertexAttribP3ui(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexAttribP3uiv(GLuint index, VertexAttribPointerType type, Boolean normalized, const GLuint * value) {
    return glVertexAttribP3uiv(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexAttribP4ui(GLuint index, VertexAttribPointerType type, Boolean normalized, GLuint value) {
    return glVertexAttribP4ui(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexAttribP4uiv(GLuint index, VertexAttribPointerType type, Boolean normalized, const GLuint * value) {
    return glVertexAttribP4uiv(index, static_cast<GLenum>(type), static_cast<GLboolean>(normalized), value);
}
inline void vertexP2ui(VertexPointerType type, GLuint value) {
    return glVertexP2ui(static_cast<GLenum>(type), value);
}
inline void vertexP2uiv(VertexPointerType type, const GLuint * value) {
    return glVertexP2uiv(static_cast<GLenum>(type), value);
}
inline void vertexP3ui(VertexPointerType type, GLuint value) {
    return glVertexP3ui(static_cast<GLenum>(type), value);
}
inline void vertexP3uiv(VertexPointerType type, const GLuint * value) {
    return glVertexP3uiv(static_cast<GLenum>(type), value);
}
inline void vertexP4ui(VertexPointerType type, GLuint value) {
    return glVertexP4ui(static_cast<GLenum>(type), value);
}
inline void vertexP4uiv(VertexPointerType type, const GLuint * value) {
    return glVertexP4uiv(static_cast<GLenum>(type), value);
}
inline void texCoordP1ui(TexCoordPointerType type, GLuint coords) {
    return glTexCoordP1ui(static_cast<GLenum>(type), coords);
}
inline void texCoordP1uiv(TexCoordPointerType type, const GLuint * coords) {
    return glTexCoordP1uiv(static_cast<GLenum>(type), coords);
}
inline void texCoordP2ui(TexCoordPointerType type, GLuint coords) {
    return glTexCoordP2ui(static_cast<GLenum>(type), coords);
}
inline void texCoordP2uiv(TexCoordPointerType type, const GLuint * coords) {
    return glTexCoordP2uiv(static_cast<GLenum>(type), coords);
}
inline void texCoordP3ui(TexCoordPointerType type, GLuint coords) {
    return glTexCoordP3ui(static_cast<GLenum>(type), coords);
}
inline void texCoordP3uiv(TexCoordPointerType type, const GLuint * coords) {
    return glTexCoordP3uiv(static_cast<GLenum>(type), coords);
}
inline void texCoordP4ui(TexCoordPointerType type, GLuint coords) {
    return glTexCoordP4ui(static_cast<GLenum>(type), coords);
}
inline void texCoordP4uiv(TexCoordPointerType type, const GLuint * coords) {
    return glTexCoordP4uiv(static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, GLuint coords) {
    return glMultiTexCoordP1ui(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP1uiv(TextureUnit texture, TexCoordPointerType type, const GLuint * coords) {
    return glMultiTexCoordP1uiv(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, GLuint coords) {
    return glMultiTexCoordP2ui(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP2uiv(TextureUnit texture, TexCoordPointerType type, const GLuint * coords) {
    return glMultiTexCoordP2uiv(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, GLuint coords) {
    return glMultiTexCoordP3ui(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP3uiv(TextureUnit texture, TexCoordPointerType type, const GLuint * coords) {
    return glMultiTexCoordP3uiv(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, GLuint coords) {
    return glMultiTexCoordP4ui(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void multiTexCoordP4uiv(TextureUnit texture, TexCoordPointerType type, const GLuint * coords) {
    return glMultiTexCoordP4uiv(static_cast<GLenum>(texture), static_cast<GLenum>(type), coords);
}
inline void normalP3ui(NormalPointerType type, GLuint coords) {
    return glNormalP3ui(static_cast<GLenum>(type), coords);
}
inline void normalP3uiv(NormalPointerType type, const GLuint * coords) {
    return glNormalP3uiv(static_cast<GLenum>(type), coords);
}
inline void colorP3ui(ColorPointerType type, GLuint color) {
    return glColorP3ui(static_cast<GLenum>(type), color);
}
inline void colorP3uiv(ColorPointerType type, const GLuint * color) {
    return glColorP3uiv(static_cast<GLenum>(type), color);
}
inline void colorP4ui(ColorPointerType type, GLuint color) {
    return glColorP4ui(static_cast<GLenum>(type), color);
}
inline void colorP4uiv(ColorPointerType type, const GLuint * color) {
    return glColorP4uiv(static_cast<GLenum>(type), color);
}
inline void secondaryColorP3ui(ColorPointerType type, GLuint color) {
    return glSecondaryColorP3ui(static_cast<GLenum>(type), color);
}
inline void secondaryColorP3uiv(ColorPointerType type, const GLuint * color) {
    return glSecondaryColorP3uiv(static_cast<GLenum>(type), color);
}
}
#endif 

