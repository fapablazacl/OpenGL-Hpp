#ifndef __gl_hpp__
#define __gl_hpp__
#ifndef __glad_h_
#error This header requires glad.h to be included previously
#endif

namespace gl {
enum class ClipPlaneName : GLenum {
    eCLIP_PLANE0 = 0x3000,
    eCLIP_DISTANCE0 = 0x3000,
    eCLIP_PLANE1 = 0x3001,
    eCLIP_DISTANCE1 = 0x3001,
    eCLIP_PLANE2 = 0x3002,
    eCLIP_DISTANCE2 = 0x3002,
    eCLIP_PLANE3 = 0x3003,
    eCLIP_DISTANCE3 = 0x3003,
    eCLIP_PLANE4 = 0x3004,
    eCLIP_DISTANCE4 = 0x3004,
    eCLIP_PLANE5 = 0x3005,
    eCLIP_DISTANCE5 = 0x3005,
    eCLIP_DISTANCE6 = 0x3006,
    eCLIP_DISTANCE7 = 0x3007
};
enum class FeedbackType : GLenum {
    e2D = 0x0600,
    e3D = 0x0601,
    e3D_COLOR = 0x0602,
    e3D_COLOR_TEXTURE = 0x0603,
    e4D_COLOR_TEXTURE = 0x0604
};
enum class MapTarget : GLenum {
    eMAP1_COLOR_4 = 0x0D90,
    eMAP1_INDEX = 0x0D91,
    eMAP1_NORMAL = 0x0D92,
    eMAP1_TEXTURE_COORD_1 = 0x0D93,
    eMAP1_TEXTURE_COORD_2 = 0x0D94,
    eMAP1_TEXTURE_COORD_3 = 0x0D95,
    eMAP1_TEXTURE_COORD_4 = 0x0D96,
    eMAP1_VERTEX_3 = 0x0D97,
    eMAP1_VERTEX_4 = 0x0D98,
    eMAP2_COLOR_4 = 0x0DB0,
    eMAP2_INDEX = 0x0DB1,
    eMAP2_NORMAL = 0x0DB2,
    eMAP2_TEXTURE_COORD_1 = 0x0DB3,
    eMAP2_TEXTURE_COORD_2 = 0x0DB4,
    eMAP2_TEXTURE_COORD_3 = 0x0DB5,
    eMAP2_TEXTURE_COORD_4 = 0x0DB6,
    eMAP2_VERTEX_3 = 0x0DB7,
    eMAP2_VERTEX_4 = 0x0DB8,
    eGEOMETRY_DEFORMATION_SGIX = 0x8194,
    eTEXTURE_DEFORMATION_SGIX = 0x8195
};
enum class EnableCap : GLenum {
    ePOINT_SMOOTH = 0x0B10,
    eLINE_SMOOTH = 0x0B20,
    eLINE_STIPPLE = 0x0B24,
    ePOLYGON_SMOOTH = 0x0B41,
    ePOLYGON_STIPPLE = 0x0B42,
    eCULL_FACE = 0x0B44,
    eLIGHTING = 0x0B50,
    eCOLOR_MATERIAL = 0x0B57,
    eFOG = 0x0B60,
    eDEPTH_TEST = 0x0B71,
    eSTENCIL_TEST = 0x0B90,
    eNORMALIZE = 0x0BA1,
    eALPHA_TEST = 0x0BC0,
    eDITHER = 0x0BD0,
    eBLEND = 0x0BE2,
    eINDEX_LOGIC_OP = 0x0BF1,
    eCOLOR_LOGIC_OP = 0x0BF2,
    eSCISSOR_TEST = 0x0C11,
    eTEXTURE_GEN_S = 0x0C60,
    eTEXTURE_GEN_T = 0x0C61,
    eTEXTURE_GEN_R = 0x0C62,
    eTEXTURE_GEN_Q = 0x0C63,
    eAUTO_NORMAL = 0x0D80,
    eMAP1_COLOR_4 = 0x0D90,
    eMAP1_INDEX = 0x0D91,
    eMAP1_NORMAL = 0x0D92,
    eMAP1_TEXTURE_COORD_1 = 0x0D93,
    eMAP1_TEXTURE_COORD_2 = 0x0D94,
    eMAP1_TEXTURE_COORD_3 = 0x0D95,
    eMAP1_TEXTURE_COORD_4 = 0x0D96,
    eMAP1_VERTEX_3 = 0x0D97,
    eMAP1_VERTEX_4 = 0x0D98,
    eMAP2_COLOR_4 = 0x0DB0,
    eMAP2_INDEX = 0x0DB1,
    eMAP2_NORMAL = 0x0DB2,
    eMAP2_TEXTURE_COORD_1 = 0x0DB3,
    eMAP2_TEXTURE_COORD_2 = 0x0DB4,
    eMAP2_TEXTURE_COORD_3 = 0x0DB5,
    eMAP2_TEXTURE_COORD_4 = 0x0DB6,
    eMAP2_VERTEX_3 = 0x0DB7,
    eMAP2_VERTEX_4 = 0x0DB8,
    eTEXTURE_1D = 0x0DE0,
    eTEXTURE_2D = 0x0DE1,
    ePOLYGON_OFFSET_POINT = 0x2A01,
    ePOLYGON_OFFSET_LINE = 0x2A02,
    eCLIP_PLANE0 = 0x3000,
    eCLIP_DISTANCE0 = 0x3000,
    eCLIP_PLANE1 = 0x3001,
    eCLIP_DISTANCE1 = 0x3001,
    eCLIP_PLANE2 = 0x3002,
    eCLIP_DISTANCE2 = 0x3002,
    eCLIP_PLANE3 = 0x3003,
    eCLIP_DISTANCE3 = 0x3003,
    eCLIP_PLANE4 = 0x3004,
    eCLIP_DISTANCE4 = 0x3004,
    eCLIP_PLANE5 = 0x3005,
    eCLIP_DISTANCE5 = 0x3005,
    eCLIP_DISTANCE6 = 0x3006,
    eCLIP_DISTANCE7 = 0x3007,
    eLIGHT0 = 0x4000,
    eLIGHT1 = 0x4001,
    eLIGHT2 = 0x4002,
    eLIGHT3 = 0x4003,
    eLIGHT4 = 0x4004,
    eLIGHT5 = 0x4005,
    eLIGHT6 = 0x4006,
    eLIGHT7 = 0x4007,
    eCONVOLUTION_1D_EXT = 0x8010,
    eCONVOLUTION_2D_EXT = 0x8011,
    eSEPARABLE_2D_EXT = 0x8012,
    eHISTOGRAM_EXT = 0x8024,
    eMINMAX_EXT = 0x802E,
    ePOLYGON_OFFSET_FILL = 0x8037,
    eRESCALE_NORMAL_EXT = 0x803A,
    eTEXTURE_3D_EXT = 0x806F,
    eVERTEX_ARRAY = 0x8074,
    eNORMAL_ARRAY = 0x8075,
    eCOLOR_ARRAY = 0x8076,
    eINDEX_ARRAY = 0x8077,
    eTEXTURE_COORD_ARRAY = 0x8078,
    eEDGE_FLAG_ARRAY = 0x8079,
    eINTERLACE_SGIX = 0x8094,
    eMULTISAMPLE = 0x809D,
    eMULTISAMPLE_SGIS = 0x809D,
    eSAMPLE_ALPHA_TO_COVERAGE = 0x809E,
    eSAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
    eSAMPLE_ALPHA_TO_ONE = 0x809F,
    eSAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
    eSAMPLE_COVERAGE = 0x80A0,
    eSAMPLE_MASK_SGIS = 0x80A0,
    eTEXTURE_COLOR_TABLE_SGI = 0x80BC,
    eCOLOR_TABLE = 0x80D0,
    eCOLOR_TABLE_SGI = 0x80D0,
    ePOST_CONVOLUTION_COLOR_TABLE = 0x80D1,
    ePOST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
    ePOST_COLOR_MATRIX_COLOR_TABLE = 0x80D2,
    ePOST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
    eTEXTURE_4D_SGIS = 0x8134,
    ePIXEL_TEX_GEN_SGIX = 0x8139,
    eSPRITE_SGIX = 0x8148,
    eREFERENCE_PLANE_SGIX = 0x817D,
    eIR_INSTRUMENT1_SGIX = 0x817F,
    eCALLIGRAPHIC_FRAGMENT_SGIX = 0x8183,
    eFRAMEZOOM_SGIX = 0x818B,
    eFOG_OFFSET_SGIX = 0x8198,
    eSHARED_TEXTURE_PALETTE_EXT = 0x81FB,
    eDEBUG_OUTPUT_SYNCHRONOUS = 0x8242,
    eASYNC_HISTOGRAM_SGIX = 0x832C,
    ePIXEL_TEXTURE_SGIS = 0x8353,
    eASYNC_TEX_IMAGE_SGIX = 0x835C,
    eASYNC_DRAW_PIXELS_SGIX = 0x835D,
    eASYNC_READ_PIXELS_SGIX = 0x835E,
    eFRAGMENT_LIGHTING_SGIX = 0x8400,
    eFRAGMENT_COLOR_MATERIAL_SGIX = 0x8401,
    eFRAGMENT_LIGHT0_SGIX = 0x840C,
    eFRAGMENT_LIGHT1_SGIX = 0x840D,
    eFRAGMENT_LIGHT2_SGIX = 0x840E,
    eFRAGMENT_LIGHT3_SGIX = 0x840F,
    eFRAGMENT_LIGHT4_SGIX = 0x8410,
    eFRAGMENT_LIGHT5_SGIX = 0x8411,
    eFRAGMENT_LIGHT6_SGIX = 0x8412,
    eFRAGMENT_LIGHT7_SGIX = 0x8413,
    eTEXTURE_RECTANGLE = 0x84F5,
    eTEXTURE_RECTANGLE_ARB = 0x84F5,
    eTEXTURE_RECTANGLE_NV = 0x84F5,
    eTEXTURE_CUBE_MAP = 0x8513,
    eTEXTURE_CUBE_MAP_ARB = 0x8513,
    eTEXTURE_CUBE_MAP_EXT = 0x8513,
    eTEXTURE_CUBE_MAP_OES = 0x8513,
    ePROGRAM_POINT_SIZE = 0x8642,
    eDEPTH_CLAMP = 0x864F,
    eTEXTURE_CUBE_MAP_SEAMLESS = 0x884F,
    eSAMPLE_SHADING = 0x8C36,
    eRASTERIZER_DISCARD = 0x8C89,
    eTEXTURE_GEN_STR_OES = 0x8D60,
    ePRIMITIVE_RESTART_FIXED_INDEX = 0x8D69,
    eFRAMEBUFFER_SRGB = 0x8DB9,
    eSAMPLE_MASK = 0x8E51,
    eFETCH_PER_SAMPLE_ARM = 0x8F65,
    ePRIMITIVE_RESTART = 0x8F9D,
    eDEBUG_OUTPUT = 0x92E0,
    eSHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1,
    eFRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2,
    eSHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 0x96A5
};
enum class StencilFunction : GLenum {
    eNEVER = 0x0200,
    eLESS = 0x0201,
    eEQUAL = 0x0202,
    eLEQUAL = 0x0203,
    eGREATER = 0x0204,
    eNOTEQUAL = 0x0205,
    eGEQUAL = 0x0206,
    eALWAYS = 0x0207
};
enum class MaterialParameter : GLenum {
    eAMBIENT = 0x1200,
    eDIFFUSE = 0x1201,
    eSPECULAR = 0x1202,
    eEMISSION = 0x1600,
    eSHININESS = 0x1601,
    eAMBIENT_AND_DIFFUSE = 0x1602,
    eCOLOR_INDEXES = 0x1603
};
enum class ClearBufferMask : GLenum {
    eDEPTH_BUFFER_BIT = 0x00000100,
    eACCUM_BUFFER_BIT = 0x00000200,
    eSTENCIL_BUFFER_BIT = 0x00000400,
    eCOLOR_BUFFER_BIT = 0x00004000,
    eCOVERAGE_BUFFER_BIT_NV = 0x00008000
};
enum class BlendingFactor : GLenum {
    eZERO = 0,
    eONE = 1,
    eSRC_COLOR = 0x0300,
    eONE_MINUS_SRC_COLOR = 0x0301,
    eSRC_ALPHA = 0x0302,
    eONE_MINUS_SRC_ALPHA = 0x0303,
    eDST_ALPHA = 0x0304,
    eONE_MINUS_DST_ALPHA = 0x0305,
    eDST_COLOR = 0x0306,
    eONE_MINUS_DST_COLOR = 0x0307,
    eSRC_ALPHA_SATURATE = 0x0308,
    eCONSTANT_COLOR = 0x8001,
    eONE_MINUS_CONSTANT_COLOR = 0x8002,
    eCONSTANT_ALPHA = 0x8003,
    eONE_MINUS_CONSTANT_ALPHA = 0x8004,
    eSRC1_ALPHA = 0x8589,
    eSRC1_COLOR = 0x88F9,
    eONE_MINUS_SRC1_COLOR = 0x88FA,
    eONE_MINUS_SRC1_ALPHA = 0x88FB
};
enum class TextureParameterName : GLenum {
    eTEXTURE_WIDTH = 0x1000,
    eTEXTURE_HEIGHT = 0x1001,
    eTEXTURE_INTERNAL_FORMAT = 0x1003,
    eTEXTURE_COMPONENTS = 0x1003,
    eTEXTURE_BORDER_COLOR = 0x1004,
    eTEXTURE_BORDER_COLOR_NV = 0x1004,
    eTEXTURE_BORDER = 0x1005,
    eTEXTURE_MAG_FILTER = 0x2800,
    eTEXTURE_MIN_FILTER = 0x2801,
    eTEXTURE_WRAP_S = 0x2802,
    eTEXTURE_WRAP_T = 0x2803,
    eTEXTURE_RED_SIZE = 0x805C,
    eTEXTURE_GREEN_SIZE = 0x805D,
    eTEXTURE_BLUE_SIZE = 0x805E,
    eTEXTURE_ALPHA_SIZE = 0x805F,
    eTEXTURE_LUMINANCE_SIZE = 0x8060,
    eTEXTURE_INTENSITY_SIZE = 0x8061,
    eTEXTURE_PRIORITY = 0x8066,
    eTEXTURE_PRIORITY_EXT = 0x8066,
    eTEXTURE_RESIDENT = 0x8067,
    eTEXTURE_DEPTH_EXT = 0x8071,
    eTEXTURE_WRAP_R = 0x8072,
    eTEXTURE_WRAP_R_EXT = 0x8072,
    eTEXTURE_WRAP_R_OES = 0x8072,
    eDETAIL_TEXTURE_LEVEL_SGIS = 0x809A,
    eDETAIL_TEXTURE_MODE_SGIS = 0x809B,
    eDETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C,
    eSHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0,
    eSHADOW_AMBIENT_SGIX = 0x80BF,
    eDUAL_TEXTURE_SELECT_SGIS = 0x8124,
    eQUAD_TEXTURE_SELECT_SGIS = 0x8125,
    eTEXTURE_4DSIZE_SGIS = 0x8136,
    eTEXTURE_WRAP_Q_SGIS = 0x8137,
    eTEXTURE_MIN_LOD = 0x813A,
    eTEXTURE_MIN_LOD_SGIS = 0x813A,
    eTEXTURE_MAX_LOD = 0x813B,
    eTEXTURE_MAX_LOD_SGIS = 0x813B,
    eTEXTURE_BASE_LEVEL = 0x813C,
    eTEXTURE_BASE_LEVEL_SGIS = 0x813C,
    eTEXTURE_MAX_LEVEL = 0x813D,
    eTEXTURE_MAX_LEVEL_SGIS = 0x813D,
    eTEXTURE_FILTER4_SIZE_SGIS = 0x8147,
    eTEXTURE_CLIPMAP_CENTER_SGIX = 0x8171,
    eTEXTURE_CLIPMAP_FRAME_SGIX = 0x8172,
    eTEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173,
    eTEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174,
    eTEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175,
    eTEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176,
    ePOST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
    ePOST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
    eTEXTURE_LOD_BIAS_S_SGIX = 0x818E,
    eTEXTURE_LOD_BIAS_T_SGIX = 0x818F,
    eTEXTURE_LOD_BIAS_R_SGIX = 0x8190,
    eGENERATE_MIPMAP = 0x8191,
    eGENERATE_MIPMAP_SGIS = 0x8191,
    eTEXTURE_COMPARE_SGIX = 0x819A,
    eTEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
    eTEXTURE_LEQUAL_R_SGIX = 0x819C,
    eTEXTURE_GEQUAL_R_SGIX = 0x819D,
    eTEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
    eTEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
    eTEXTURE_MAX_CLAMP_R_SGIX = 0x836B,
    eTEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF,
    eTEXTURE_MAX_ANISOTROPY = 0x84FE,
    eTEXTURE_LOD_BIAS = 0x8501,
    eTEXTURE_COMPARE_MODE = 0x884C,
    eTEXTURE_COMPARE_FUNC = 0x884D,
    eTEXTURE_SWIZZLE_R = 0x8E42,
    eTEXTURE_SWIZZLE_G = 0x8E43,
    eTEXTURE_SWIZZLE_B = 0x8E44,
    eTEXTURE_SWIZZLE_A = 0x8E45,
    eTEXTURE_SWIZZLE_RGBA = 0x8E46,
    eTEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A,
    eDEPTH_STENCIL_TEXTURE_MODE = 0x90EA,
    eTEXTURE_TILING_EXT = 0x9580,
    eTEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = 0x96A0
};
enum class StencilOp : GLenum {
    eZERO = 0,
    eINVERT = 0x150A,
    eKEEP = 0x1E00,
    eREPLACE = 0x1E01,
    eINCR = 0x1E02,
    eDECR = 0x1E03,
    eINCR_WRAP = 0x8507,
    eDECR_WRAP = 0x8508
};
enum class MeshMode2 : GLenum {
    ePOINT = 0x1B00,
    eLINE = 0x1B01,
    eFILL = 0x1B02
};
enum class GetMapQuery : GLenum {
    eCOEFF = 0x0A00,
    eORDER = 0x0A01,
    eDOMAIN = 0x0A02
};
enum class PixelMap : GLenum {
    ePIXEL_MAP_I_TO_I = 0x0C70,
    ePIXEL_MAP_S_TO_S = 0x0C71,
    ePIXEL_MAP_I_TO_R = 0x0C72,
    ePIXEL_MAP_I_TO_G = 0x0C73,
    ePIXEL_MAP_I_TO_B = 0x0C74,
    ePIXEL_MAP_I_TO_A = 0x0C75,
    ePIXEL_MAP_R_TO_R = 0x0C76,
    ePIXEL_MAP_G_TO_G = 0x0C77,
    ePIXEL_MAP_B_TO_B = 0x0C78,
    ePIXEL_MAP_A_TO_A = 0x0C79
};
enum class LogicOp : GLenum {
    eCLEAR = 0x1500,
    eAND = 0x1501,
    eAND_REVERSE = 0x1502,
    eCOPY = 0x1503,
    eAND_INVERTED = 0x1504,
    eNOOP = 0x1505,
    eXOR = 0x1506,
    eOR = 0x1507,
    eNOR = 0x1508,
    eEQUIV = 0x1509,
    eINVERT = 0x150A,
    eOR_REVERSE = 0x150B,
    eCOPY_INVERTED = 0x150C,
    eOR_INVERTED = 0x150D,
    eNAND = 0x150E,
    eSET = 0x150F
};
enum class TextureEnvParameter : GLenum {
    eTEXTURE_ENV_MODE = 0x2200,
    eTEXTURE_ENV_COLOR = 0x2201,
    eCOMBINE = 0x8570,
    eCOMBINE_ARB = 0x8570,
    eCOMBINE_EXT = 0x8570,
    eCOMBINE_RGB = 0x8571,
    eCOMBINE_RGB_ARB = 0x8571,
    eCOMBINE_RGB_EXT = 0x8571,
    eCOMBINE_ALPHA = 0x8572,
    eCOMBINE_ALPHA_ARB = 0x8572,
    eCOMBINE_ALPHA_EXT = 0x8572,
    eRGB_SCALE = 0x8573,
    eRGB_SCALE_ARB = 0x8573,
    eRGB_SCALE_EXT = 0x8573,
    eADD_SIGNED = 0x8574,
    eADD_SIGNED_ARB = 0x8574,
    eADD_SIGNED_EXT = 0x8574,
    eINTERPOLATE = 0x8575,
    eINTERPOLATE_ARB = 0x8575,
    eINTERPOLATE_EXT = 0x8575,
    eCONSTANT = 0x8576,
    eCONSTANT_ARB = 0x8576,
    eCONSTANT_EXT = 0x8576,
    eCONSTANT_NV = 0x8576,
    ePRIMARY_COLOR = 0x8577,
    ePRIMARY_COLOR_ARB = 0x8577,
    ePRIMARY_COLOR_EXT = 0x8577,
    ePREVIOUS = 0x8578,
    ePREVIOUS_ARB = 0x8578,
    ePREVIOUS_EXT = 0x8578,
    eSOURCE0_RGB = 0x8580,
    eSOURCE0_RGB_ARB = 0x8580,
    eSOURCE0_RGB_EXT = 0x8580,
    eSRC0_RGB = 0x8580,
    eSOURCE1_RGB = 0x8581,
    eSOURCE1_RGB_ARB = 0x8581,
    eSOURCE1_RGB_EXT = 0x8581,
    eSRC1_RGB = 0x8581,
    eSOURCE2_RGB = 0x8582,
    eSOURCE2_RGB_ARB = 0x8582,
    eSOURCE2_RGB_EXT = 0x8582,
    eSRC2_RGB = 0x8582,
    eSOURCE3_RGB_NV = 0x8583,
    eSOURCE0_ALPHA = 0x8588,
    eSOURCE0_ALPHA_ARB = 0x8588,
    eSOURCE0_ALPHA_EXT = 0x8588,
    eSRC0_ALPHA = 0x8588,
    eSOURCE1_ALPHA = 0x8589,
    eSOURCE1_ALPHA_ARB = 0x8589,
    eSOURCE1_ALPHA_EXT = 0x8589,
    eSRC1_ALPHA = 0x8589,
    eSRC1_ALPHA_EXT = 0x8589,
    eSOURCE2_ALPHA = 0x858A,
    eSOURCE2_ALPHA_ARB = 0x858A,
    eSOURCE2_ALPHA_EXT = 0x858A,
    eSRC2_ALPHA = 0x858A,
    eSOURCE3_ALPHA_NV = 0x858B,
    eOPERAND0_RGB = 0x8590,
    eOPERAND0_RGB_ARB = 0x8590,
    eOPERAND0_RGB_EXT = 0x8590,
    eOPERAND1_RGB = 0x8591,
    eOPERAND1_RGB_ARB = 0x8591,
    eOPERAND1_RGB_EXT = 0x8591,
    eOPERAND2_RGB = 0x8592,
    eOPERAND2_RGB_ARB = 0x8592,
    eOPERAND2_RGB_EXT = 0x8592,
    eOPERAND3_RGB_NV = 0x8593,
    eOPERAND0_ALPHA = 0x8598,
    eOPERAND0_ALPHA_ARB = 0x8598,
    eOPERAND0_ALPHA_EXT = 0x8598,
    eOPERAND1_ALPHA = 0x8599,
    eOPERAND1_ALPHA_ARB = 0x8599,
    eOPERAND1_ALPHA_EXT = 0x8599,
    eOPERAND2_ALPHA = 0x859A,
    eOPERAND2_ALPHA_ARB = 0x859A,
    eOPERAND2_ALPHA_EXT = 0x859A,
    eOPERAND3_ALPHA_NV = 0x859B
};
enum class MatrixMode : GLenum {
    eMODELVIEW = 0x1700,
    eMODELVIEW0_EXT = 0x1700,
    ePROJECTION = 0x1701,
    eTEXTURE = 0x1702
};
enum class DrawBufferMode : GLenum {
    eNONE = 0,
    eNONE_OES = 0,
    eFRONT_LEFT = 0x0400,
    eFRONT_RIGHT = 0x0401,
    eBACK_LEFT = 0x0402,
    eBACK_RIGHT = 0x0403,
    eFRONT = 0x0404,
    eBACK = 0x0405,
    eLEFT = 0x0406,
    eRIGHT = 0x0407,
    eFRONT_AND_BACK = 0x0408,
    eAUX0 = 0x0409,
    eAUX1 = 0x040A,
    eAUX2 = 0x040B,
    eAUX3 = 0x040C,
    eCOLOR_ATTACHMENT0 = 0x8CE0,
    eCOLOR_ATTACHMENT0_NV = 0x8CE0,
    eCOLOR_ATTACHMENT1 = 0x8CE1,
    eCOLOR_ATTACHMENT1_NV = 0x8CE1,
    eCOLOR_ATTACHMENT2 = 0x8CE2,
    eCOLOR_ATTACHMENT2_NV = 0x8CE2,
    eCOLOR_ATTACHMENT3 = 0x8CE3,
    eCOLOR_ATTACHMENT3_NV = 0x8CE3,
    eCOLOR_ATTACHMENT4 = 0x8CE4,
    eCOLOR_ATTACHMENT4_NV = 0x8CE4,
    eCOLOR_ATTACHMENT5 = 0x8CE5,
    eCOLOR_ATTACHMENT5_NV = 0x8CE5,
    eCOLOR_ATTACHMENT6 = 0x8CE6,
    eCOLOR_ATTACHMENT6_NV = 0x8CE6,
    eCOLOR_ATTACHMENT7 = 0x8CE7,
    eCOLOR_ATTACHMENT7_NV = 0x8CE7,
    eCOLOR_ATTACHMENT8 = 0x8CE8,
    eCOLOR_ATTACHMENT8_NV = 0x8CE8,
    eCOLOR_ATTACHMENT9 = 0x8CE9,
    eCOLOR_ATTACHMENT9_NV = 0x8CE9,
    eCOLOR_ATTACHMENT10 = 0x8CEA,
    eCOLOR_ATTACHMENT10_NV = 0x8CEA,
    eCOLOR_ATTACHMENT11 = 0x8CEB,
    eCOLOR_ATTACHMENT11_NV = 0x8CEB,
    eCOLOR_ATTACHMENT12 = 0x8CEC,
    eCOLOR_ATTACHMENT12_NV = 0x8CEC,
    eCOLOR_ATTACHMENT13 = 0x8CED,
    eCOLOR_ATTACHMENT13_NV = 0x8CED,
    eCOLOR_ATTACHMENT14 = 0x8CEE,
    eCOLOR_ATTACHMENT14_NV = 0x8CEE,
    eCOLOR_ATTACHMENT15 = 0x8CEF,
    eCOLOR_ATTACHMENT15_NV = 0x8CEF,
    eCOLOR_ATTACHMENT16 = 0x8CF0,
    eCOLOR_ATTACHMENT17 = 0x8CF1,
    eCOLOR_ATTACHMENT18 = 0x8CF2,
    eCOLOR_ATTACHMENT19 = 0x8CF3,
    eCOLOR_ATTACHMENT20 = 0x8CF4,
    eCOLOR_ATTACHMENT21 = 0x8CF5,
    eCOLOR_ATTACHMENT22 = 0x8CF6,
    eCOLOR_ATTACHMENT23 = 0x8CF7,
    eCOLOR_ATTACHMENT24 = 0x8CF8,
    eCOLOR_ATTACHMENT25 = 0x8CF9,
    eCOLOR_ATTACHMENT26 = 0x8CFA,
    eCOLOR_ATTACHMENT27 = 0x8CFB,
    eCOLOR_ATTACHMENT28 = 0x8CFC,
    eCOLOR_ATTACHMENT29 = 0x8CFD,
    eCOLOR_ATTACHMENT30 = 0x8CFE,
    eCOLOR_ATTACHMENT31 = 0x8CFF
};
enum class TextureTarget : GLenum {
    eTEXTURE_1D = 0x0DE0,
    eTEXTURE_2D = 0x0DE1,
    ePROXY_TEXTURE_1D = 0x8063,
    ePROXY_TEXTURE_1D_EXT = 0x8063,
    ePROXY_TEXTURE_2D = 0x8064,
    ePROXY_TEXTURE_2D_EXT = 0x8064,
    eTEXTURE_3D = 0x806F,
    eTEXTURE_3D_EXT = 0x806F,
    eTEXTURE_3D_OES = 0x806F,
    ePROXY_TEXTURE_3D = 0x8070,
    ePROXY_TEXTURE_3D_EXT = 0x8070,
    eDETAIL_TEXTURE_2D_SGIS = 0x8095,
    eTEXTURE_4D_SGIS = 0x8134,
    ePROXY_TEXTURE_4D_SGIS = 0x8135,
    eTEXTURE_RECTANGLE = 0x84F5,
    eTEXTURE_RECTANGLE_ARB = 0x84F5,
    eTEXTURE_RECTANGLE_NV = 0x84F5,
    ePROXY_TEXTURE_RECTANGLE = 0x84F7,
    ePROXY_TEXTURE_RECTANGLE_ARB = 0x84F7,
    ePROXY_TEXTURE_RECTANGLE_NV = 0x84F7,
    eTEXTURE_CUBE_MAP = 0x8513,
    eTEXTURE_CUBE_MAP_ARB = 0x8513,
    eTEXTURE_CUBE_MAP_EXT = 0x8513,
    eTEXTURE_CUBE_MAP_OES = 0x8513,
    eTEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,
    eTEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515,
    eTEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515,
    eTEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515,
    eTEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,
    eTEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516,
    eTEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516,
    eTEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516,
    eTEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,
    eTEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517,
    eTEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517,
    eTEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518,
    eTEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518,
    eTEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,
    eTEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519,
    eTEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519,
    eTEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A,
    eTEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A,
    ePROXY_TEXTURE_CUBE_MAP = 0x851B,
    ePROXY_TEXTURE_CUBE_MAP_ARB = 0x851B,
    ePROXY_TEXTURE_CUBE_MAP_EXT = 0x851B,
    eTEXTURE_1D_ARRAY = 0x8C18,
    ePROXY_TEXTURE_1D_ARRAY = 0x8C19,
    ePROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19,
    eTEXTURE_2D_ARRAY = 0x8C1A,
    ePROXY_TEXTURE_2D_ARRAY = 0x8C1B,
    ePROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B,
    eTEXTURE_BUFFER = 0x8C2A,
    eRENDERBUFFER = 0x8D41,
    eTEXTURE_CUBE_MAP_ARRAY = 0x9009,
    eTEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009,
    eTEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009,
    eTEXTURE_CUBE_MAP_ARRAY_OES = 0x9009,
    ePROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B,
    ePROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B,
    eTEXTURE_2D_MULTISAMPLE = 0x9100,
    ePROXY_TEXTURE_2D_MULTISAMPLE = 0x9101,
    eTEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102,
    ePROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103
};
enum class InternalFormat : GLenum {
    eSTENCIL_INDEX = 0x1901,
    eSTENCIL_INDEX_OES = 0x1901,
    eDEPTH_COMPONENT = 0x1902,
    eRED = 0x1903,
    eRED_EXT = 0x1903,
    eRGB = 0x1907,
    eRGBA = 0x1908,
    eR3_G3_B2 = 0x2A10,
    eALPHA4 = 0x803B,
    eALPHA4_EXT = 0x803B,
    eALPHA8 = 0x803C,
    eALPHA8_EXT = 0x803C,
    eALPHA8_OES = 0x803C,
    eALPHA12 = 0x803D,
    eALPHA12_EXT = 0x803D,
    eALPHA16 = 0x803E,
    eALPHA16_EXT = 0x803E,
    eLUMINANCE4 = 0x803F,
    eLUMINANCE4_EXT = 0x803F,
    eLUMINANCE8 = 0x8040,
    eLUMINANCE8_EXT = 0x8040,
    eLUMINANCE8_OES = 0x8040,
    eLUMINANCE12 = 0x8041,
    eLUMINANCE12_EXT = 0x8041,
    eLUMINANCE16 = 0x8042,
    eLUMINANCE16_EXT = 0x8042,
    eLUMINANCE4_ALPHA4 = 0x8043,
    eLUMINANCE4_ALPHA4_EXT = 0x8043,
    eLUMINANCE4_ALPHA4_OES = 0x8043,
    eLUMINANCE6_ALPHA2 = 0x8044,
    eLUMINANCE6_ALPHA2_EXT = 0x8044,
    eLUMINANCE8_ALPHA8 = 0x8045,
    eLUMINANCE8_ALPHA8_EXT = 0x8045,
    eLUMINANCE8_ALPHA8_OES = 0x8045,
    eLUMINANCE12_ALPHA4 = 0x8046,
    eLUMINANCE12_ALPHA4_EXT = 0x8046,
    eLUMINANCE12_ALPHA12 = 0x8047,
    eLUMINANCE12_ALPHA12_EXT = 0x8047,
    eLUMINANCE16_ALPHA16 = 0x8048,
    eLUMINANCE16_ALPHA16_EXT = 0x8048,
    eINTENSITY = 0x8049,
    eINTENSITY4 = 0x804A,
    eINTENSITY4_EXT = 0x804A,
    eINTENSITY8 = 0x804B,
    eINTENSITY8_EXT = 0x804B,
    eINTENSITY12 = 0x804C,
    eINTENSITY12_EXT = 0x804C,
    eINTENSITY16 = 0x804D,
    eINTENSITY16_EXT = 0x804D,
    eRGB2_EXT = 0x804E,
    eRGB4 = 0x804F,
    eRGB4_EXT = 0x804F,
    eRGB5 = 0x8050,
    eRGB5_EXT = 0x8050,
    eRGB8 = 0x8051,
    eRGB8_EXT = 0x8051,
    eRGB8_OES = 0x8051,
    eRGB10 = 0x8052,
    eRGB10_EXT = 0x8052,
    eRGB12 = 0x8053,
    eRGB12_EXT = 0x8053,
    eRGB16 = 0x8054,
    eRGB16_EXT = 0x8054,
    eRGBA2 = 0x8055,
    eRGBA2_EXT = 0x8055,
    eRGBA4 = 0x8056,
    eRGBA4_EXT = 0x8056,
    eRGBA4_OES = 0x8056,
    eRGB5_A1 = 0x8057,
    eRGB5_A1_EXT = 0x8057,
    eRGB5_A1_OES = 0x8057,
    eRGBA8 = 0x8058,
    eRGBA8_EXT = 0x8058,
    eRGBA8_OES = 0x8058,
    eRGB10_A2 = 0x8059,
    eRGB10_A2_EXT = 0x8059,
    eRGBA12 = 0x805A,
    eRGBA12_EXT = 0x805A,
    eRGBA16 = 0x805B,
    eRGBA16_EXT = 0x805B,
    eDUAL_ALPHA4_SGIS = 0x8110,
    eDUAL_ALPHA8_SGIS = 0x8111,
    eDUAL_ALPHA12_SGIS = 0x8112,
    eDUAL_ALPHA16_SGIS = 0x8113,
    eDUAL_LUMINANCE4_SGIS = 0x8114,
    eDUAL_LUMINANCE8_SGIS = 0x8115,
    eDUAL_LUMINANCE12_SGIS = 0x8116,
    eDUAL_LUMINANCE16_SGIS = 0x8117,
    eDUAL_INTENSITY4_SGIS = 0x8118,
    eDUAL_INTENSITY8_SGIS = 0x8119,
    eDUAL_INTENSITY12_SGIS = 0x811A,
    eDUAL_INTENSITY16_SGIS = 0x811B,
    eDUAL_LUMINANCE_ALPHA4_SGIS = 0x811C,
    eDUAL_LUMINANCE_ALPHA8_SGIS = 0x811D,
    eQUAD_ALPHA4_SGIS = 0x811E,
    eQUAD_ALPHA8_SGIS = 0x811F,
    eQUAD_LUMINANCE4_SGIS = 0x8120,
    eQUAD_LUMINANCE8_SGIS = 0x8121,
    eQUAD_INTENSITY4_SGIS = 0x8122,
    eQUAD_INTENSITY8_SGIS = 0x8123,
    eDEPTH_COMPONENT16 = 0x81A5,
    eDEPTH_COMPONENT16_ARB = 0x81A5,
    eDEPTH_COMPONENT16_OES = 0x81A5,
    eDEPTH_COMPONENT16_SGIX = 0x81A5,
    eDEPTH_COMPONENT24 = 0x81A6,
    eDEPTH_COMPONENT24_ARB = 0x81A6,
    eDEPTH_COMPONENT24_OES = 0x81A6,
    eDEPTH_COMPONENT24_SGIX = 0x81A6,
    eDEPTH_COMPONENT32 = 0x81A7,
    eDEPTH_COMPONENT32_ARB = 0x81A7,
    eDEPTH_COMPONENT32_OES = 0x81A7,
    eDEPTH_COMPONENT32_SGIX = 0x81A7,
    eCOMPRESSED_RED = 0x8225,
    eCOMPRESSED_RG = 0x8226,
    eRG = 0x8227,
    eR8 = 0x8229,
    eR8_EXT = 0x8229,
    eR16 = 0x822A,
    eR16_EXT = 0x822A,
    eRG8 = 0x822B,
    eRG8_EXT = 0x822B,
    eRG16 = 0x822C,
    eRG16_EXT = 0x822C,
    eR16F = 0x822D,
    eR16F_EXT = 0x822D,
    eR32F = 0x822E,
    eR32F_EXT = 0x822E,
    eRG16F = 0x822F,
    eRG16F_EXT = 0x822F,
    eRG32F = 0x8230,
    eRG32F_EXT = 0x8230,
    eR8I = 0x8231,
    eR8UI = 0x8232,
    eR16I = 0x8233,
    eR16UI = 0x8234,
    eR32I = 0x8235,
    eR32UI = 0x8236,
    eRG8I = 0x8237,
    eRG8UI = 0x8238,
    eRG16I = 0x8239,
    eRG16UI = 0x823A,
    eRG32I = 0x823B,
    eRG32UI = 0x823C,
    eCOMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
    eCOMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
    eCOMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2,
    eCOMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
    eCOMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3,
    eCOMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,
    eCOMPRESSED_RGB = 0x84ED,
    eCOMPRESSED_RGBA = 0x84EE,
    eDEPTH_STENCIL = 0x84F9,
    eDEPTH_STENCIL_EXT = 0x84F9,
    eDEPTH_STENCIL_NV = 0x84F9,
    eDEPTH_STENCIL_OES = 0x84F9,
    eDEPTH_STENCIL_MESA = 0x8750,
    eRGBA32F = 0x8814,
    eRGBA32F_ARB = 0x8814,
    eRGBA32F_EXT = 0x8814,
    eRGB32F = 0x8815,
    eRGB32F_ARB = 0x8815,
    eRGB32F_EXT = 0x8815,
    eRGBA16F = 0x881A,
    eRGBA16F_ARB = 0x881A,
    eRGBA16F_EXT = 0x881A,
    eRGB16F = 0x881B,
    eRGB16F_ARB = 0x881B,
    eRGB16F_EXT = 0x881B,
    eDEPTH24_STENCIL8 = 0x88F0,
    eDEPTH24_STENCIL8_EXT = 0x88F0,
    eDEPTH24_STENCIL8_OES = 0x88F0,
    eR11F_G11F_B10F = 0x8C3A,
    eR11F_G11F_B10F_APPLE = 0x8C3A,
    eR11F_G11F_B10F_EXT = 0x8C3A,
    eRGB9_E5 = 0x8C3D,
    eRGB9_E5_APPLE = 0x8C3D,
    eRGB9_E5_EXT = 0x8C3D,
    eSRGB = 0x8C40,
    eSRGB_EXT = 0x8C40,
    eSRGB8 = 0x8C41,
    eSRGB8_EXT = 0x8C41,
    eSRGB8_NV = 0x8C41,
    eSRGB_ALPHA = 0x8C42,
    eSRGB_ALPHA_EXT = 0x8C42,
    eSRGB8_ALPHA8 = 0x8C43,
    eSRGB8_ALPHA8_EXT = 0x8C43,
    eCOMPRESSED_SRGB = 0x8C48,
    eCOMPRESSED_SRGB_ALPHA = 0x8C49,
    eCOMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,
    eCOMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,
    eCOMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F,
    eDEPTH_COMPONENT32F = 0x8CAC,
    eDEPTH32F_STENCIL8 = 0x8CAD,
    eSTENCIL_INDEX1 = 0x8D46,
    eSTENCIL_INDEX1_EXT = 0x8D46,
    eSTENCIL_INDEX1_OES = 0x8D46,
    eSTENCIL_INDEX4 = 0x8D47,
    eSTENCIL_INDEX4_EXT = 0x8D47,
    eSTENCIL_INDEX4_OES = 0x8D47,
    eSTENCIL_INDEX8 = 0x8D48,
    eSTENCIL_INDEX8_EXT = 0x8D48,
    eSTENCIL_INDEX8_OES = 0x8D48,
    eSTENCIL_INDEX16 = 0x8D49,
    eSTENCIL_INDEX16_EXT = 0x8D49,
    eRGB565_OES = 0x8D62,
    eRGB565 = 0x8D62,
    eETC1_RGB8_OES = 0x8D64,
    eRGBA32UI = 0x8D70,
    eRGBA32UI_EXT = 0x8D70,
    eRGB32UI = 0x8D71,
    eRGB32UI_EXT = 0x8D71,
    eALPHA32UI_EXT = 0x8D72,
    eINTENSITY32UI_EXT = 0x8D73,
    eLUMINANCE32UI_EXT = 0x8D74,
    eLUMINANCE_ALPHA32UI_EXT = 0x8D75,
    eRGBA16UI = 0x8D76,
    eRGBA16UI_EXT = 0x8D76,
    eRGB16UI = 0x8D77,
    eRGB16UI_EXT = 0x8D77,
    eALPHA16UI_EXT = 0x8D78,
    eINTENSITY16UI_EXT = 0x8D79,
    eLUMINANCE16UI_EXT = 0x8D7A,
    eLUMINANCE_ALPHA16UI_EXT = 0x8D7B,
    eRGBA8UI = 0x8D7C,
    eRGBA8UI_EXT = 0x8D7C,
    eRGB8UI = 0x8D7D,
    eRGB8UI_EXT = 0x8D7D,
    eALPHA8UI_EXT = 0x8D7E,
    eINTENSITY8UI_EXT = 0x8D7F,
    eLUMINANCE8UI_EXT = 0x8D80,
    eLUMINANCE_ALPHA8UI_EXT = 0x8D81,
    eRGBA32I = 0x8D82,
    eRGBA32I_EXT = 0x8D82,
    eRGB32I = 0x8D83,
    eRGB32I_EXT = 0x8D83,
    eALPHA32I_EXT = 0x8D84,
    eINTENSITY32I_EXT = 0x8D85,
    eLUMINANCE32I_EXT = 0x8D86,
    eLUMINANCE_ALPHA32I_EXT = 0x8D87,
    eRGBA16I = 0x8D88,
    eRGBA16I_EXT = 0x8D88,
    eRGB16I = 0x8D89,
    eRGB16I_EXT = 0x8D89,
    eALPHA16I_EXT = 0x8D8A,
    eINTENSITY16I_EXT = 0x8D8B,
    eLUMINANCE16I_EXT = 0x8D8C,
    eLUMINANCE_ALPHA16I_EXT = 0x8D8D,
    eRGBA8I = 0x8D8E,
    eRGBA8I_EXT = 0x8D8E,
    eRGB8I = 0x8D8F,
    eRGB8I_EXT = 0x8D8F,
    eALPHA8I_EXT = 0x8D90,
    eINTENSITY8I_EXT = 0x8D91,
    eLUMINANCE8I_EXT = 0x8D92,
    eLUMINANCE_ALPHA8I_EXT = 0x8D93,
    eDEPTH_COMPONENT32F_NV = 0x8DAB,
    eDEPTH32F_STENCIL8_NV = 0x8DAC,
    eCOMPRESSED_RED_RGTC1 = 0x8DBB,
    eCOMPRESSED_RED_RGTC1_EXT = 0x8DBB,
    eCOMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC,
    eCOMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC,
    eCOMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD,
    eCOMPRESSED_RG_RGTC2 = 0x8DBD,
    eCOMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE,
    eCOMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE,
    eCOMPRESSED_RGBA_BPTC_UNORM = 0x8E8C,
    eCOMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C,
    eCOMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D,
    eCOMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F,
    eCOMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F,
    eR8_SNORM = 0x8F94,
    eRG8_SNORM = 0x8F95,
    eRGB8_SNORM = 0x8F96,
    eRGBA8_SNORM = 0x8F97,
    eR16_SNORM = 0x8F98,
    eR16_SNORM_EXT = 0x8F98,
    eRG16_SNORM = 0x8F99,
    eRG16_SNORM_EXT = 0x8F99,
    eRGB16_SNORM = 0x8F9A,
    eRGB16_SNORM_EXT = 0x8F9A,
    eRGBA16_SNORM = 0x8F9B,
    eRGBA16_SNORM_EXT = 0x8F9B,
    eSR8_EXT = 0x8FBD,
    eSRG8_EXT = 0x8FBE,
    eRGB10_A2UI = 0x906F,
    eCOMPRESSED_R11_EAC = 0x9270,
    eCOMPRESSED_R11_EAC_OES = 0x9270,
    eCOMPRESSED_SIGNED_R11_EAC = 0x9271,
    eCOMPRESSED_SIGNED_R11_EAC_OES = 0x9271,
    eCOMPRESSED_RG11_EAC = 0x9272,
    eCOMPRESSED_RG11_EAC_OES = 0x9272,
    eCOMPRESSED_SIGNED_RG11_EAC = 0x9273,
    eCOMPRESSED_SIGNED_RG11_EAC_OES = 0x9273,
    eCOMPRESSED_RGB8_ETC2 = 0x9274,
    eCOMPRESSED_RGB8_ETC2_OES = 0x9274,
    eCOMPRESSED_SRGB8_ETC2 = 0x9275,
    eCOMPRESSED_SRGB8_ETC2_OES = 0x9275,
    eCOMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
    eCOMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276,
    eCOMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
    eCOMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277,
    eCOMPRESSED_RGBA8_ETC2_EAC = 0x9278,
    eCOMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278,
    eCOMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
    eCOMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279,
    eCOMPRESSED_RGBA_ASTC_4x4 = 0x93B0,
    eCOMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,
    eCOMPRESSED_RGBA_ASTC_5x4 = 0x93B1,
    eCOMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,
    eCOMPRESSED_RGBA_ASTC_5x5 = 0x93B2,
    eCOMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,
    eCOMPRESSED_RGBA_ASTC_6x5 = 0x93B3,
    eCOMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,
    eCOMPRESSED_RGBA_ASTC_6x6 = 0x93B4,
    eCOMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,
    eCOMPRESSED_RGBA_ASTC_8x5 = 0x93B5,
    eCOMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,
    eCOMPRESSED_RGBA_ASTC_8x6 = 0x93B6,
    eCOMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,
    eCOMPRESSED_RGBA_ASTC_8x8 = 0x93B7,
    eCOMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,
    eCOMPRESSED_RGBA_ASTC_10x5 = 0x93B8,
    eCOMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,
    eCOMPRESSED_RGBA_ASTC_10x6 = 0x93B9,
    eCOMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,
    eCOMPRESSED_RGBA_ASTC_10x8 = 0x93BA,
    eCOMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,
    eCOMPRESSED_RGBA_ASTC_10x10 = 0x93BB,
    eCOMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,
    eCOMPRESSED_RGBA_ASTC_12x10 = 0x93BC,
    eCOMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,
    eCOMPRESSED_RGBA_ASTC_12x12 = 0x93BD,
    eCOMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,
    eCOMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0,
    eCOMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1,
    eCOMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2,
    eCOMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3,
    eCOMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4,
    eCOMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5,
    eCOMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6,
    eCOMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7,
    eCOMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8,
    eCOMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8,
    eCOMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9
};
enum class MeshMode1 : GLenum {
    ePOINT = 0x1B00,
    eLINE = 0x1B01
};
enum class AlphaFunction : GLenum {
    eNEVER = 0x0200,
    eLESS = 0x0201,
    eEQUAL = 0x0202,
    eLEQUAL = 0x0203,
    eGREATER = 0x0204,
    eNOTEQUAL = 0x0205,
    eGEQUAL = 0x0206,
    eALWAYS = 0x0207
};
enum class LightName : GLenum {
    eLIGHT0 = 0x4000,
    eLIGHT1 = 0x4001,
    eLIGHT2 = 0x4002,
    eLIGHT3 = 0x4003,
    eLIGHT4 = 0x4004,
    eLIGHT5 = 0x4005,
    eLIGHT6 = 0x4006,
    eLIGHT7 = 0x4007,
    eFRAGMENT_LIGHT0_SGIX = 0x840C,
    eFRAGMENT_LIGHT1_SGIX = 0x840D,
    eFRAGMENT_LIGHT2_SGIX = 0x840E,
    eFRAGMENT_LIGHT3_SGIX = 0x840F,
    eFRAGMENT_LIGHT4_SGIX = 0x8410,
    eFRAGMENT_LIGHT5_SGIX = 0x8411,
    eFRAGMENT_LIGHT6_SGIX = 0x8412,
    eFRAGMENT_LIGHT7_SGIX = 0x8413
};
enum class TriangleFace : GLenum {
    eFRONT = 0x0404,
    eBACK = 0x0405,
    eFRONT_AND_BACK = 0x0408
};
enum class ShadingModel : GLenum {
    eFLAT = 0x1D00,
    eSMOOTH = 0x1D01
};
enum class PixelFormat : GLenum {
    eUNSIGNED_SHORT = 0x1403,
    eUNSIGNED_INT = 0x1405,
    eCOLOR_INDEX = 0x1900,
    eSTENCIL_INDEX = 0x1901,
    eDEPTH_COMPONENT = 0x1902,
    eRED = 0x1903,
    eRED_EXT = 0x1903,
    eGREEN = 0x1904,
    eBLUE = 0x1905,
    eALPHA = 0x1906,
    eRGB = 0x1907,
    eRGBA = 0x1908,
    eLUMINANCE = 0x1909,
    eLUMINANCE_ALPHA = 0x190A,
    eABGR_EXT = 0x8000,
    eCMYK_EXT = 0x800C,
    eCMYKA_EXT = 0x800D,
    eBGR = 0x80E0,
    eBGR_EXT = 0x80E0,
    eBGRA = 0x80E1,
    eBGRA_EXT = 0x80E1,
    eBGRA_IMG = 0x80E1,
    eYCRCB_422_SGIX = 0x81BB,
    eYCRCB_444_SGIX = 0x81BC,
    eRG = 0x8227,
    eRG_INTEGER = 0x8228,
    eDEPTH_STENCIL = 0x84F9,
    eRED_INTEGER = 0x8D94,
    eGREEN_INTEGER = 0x8D95,
    eBLUE_INTEGER = 0x8D96,
    eRGB_INTEGER = 0x8D98,
    eRGBA_INTEGER = 0x8D99,
    eBGR_INTEGER = 0x8D9A,
    eBGRA_INTEGER = 0x8D9B
};
enum class HintTarget : GLenum {
    ePERSPECTIVE_CORRECTION_HINT = 0x0C50,
    ePOINT_SMOOTH_HINT = 0x0C51,
    eLINE_SMOOTH_HINT = 0x0C52,
    ePOLYGON_SMOOTH_HINT = 0x0C53,
    eFOG_HINT = 0x0C54,
    ePACK_CMYK_HINT_EXT = 0x800E,
    eUNPACK_CMYK_HINT_EXT = 0x800F,
    ePHONG_HINT_WIN = 0x80EB,
    eCLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0,
    eTEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E,
    eGENERATE_MIPMAP_HINT = 0x8192,
    eGENERATE_MIPMAP_HINT_SGIS = 0x8192,
    ePROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
    eCONVOLUTION_HINT_SGIX = 0x8316,
    eSCALEBIAS_HINT_SGIX = 0x8322,
    eLINE_QUALITY_HINT_SGIX = 0x835B,
    eVERTEX_PRECLIP_SGIX = 0x83EE,
    eVERTEX_PRECLIP_HINT_SGIX = 0x83EF,
    eTEXTURE_COMPRESSION_HINT = 0x84EF,
    eTEXTURE_COMPRESSION_HINT_ARB = 0x84EF,
    eVERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F,
    eMULTISAMPLE_FILTER_HINT_NV = 0x8534,
    eTRANSFORM_HINT_APPLE = 0x85B1,
    eTEXTURE_STORAGE_HINT_APPLE = 0x85BC,
    eFRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
    eFRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B,
    eFRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B,
    eBINNING_CONTROL_HINT_QCOM = 0x8FB0,
    ePREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8,
    eCONSERVE_MEMORY_HINT_PGI = 0x1A1FD,
    eRECLAIM_MEMORY_HINT_PGI = 0x1A1FE,
    eNATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203,
    eNATIVE_GRAPHICS_END_HINT_PGI = 0x1A204,
    eALWAYS_FAST_HINT_PGI = 0x1A20C,
    eALWAYS_SOFT_HINT_PGI = 0x1A20D,
    eALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E,
    eALLOW_DRAW_WIN_HINT_PGI = 0x1A20F,
    eALLOW_DRAW_FRG_HINT_PGI = 0x1A210,
    eALLOW_DRAW_MEM_HINT_PGI = 0x1A211,
    eSTRICT_DEPTHFUNC_HINT_PGI = 0x1A216,
    eSTRICT_LIGHTING_HINT_PGI = 0x1A217,
    eSTRICT_SCISSOR_HINT_PGI = 0x1A218,
    eFULL_STIPPLE_HINT_PGI = 0x1A219,
    eCLIP_NEAR_HINT_PGI = 0x1A220,
    eCLIP_FAR_HINT_PGI = 0x1A221,
    eWIDE_LINE_HINT_PGI = 0x1A222,
    eBACK_NORMALS_HINT_PGI = 0x1A223,
    eVERTEX_DATA_HINT_PGI = 0x1A22A,
    eVERTEX_CONSISTENT_HINT_PGI = 0x1A22B,
    eMATERIAL_SIDE_HINT_PGI = 0x1A22C,
    eMAX_VERTEX_HINT_PGI = 0x1A22D
};
enum class FogParameter : GLenum {
    eFOG_INDEX = 0x0B61,
    eFOG_DENSITY = 0x0B62,
    eFOG_START = 0x0B63,
    eFOG_END = 0x0B64,
    eFOG_MODE = 0x0B65,
    eFOG_COLOR = 0x0B66,
    eFOG_OFFSET_VALUE_SGIX = 0x8199
};
enum class ReadBufferMode : GLenum {
    eNONE = 0,
    eNONE_OES = 0,
    eFRONT_LEFT = 0x0400,
    eFRONT_RIGHT = 0x0401,
    eBACK_LEFT = 0x0402,
    eBACK_RIGHT = 0x0403,
    eFRONT = 0x0404,
    eBACK = 0x0405,
    eLEFT = 0x0406,
    eRIGHT = 0x0407,
    eAUX0 = 0x0409,
    eAUX1 = 0x040A,
    eAUX2 = 0x040B,
    eAUX3 = 0x040C,
    eCOLOR_ATTACHMENT0 = 0x8CE0,
    eCOLOR_ATTACHMENT1 = 0x8CE1,
    eCOLOR_ATTACHMENT2 = 0x8CE2,
    eCOLOR_ATTACHMENT3 = 0x8CE3,
    eCOLOR_ATTACHMENT4 = 0x8CE4,
    eCOLOR_ATTACHMENT5 = 0x8CE5,
    eCOLOR_ATTACHMENT6 = 0x8CE6,
    eCOLOR_ATTACHMENT7 = 0x8CE7,
    eCOLOR_ATTACHMENT8 = 0x8CE8,
    eCOLOR_ATTACHMENT9 = 0x8CE9,
    eCOLOR_ATTACHMENT10 = 0x8CEA,
    eCOLOR_ATTACHMENT11 = 0x8CEB,
    eCOLOR_ATTACHMENT12 = 0x8CEC,
    eCOLOR_ATTACHMENT13 = 0x8CED,
    eCOLOR_ATTACHMENT14 = 0x8CEE,
    eCOLOR_ATTACHMENT15 = 0x8CEF
};
enum class PixelTransferParameter : GLenum {
    eMAP_COLOR = 0x0D10,
    eMAP_STENCIL = 0x0D11,
    eINDEX_SHIFT = 0x0D12,
    eINDEX_OFFSET = 0x0D13,
    eRED_SCALE = 0x0D14,
    eRED_BIAS = 0x0D15,
    eGREEN_SCALE = 0x0D18,
    eGREEN_BIAS = 0x0D19,
    eBLUE_SCALE = 0x0D1A,
    eBLUE_BIAS = 0x0D1B,
    eALPHA_SCALE = 0x0D1C,
    eALPHA_BIAS = 0x0D1D,
    eDEPTH_SCALE = 0x0D1E,
    eDEPTH_BIAS = 0x0D1F,
    ePOST_CONVOLUTION_RED_SCALE = 0x801C,
    ePOST_CONVOLUTION_RED_SCALE_EXT = 0x801C,
    ePOST_CONVOLUTION_GREEN_SCALE = 0x801D,
    ePOST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D,
    ePOST_CONVOLUTION_BLUE_SCALE = 0x801E,
    ePOST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E,
    ePOST_CONVOLUTION_ALPHA_SCALE = 0x801F,
    ePOST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F,
    ePOST_CONVOLUTION_RED_BIAS = 0x8020,
    ePOST_CONVOLUTION_RED_BIAS_EXT = 0x8020,
    ePOST_CONVOLUTION_GREEN_BIAS = 0x8021,
    ePOST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021,
    ePOST_CONVOLUTION_BLUE_BIAS = 0x8022,
    ePOST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022,
    ePOST_CONVOLUTION_ALPHA_BIAS = 0x8023,
    ePOST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023,
    ePOST_COLOR_MATRIX_RED_SCALE = 0x80B4,
    ePOST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4,
    ePOST_COLOR_MATRIX_GREEN_SCALE = 0x80B5,
    ePOST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5,
    ePOST_COLOR_MATRIX_BLUE_SCALE = 0x80B6,
    ePOST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6,
    ePOST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7,
    ePOST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7,
    ePOST_COLOR_MATRIX_RED_BIAS = 0x80B8,
    ePOST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8,
    ePOST_COLOR_MATRIX_GREEN_BIAS = 0x80B9,
    ePOST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9,
    ePOST_COLOR_MATRIX_BLUE_BIAS = 0x80BA,
    ePOST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA,
    ePOST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB,
    ePOST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB
};
enum class GetPName : GLenum {
    eCURRENT_COLOR = 0x0B00,
    eCURRENT_INDEX = 0x0B01,
    eCURRENT_NORMAL = 0x0B02,
    eCURRENT_TEXTURE_COORDS = 0x0B03,
    eCURRENT_RASTER_COLOR = 0x0B04,
    eCURRENT_RASTER_INDEX = 0x0B05,
    eCURRENT_RASTER_TEXTURE_COORDS = 0x0B06,
    eCURRENT_RASTER_POSITION = 0x0B07,
    eCURRENT_RASTER_POSITION_VALID = 0x0B08,
    eCURRENT_RASTER_DISTANCE = 0x0B09,
    ePOINT_SMOOTH = 0x0B10,
    ePOINT_SIZE = 0x0B11,
    ePOINT_SIZE_RANGE = 0x0B12,
    eSMOOTH_POINT_SIZE_RANGE = 0x0B12,
    ePOINT_SIZE_GRANULARITY = 0x0B13,
    eSMOOTH_POINT_SIZE_GRANULARITY = 0x0B13,
    eLINE_SMOOTH = 0x0B20,
    eLINE_WIDTH = 0x0B21,
    eLINE_WIDTH_RANGE = 0x0B22,
    eSMOOTH_LINE_WIDTH_RANGE = 0x0B22,
    eLINE_WIDTH_GRANULARITY = 0x0B23,
    eSMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23,
    eLINE_STIPPLE = 0x0B24,
    eLINE_STIPPLE_PATTERN = 0x0B25,
    eLINE_STIPPLE_REPEAT = 0x0B26,
    eLIST_MODE = 0x0B30,
    eMAX_LIST_NESTING = 0x0B31,
    eLIST_BASE = 0x0B32,
    eLIST_INDEX = 0x0B33,
    ePOLYGON_MODE = 0x0B40,
    ePOLYGON_SMOOTH = 0x0B41,
    ePOLYGON_STIPPLE = 0x0B42,
    eEDGE_FLAG = 0x0B43,
    eCULL_FACE = 0x0B44,
    eCULL_FACE_MODE = 0x0B45,
    eFRONT_FACE = 0x0B46,
    eLIGHTING = 0x0B50,
    eLIGHT_MODEL_LOCAL_VIEWER = 0x0B51,
    eLIGHT_MODEL_TWO_SIDE = 0x0B52,
    eLIGHT_MODEL_AMBIENT = 0x0B53,
    eSHADE_MODEL = 0x0B54,
    eCOLOR_MATERIAL_FACE = 0x0B55,
    eCOLOR_MATERIAL_PARAMETER = 0x0B56,
    eCOLOR_MATERIAL = 0x0B57,
    eFOG = 0x0B60,
    eFOG_INDEX = 0x0B61,
    eFOG_DENSITY = 0x0B62,
    eFOG_START = 0x0B63,
    eFOG_END = 0x0B64,
    eFOG_MODE = 0x0B65,
    eFOG_COLOR = 0x0B66,
    eDEPTH_RANGE = 0x0B70,
    eDEPTH_TEST = 0x0B71,
    eDEPTH_WRITEMASK = 0x0B72,
    eDEPTH_CLEAR_VALUE = 0x0B73,
    eDEPTH_FUNC = 0x0B74,
    eACCUM_CLEAR_VALUE = 0x0B80,
    eSTENCIL_TEST = 0x0B90,
    eSTENCIL_CLEAR_VALUE = 0x0B91,
    eSTENCIL_FUNC = 0x0B92,
    eSTENCIL_VALUE_MASK = 0x0B93,
    eSTENCIL_FAIL = 0x0B94,
    eSTENCIL_PASS_DEPTH_FAIL = 0x0B95,
    eSTENCIL_PASS_DEPTH_PASS = 0x0B96,
    eSTENCIL_REF = 0x0B97,
    eSTENCIL_WRITEMASK = 0x0B98,
    eMATRIX_MODE = 0x0BA0,
    eNORMALIZE = 0x0BA1,
    eVIEWPORT = 0x0BA2,
    eMODELVIEW_STACK_DEPTH = 0x0BA3,
    eMODELVIEW0_STACK_DEPTH_EXT = 0x0BA3,
    ePROJECTION_STACK_DEPTH = 0x0BA4,
    eTEXTURE_STACK_DEPTH = 0x0BA5,
    eMODELVIEW_MATRIX = 0x0BA6,
    eMODELVIEW0_MATRIX_EXT = 0x0BA6,
    ePROJECTION_MATRIX = 0x0BA7,
    eTEXTURE_MATRIX = 0x0BA8,
    eATTRIB_STACK_DEPTH = 0x0BB0,
    eCLIENT_ATTRIB_STACK_DEPTH = 0x0BB1,
    eALPHA_TEST = 0x0BC0,
    eALPHA_TEST_QCOM = 0x0BC0,
    eALPHA_TEST_FUNC = 0x0BC1,
    eALPHA_TEST_FUNC_QCOM = 0x0BC1,
    eALPHA_TEST_REF = 0x0BC2,
    eALPHA_TEST_REF_QCOM = 0x0BC2,
    eDITHER = 0x0BD0,
    eBLEND_DST = 0x0BE0,
    eBLEND_SRC = 0x0BE1,
    eBLEND = 0x0BE2,
    eLOGIC_OP_MODE = 0x0BF0,
    eINDEX_LOGIC_OP = 0x0BF1,
    eLOGIC_OP = 0x0BF1,
    eCOLOR_LOGIC_OP = 0x0BF2,
    eAUX_BUFFERS = 0x0C00,
    eDRAW_BUFFER = 0x0C01,
    eDRAW_BUFFER_EXT = 0x0C01,
    eREAD_BUFFER = 0x0C02,
    eREAD_BUFFER_EXT = 0x0C02,
    eREAD_BUFFER_NV = 0x0C02,
    eSCISSOR_BOX = 0x0C10,
    eSCISSOR_TEST = 0x0C11,
    eINDEX_CLEAR_VALUE = 0x0C20,
    eINDEX_WRITEMASK = 0x0C21,
    eCOLOR_CLEAR_VALUE = 0x0C22,
    eCOLOR_WRITEMASK = 0x0C23,
    eINDEX_MODE = 0x0C30,
    eRGBA_MODE = 0x0C31,
    eDOUBLEBUFFER = 0x0C32,
    eSTEREO = 0x0C33,
    eRENDER_MODE = 0x0C40,
    ePERSPECTIVE_CORRECTION_HINT = 0x0C50,
    ePOINT_SMOOTH_HINT = 0x0C51,
    eLINE_SMOOTH_HINT = 0x0C52,
    ePOLYGON_SMOOTH_HINT = 0x0C53,
    eFOG_HINT = 0x0C54,
    eTEXTURE_GEN_S = 0x0C60,
    eTEXTURE_GEN_T = 0x0C61,
    eTEXTURE_GEN_R = 0x0C62,
    eTEXTURE_GEN_Q = 0x0C63,
    ePIXEL_MAP_I_TO_I_SIZE = 0x0CB0,
    ePIXEL_MAP_S_TO_S_SIZE = 0x0CB1,
    ePIXEL_MAP_I_TO_R_SIZE = 0x0CB2,
    ePIXEL_MAP_I_TO_G_SIZE = 0x0CB3,
    ePIXEL_MAP_I_TO_B_SIZE = 0x0CB4,
    ePIXEL_MAP_I_TO_A_SIZE = 0x0CB5,
    ePIXEL_MAP_R_TO_R_SIZE = 0x0CB6,
    ePIXEL_MAP_G_TO_G_SIZE = 0x0CB7,
    ePIXEL_MAP_B_TO_B_SIZE = 0x0CB8,
    ePIXEL_MAP_A_TO_A_SIZE = 0x0CB9,
    eUNPACK_SWAP_BYTES = 0x0CF0,
    eUNPACK_LSB_FIRST = 0x0CF1,
    eUNPACK_ROW_LENGTH = 0x0CF2,
    eUNPACK_SKIP_ROWS = 0x0CF3,
    eUNPACK_SKIP_PIXELS = 0x0CF4,
    eUNPACK_ALIGNMENT = 0x0CF5,
    ePACK_SWAP_BYTES = 0x0D00,
    ePACK_LSB_FIRST = 0x0D01,
    ePACK_ROW_LENGTH = 0x0D02,
    ePACK_SKIP_ROWS = 0x0D03,
    ePACK_SKIP_PIXELS = 0x0D04,
    ePACK_ALIGNMENT = 0x0D05,
    eMAP_COLOR = 0x0D10,
    eMAP_STENCIL = 0x0D11,
    eINDEX_SHIFT = 0x0D12,
    eINDEX_OFFSET = 0x0D13,
    eRED_SCALE = 0x0D14,
    eRED_BIAS = 0x0D15,
    eZOOM_X = 0x0D16,
    eZOOM_Y = 0x0D17,
    eGREEN_SCALE = 0x0D18,
    eGREEN_BIAS = 0x0D19,
    eBLUE_SCALE = 0x0D1A,
    eBLUE_BIAS = 0x0D1B,
    eALPHA_SCALE = 0x0D1C,
    eALPHA_BIAS = 0x0D1D,
    eDEPTH_SCALE = 0x0D1E,
    eDEPTH_BIAS = 0x0D1F,
    eMAX_EVAL_ORDER = 0x0D30,
    eMAX_LIGHTS = 0x0D31,
    eMAX_CLIP_PLANES = 0x0D32,
    eMAX_CLIP_DISTANCES = 0x0D32,
    eMAX_TEXTURE_SIZE = 0x0D33,
    eMAX_PIXEL_MAP_TABLE = 0x0D34,
    eMAX_ATTRIB_STACK_DEPTH = 0x0D35,
    eMAX_MODELVIEW_STACK_DEPTH = 0x0D36,
    eMAX_NAME_STACK_DEPTH = 0x0D37,
    eMAX_PROJECTION_STACK_DEPTH = 0x0D38,
    eMAX_TEXTURE_STACK_DEPTH = 0x0D39,
    eMAX_VIEWPORT_DIMS = 0x0D3A,
    eMAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B,
    eSUBPIXEL_BITS = 0x0D50,
    eINDEX_BITS = 0x0D51,
    eRED_BITS = 0x0D52,
    eGREEN_BITS = 0x0D53,
    eBLUE_BITS = 0x0D54,
    eALPHA_BITS = 0x0D55,
    eDEPTH_BITS = 0x0D56,
    eSTENCIL_BITS = 0x0D57,
    eACCUM_RED_BITS = 0x0D58,
    eACCUM_GREEN_BITS = 0x0D59,
    eACCUM_BLUE_BITS = 0x0D5A,
    eACCUM_ALPHA_BITS = 0x0D5B,
    eNAME_STACK_DEPTH = 0x0D70,
    eAUTO_NORMAL = 0x0D80,
    eMAP1_COLOR_4 = 0x0D90,
    eMAP1_INDEX = 0x0D91,
    eMAP1_NORMAL = 0x0D92,
    eMAP1_TEXTURE_COORD_1 = 0x0D93,
    eMAP1_TEXTURE_COORD_2 = 0x0D94,
    eMAP1_TEXTURE_COORD_3 = 0x0D95,
    eMAP1_TEXTURE_COORD_4 = 0x0D96,
    eMAP1_VERTEX_3 = 0x0D97,
    eMAP1_VERTEX_4 = 0x0D98,
    eMAP2_COLOR_4 = 0x0DB0,
    eMAP2_INDEX = 0x0DB1,
    eMAP2_NORMAL = 0x0DB2,
    eMAP2_TEXTURE_COORD_1 = 0x0DB3,
    eMAP2_TEXTURE_COORD_2 = 0x0DB4,
    eMAP2_TEXTURE_COORD_3 = 0x0DB5,
    eMAP2_TEXTURE_COORD_4 = 0x0DB6,
    eMAP2_VERTEX_3 = 0x0DB7,
    eMAP2_VERTEX_4 = 0x0DB8,
    eMAP1_GRID_DOMAIN = 0x0DD0,
    eMAP1_GRID_SEGMENTS = 0x0DD1,
    eMAP2_GRID_DOMAIN = 0x0DD2,
    eMAP2_GRID_SEGMENTS = 0x0DD3,
    eTEXTURE_1D = 0x0DE0,
    eTEXTURE_2D = 0x0DE1,
    eFEEDBACK_BUFFER_SIZE = 0x0DF1,
    eFEEDBACK_BUFFER_TYPE = 0x0DF2,
    eSELECTION_BUFFER_SIZE = 0x0DF4,
    ePOLYGON_OFFSET_UNITS = 0x2A00,
    ePOLYGON_OFFSET_POINT = 0x2A01,
    ePOLYGON_OFFSET_LINE = 0x2A02,
    eCLIP_PLANE0 = 0x3000,
    eCLIP_PLANE1 = 0x3001,
    eCLIP_PLANE2 = 0x3002,
    eCLIP_PLANE3 = 0x3003,
    eCLIP_PLANE4 = 0x3004,
    eCLIP_PLANE5 = 0x3005,
    eLIGHT0 = 0x4000,
    eLIGHT1 = 0x4001,
    eLIGHT2 = 0x4002,
    eLIGHT3 = 0x4003,
    eLIGHT4 = 0x4004,
    eLIGHT5 = 0x4005,
    eLIGHT6 = 0x4006,
    eLIGHT7 = 0x4007,
    eBLEND_COLOR = 0x8005,
    eBLEND_COLOR_EXT = 0x8005,
    eBLEND_EQUATION = 0x8009,
    eBLEND_EQUATION_EXT = 0x8009,
    eBLEND_EQUATION_OES = 0x8009,
    eBLEND_EQUATION_RGB = 0x8009,
    ePACK_CMYK_HINT_EXT = 0x800E,
    eUNPACK_CMYK_HINT_EXT = 0x800F,
    eCONVOLUTION_1D_EXT = 0x8010,
    eCONVOLUTION_2D_EXT = 0x8011,
    eSEPARABLE_2D_EXT = 0x8012,
    ePOST_CONVOLUTION_RED_SCALE_EXT = 0x801C,
    ePOST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D,
    ePOST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E,
    ePOST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F,
    ePOST_CONVOLUTION_RED_BIAS_EXT = 0x8020,
    ePOST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021,
    ePOST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022,
    ePOST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023,
    eHISTOGRAM_EXT = 0x8024,
    eMINMAX_EXT = 0x802E,
    ePOLYGON_OFFSET_FILL = 0x8037,
    ePOLYGON_OFFSET_FACTOR = 0x8038,
    ePOLYGON_OFFSET_BIAS_EXT = 0x8039,
    eRESCALE_NORMAL_EXT = 0x803A,
    eTEXTURE_BINDING_1D = 0x8068,
    eTEXTURE_BINDING_2D = 0x8069,
    eTEXTURE_3D_BINDING_EXT = 0x806A,
    eTEXTURE_BINDING_3D = 0x806A,
    ePACK_SKIP_IMAGES = 0x806B,
    ePACK_SKIP_IMAGES_EXT = 0x806B,
    ePACK_IMAGE_HEIGHT = 0x806C,
    ePACK_IMAGE_HEIGHT_EXT = 0x806C,
    eUNPACK_SKIP_IMAGES = 0x806D,
    eUNPACK_SKIP_IMAGES_EXT = 0x806D,
    eUNPACK_IMAGE_HEIGHT = 0x806E,
    eUNPACK_IMAGE_HEIGHT_EXT = 0x806E,
    eTEXTURE_3D_EXT = 0x806F,
    eMAX_3D_TEXTURE_SIZE = 0x8073,
    eMAX_3D_TEXTURE_SIZE_EXT = 0x8073,
    eVERTEX_ARRAY = 0x8074,
    eNORMAL_ARRAY = 0x8075,
    eCOLOR_ARRAY = 0x8076,
    eINDEX_ARRAY = 0x8077,
    eTEXTURE_COORD_ARRAY = 0x8078,
    eEDGE_FLAG_ARRAY = 0x8079,
    eVERTEX_ARRAY_SIZE = 0x807A,
    eVERTEX_ARRAY_TYPE = 0x807B,
    eVERTEX_ARRAY_STRIDE = 0x807C,
    eVERTEX_ARRAY_COUNT_EXT = 0x807D,
    eNORMAL_ARRAY_TYPE = 0x807E,
    eNORMAL_ARRAY_STRIDE = 0x807F,
    eNORMAL_ARRAY_COUNT_EXT = 0x8080,
    eCOLOR_ARRAY_SIZE = 0x8081,
    eCOLOR_ARRAY_TYPE = 0x8082,
    eCOLOR_ARRAY_STRIDE = 0x8083,
    eCOLOR_ARRAY_COUNT_EXT = 0x8084,
    eINDEX_ARRAY_TYPE = 0x8085,
    eINDEX_ARRAY_STRIDE = 0x8086,
    eINDEX_ARRAY_COUNT_EXT = 0x8087,
    eTEXTURE_COORD_ARRAY_SIZE = 0x8088,
    eTEXTURE_COORD_ARRAY_TYPE = 0x8089,
    eTEXTURE_COORD_ARRAY_STRIDE = 0x808A,
    eTEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B,
    eEDGE_FLAG_ARRAY_STRIDE = 0x808C,
    eEDGE_FLAG_ARRAY_COUNT_EXT = 0x808D,
    eINTERLACE_SGIX = 0x8094,
    eDETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096,
    eMULTISAMPLE_SGIS = 0x809D,
    eSAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
    eSAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
    eSAMPLE_MASK_SGIS = 0x80A0,
    eSAMPLE_BUFFERS = 0x80A8,
    eSAMPLE_BUFFERS_SGIS = 0x80A8,
    eSAMPLES = 0x80A9,
    eSAMPLES_SGIS = 0x80A9,
    eSAMPLE_COVERAGE_VALUE = 0x80AA,
    eSAMPLE_MASK_VALUE_SGIS = 0x80AA,
    eSAMPLE_COVERAGE_INVERT = 0x80AB,
    eSAMPLE_MASK_INVERT_SGIS = 0x80AB,
    eSAMPLE_PATTERN_SGIS = 0x80AC,
    eCOLOR_MATRIX_SGI = 0x80B1,
    eCOLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2,
    eMAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3,
    ePOST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4,
    ePOST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5,
    ePOST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6,
    ePOST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7,
    ePOST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8,
    ePOST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9,
    ePOST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA,
    ePOST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB,
    eTEXTURE_COLOR_TABLE_SGI = 0x80BC,
    eBLEND_DST_RGB = 0x80C8,
    eBLEND_SRC_RGB = 0x80C9,
    eBLEND_DST_ALPHA = 0x80CA,
    eBLEND_SRC_ALPHA = 0x80CB,
    eCOLOR_TABLE_SGI = 0x80D0,
    ePOST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
    ePOST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
    eMAX_ELEMENTS_VERTICES = 0x80E8,
    eMAX_ELEMENTS_INDICES = 0x80E9,
    ePOINT_SIZE_MIN = 0x8126,
    ePOINT_SIZE_MIN_ARB = 0x8126,
    ePOINT_SIZE_MIN_EXT = 0x8126,
    ePOINT_SIZE_MIN_SGIS = 0x8126,
    ePOINT_SIZE_MAX = 0x8127,
    ePOINT_SIZE_MAX_ARB = 0x8127,
    ePOINT_SIZE_MAX_EXT = 0x8127,
    ePOINT_SIZE_MAX_SGIS = 0x8127,
    ePOINT_FADE_THRESHOLD_SIZE = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_ARB = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_EXT = 0x8128,
    ePOINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128,
    eDISTANCE_ATTENUATION_EXT = 0x8129,
    eDISTANCE_ATTENUATION_SGIS = 0x8129,
    ePOINT_DISTANCE_ATTENUATION = 0x8129,
    ePOINT_DISTANCE_ATTENUATION_ARB = 0x8129,
    eFOG_FUNC_POINTS_SGIS = 0x812B,
    eMAX_FOG_FUNC_POINTS_SGIS = 0x812C,
    ePACK_SKIP_VOLUMES_SGIS = 0x8130,
    ePACK_IMAGE_DEPTH_SGIS = 0x8131,
    eUNPACK_SKIP_VOLUMES_SGIS = 0x8132,
    eUNPACK_IMAGE_DEPTH_SGIS = 0x8133,
    eTEXTURE_4D_SGIS = 0x8134,
    eMAX_4D_TEXTURE_SIZE_SGIS = 0x8138,
    ePIXEL_TEX_GEN_SGIX = 0x8139,
    ePIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E,
    ePIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F,
    ePIXEL_TILE_WIDTH_SGIX = 0x8140,
    ePIXEL_TILE_HEIGHT_SGIX = 0x8141,
    ePIXEL_TILE_GRID_WIDTH_SGIX = 0x8142,
    ePIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143,
    ePIXEL_TILE_GRID_DEPTH_SGIX = 0x8144,
    ePIXEL_TILE_CACHE_SIZE_SGIX = 0x8145,
    eSPRITE_SGIX = 0x8148,
    eSPRITE_MODE_SGIX = 0x8149,
    eSPRITE_AXIS_SGIX = 0x814A,
    eSPRITE_TRANSLATION_SGIX = 0x814B,
    eTEXTURE_4D_BINDING_SGIS = 0x814F,
    eMAX_CLIPMAP_DEPTH_SGIX = 0x8177,
    eMAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178,
    ePOST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B,
    ePOST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C,
    eREFERENCE_PLANE_SGIX = 0x817D,
    eREFERENCE_PLANE_EQUATION_SGIX = 0x817E,
    eIR_INSTRUMENT1_SGIX = 0x817F,
    eINSTRUMENT_MEASUREMENTS_SGIX = 0x8181,
    eCALLIGRAPHIC_FRAGMENT_SGIX = 0x8183,
    eFRAMEZOOM_SGIX = 0x818B,
    eFRAMEZOOM_FACTOR_SGIX = 0x818C,
    eMAX_FRAMEZOOM_FACTOR_SGIX = 0x818D,
    eGENERATE_MIPMAP_HINT_SGIS = 0x8192,
    eDEFORMATIONS_MASK_SGIX = 0x8196,
    eFOG_OFFSET_SGIX = 0x8198,
    eFOG_OFFSET_VALUE_SGIX = 0x8199,
    eLIGHT_MODEL_COLOR_CONTROL = 0x81F8,
    eSHARED_TEXTURE_PALETTE_EXT = 0x81FB,
    eMAJOR_VERSION = 0x821B,
    eMINOR_VERSION = 0x821C,
    eNUM_EXTENSIONS = 0x821D,
    eCONTEXT_FLAGS = 0x821E,
    ePROGRAM_PIPELINE_BINDING = 0x825A,
    eMAX_VIEWPORTS = 0x825B,
    eVIEWPORT_SUBPIXEL_BITS = 0x825C,
    eVIEWPORT_BOUNDS_RANGE = 0x825D,
    eLAYER_PROVOKING_VERTEX = 0x825E,
    eVIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
    eMAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
    eMAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
    eMAX_COMPUTE_ATOMIC_COUNTERS = 0x8265,
    eMAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
    eMAX_DEBUG_GROUP_STACK_DEPTH = 0x826C,
    eDEBUG_GROUP_STACK_DEPTH = 0x826D,
    eMAX_UNIFORM_LOCATIONS = 0x826E,
    eVERTEX_BINDING_DIVISOR = 0x82D6,
    eVERTEX_BINDING_OFFSET = 0x82D7,
    eVERTEX_BINDING_STRIDE = 0x82D8,
    eMAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
    eMAX_VERTEX_ATTRIB_BINDINGS = 0x82DA,
    eMAX_LABEL_LENGTH = 0x82E8,
    eCONVOLUTION_HINT_SGIX = 0x8316,
    eASYNC_MARKER_SGIX = 0x8329,
    ePIXEL_TEX_GEN_MODE_SGIX = 0x832B,
    eASYNC_HISTOGRAM_SGIX = 0x832C,
    eMAX_ASYNC_HISTOGRAM_SGIX = 0x832D,
    ePIXEL_TEXTURE_SGIS = 0x8353,
    eASYNC_TEX_IMAGE_SGIX = 0x835C,
    eASYNC_DRAW_PIXELS_SGIX = 0x835D,
    eASYNC_READ_PIXELS_SGIX = 0x835E,
    eMAX_ASYNC_TEX_IMAGE_SGIX = 0x835F,
    eMAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360,
    eMAX_ASYNC_READ_PIXELS_SGIX = 0x8361,
    eVERTEX_PRECLIP_SGIX = 0x83EE,
    eVERTEX_PRECLIP_HINT_SGIX = 0x83EF,
    eFRAGMENT_LIGHTING_SGIX = 0x8400,
    eFRAGMENT_COLOR_MATERIAL_SGIX = 0x8401,
    eFRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402,
    eFRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403,
    eMAX_FRAGMENT_LIGHTS_SGIX = 0x8404,
    eMAX_ACTIVE_LIGHTS_SGIX = 0x8405,
    eLIGHT_ENV_MODE_SGIX = 0x8407,
    eFRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408,
    eFRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409,
    eFRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A,
    eFRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B,
    eFRAGMENT_LIGHT0_SGIX = 0x840C,
    ePACK_RESAMPLE_SGIX = 0x842E,
    eUNPACK_RESAMPLE_SGIX = 0x842F,
    eALIASED_POINT_SIZE_RANGE = 0x846D,
    eALIASED_LINE_WIDTH_RANGE = 0x846E,
    eACTIVE_TEXTURE = 0x84E0,
    eMAX_RENDERBUFFER_SIZE = 0x84E8,
    eTEXTURE_COMPRESSION_HINT = 0x84EF,
    eTEXTURE_BINDING_RECTANGLE = 0x84F6,
    eTEXTURE_BINDING_RECTANGLE_ARB = 0x84F6,
    eTEXTURE_BINDING_RECTANGLE_NV = 0x84F6,
    eMAX_RECTANGLE_TEXTURE_SIZE = 0x84F8,
    eMAX_TEXTURE_LOD_BIAS = 0x84FD,
    eTEXTURE_BINDING_CUBE_MAP = 0x8514,
    eTEXTURE_BINDING_CUBE_MAP_ARB = 0x8514,
    eTEXTURE_BINDING_CUBE_MAP_EXT = 0x8514,
    eTEXTURE_BINDING_CUBE_MAP_OES = 0x8514,
    eMAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
    eMAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C,
    eMAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C,
    eMAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C,
    ePACK_SUBSAMPLE_RATE_SGIX = 0x85A0,
    eUNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1,
    eVERTEX_ARRAY_BINDING = 0x85B5,
    ePROGRAM_POINT_SIZE = 0x8642,
    eNUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
    eCOMPRESSED_TEXTURE_FORMATS = 0x86A3,
    eNUM_PROGRAM_BINARY_FORMATS = 0x87FE,
    ePROGRAM_BINARY_FORMATS = 0x87FF,
    eSTENCIL_BACK_FUNC = 0x8800,
    eSTENCIL_BACK_FAIL = 0x8801,
    eSTENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,
    eSTENCIL_BACK_PASS_DEPTH_PASS = 0x8803,
    eMAX_DRAW_BUFFERS = 0x8824,
    eBLEND_EQUATION_ALPHA = 0x883D,
    eMAX_VERTEX_ATTRIBS = 0x8869,
    eMAX_TEXTURE_IMAGE_UNITS = 0x8872,
    eARRAY_BUFFER_BINDING = 0x8894,
    eELEMENT_ARRAY_BUFFER_BINDING = 0x8895,
    ePIXEL_PACK_BUFFER_BINDING = 0x88ED,
    ePIXEL_UNPACK_BUFFER_BINDING = 0x88EF,
    eMAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC,
    eMAX_ARRAY_TEXTURE_LAYERS = 0x88FF,
    eMIN_PROGRAM_TEXEL_OFFSET = 0x8904,
    eMAX_PROGRAM_TEXEL_OFFSET = 0x8905,
    eSAMPLER_BINDING = 0x8919,
    eFRAGMENT_SHADER_ATI = 0x8920,
    eUNIFORM_BUFFER_BINDING = 0x8A28,
    eUNIFORM_BUFFER_START = 0x8A29,
    eUNIFORM_BUFFER_SIZE = 0x8A2A,
    eMAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B,
    eMAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C,
    eMAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D,
    eMAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E,
    eMAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F,
    eMAX_UNIFORM_BLOCK_SIZE = 0x8A30,
    eMAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,
    eMAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
    eMAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
    eUNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,
    eMAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
    eMAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,
    eMAX_VARYING_FLOATS = 0x8B4B,
    eMAX_VARYING_COMPONENTS = 0x8B4B,
    eMAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
    eMAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
    eFRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
    eCURRENT_PROGRAM = 0x8B8D,
    eIMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
    eIMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
    eTEXTURE_BINDING_1D_ARRAY = 0x8C1C,
    eTEXTURE_BINDING_2D_ARRAY = 0x8C1D,
    eMAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
    eMAX_TEXTURE_BUFFER_SIZE = 0x8C2B,
    eTEXTURE_BINDING_BUFFER = 0x8C2C,
    eTRANSFORM_FEEDBACK_BUFFER_START = 0x8C84,
    eTRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85,
    eTRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F,
    eMOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 0x8C90,
    eMOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 0x8C91,
    eSTENCIL_BACK_REF = 0x8CA3,
    eSTENCIL_BACK_VALUE_MASK = 0x8CA4,
    eSTENCIL_BACK_WRITEMASK = 0x8CA5,
    eDRAW_FRAMEBUFFER_BINDING = 0x8CA6,
    eRENDERBUFFER_BINDING = 0x8CA7,
    eREAD_FRAMEBUFFER_BINDING = 0x8CAA,
    eMAX_COLOR_ATTACHMENTS = 0x8CDF,
    eMAX_COLOR_ATTACHMENTS_EXT = 0x8CDF,
    eMAX_COLOR_ATTACHMENTS_NV = 0x8CDF,
    eTEXTURE_GEN_STR_OES = 0x8D60,
    eMAX_ELEMENT_INDEX = 0x8D6B,
    eMAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
    eSHADER_BINARY_FORMATS = 0x8DF8,
    eNUM_SHADER_BINARY_FORMATS = 0x8DF9,
    eSHADER_COMPILER = 0x8DFA,
    eMAX_VERTEX_UNIFORM_VECTORS = 0x8DFB,
    eMAX_VARYING_VECTORS = 0x8DFC,
    eMAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD,
    eTIMESTAMP = 0x8E28,
    eTIMESTAMP_EXT = 0x8E28,
    ePROVOKING_VERTEX = 0x8E4F,
    eMAX_SAMPLE_MASK_WORDS = 0x8E59,
    eMAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
    eMAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
    eFETCH_PER_SAMPLE_ARM = 0x8F65,
    eFRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66,
    eFRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = 0x8F6F,
    ePRIMITIVE_RESTART_INDEX = 0x8F9E,
    eMIN_MAP_BUFFER_ALIGNMENT = 0x90BC,
    eSHADER_STORAGE_BUFFER_BINDING = 0x90D3,
    eSHADER_STORAGE_BUFFER_START = 0x90D4,
    eSHADER_STORAGE_BUFFER_SIZE = 0x90D5,
    eMAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6,
    eMAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,
    eMAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
    eMAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9,
    eMAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
    eMAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB,
    eMAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC,
    eMAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD,
    eSHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF,
    eMAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB,
    eDISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
    eTEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
    eTEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
    eMAX_COLOR_TEXTURE_SAMPLES = 0x910E,
    eMAX_DEPTH_TEXTURE_SAMPLES = 0x910F,
    eMAX_INTEGER_SAMPLES = 0x9110,
    eMAX_SERVER_WAIT_TIMEOUT = 0x9111,
    eMAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,
    eMAX_GEOMETRY_INPUT_COMPONENTS = 0x9123,
    eMAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
    eMAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,
    eCONTEXT_PROFILE_MASK = 0x9126,
    eTEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F,
    eMAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB,
    eMAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
    eMAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE,
    eMAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF,
    eMAX_VERTEX_ATOMIC_COUNTERS = 0x92D2,
    eMAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
    eMAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4,
    eMAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5,
    eMAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6,
    eMAX_COMBINED_ATOMIC_COUNTERS = 0x92D7,
    eMAX_FRAMEBUFFER_WIDTH = 0x9315,
    eMAX_FRAMEBUFFER_HEIGHT = 0x9316,
    eMAX_FRAMEBUFFER_LAYERS = 0x9317,
    eMAX_FRAMEBUFFER_SAMPLES = 0x9318,
    eNUM_DEVICE_UUIDS_EXT = 0x9596,
    eDEVICE_UUID_EXT = 0x9597,
    eDRIVER_UUID_EXT = 0x9598,
    eDEVICE_LUID_EXT = 0x9599,
    eDEVICE_NODE_MASK_EXT = 0x959A,
    eSHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1,
    eSHADING_RATE_IMAGE_PALETTE_COUNT_NV = 0x95B2,
    eMAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 0x95B6,
    eFRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2,
    eSHADING_RATE_QCOM = 0x96A4,
    eSHADING_RATE_EXT = 0x96D0,
    eMIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D7,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D8,
    eMIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96D9,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96DA,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = 0x96DB,
    eMAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = 0x96DC,
    eFRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = 0x96DD,
    eFRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = 0x96DE,
    eFRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = 0x96DF
};
enum class GetTextureParameter : GLenum {
    eTEXTURE_WIDTH = 0x1000,
    eTEXTURE_HEIGHT = 0x1001,
    eTEXTURE_INTERNAL_FORMAT = 0x1003,
    eTEXTURE_COMPONENTS = 0x1003,
    eTEXTURE_BORDER_COLOR = 0x1004,
    eTEXTURE_BORDER_COLOR_NV = 0x1004,
    eTEXTURE_BORDER = 0x1005,
    eTEXTURE_MAG_FILTER = 0x2800,
    eTEXTURE_MIN_FILTER = 0x2801,
    eTEXTURE_WRAP_S = 0x2802,
    eTEXTURE_WRAP_T = 0x2803,
    eTEXTURE_RED_SIZE = 0x805C,
    eTEXTURE_GREEN_SIZE = 0x805D,
    eTEXTURE_BLUE_SIZE = 0x805E,
    eTEXTURE_ALPHA_SIZE = 0x805F,
    eTEXTURE_LUMINANCE_SIZE = 0x8060,
    eTEXTURE_INTENSITY_SIZE = 0x8061,
    eTEXTURE_PRIORITY = 0x8066,
    eTEXTURE_RESIDENT = 0x8067,
    eTEXTURE_DEPTH_EXT = 0x8071,
    eTEXTURE_WRAP_R_EXT = 0x8072,
    eDETAIL_TEXTURE_LEVEL_SGIS = 0x809A,
    eDETAIL_TEXTURE_MODE_SGIS = 0x809B,
    eDETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C,
    eSHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0,
    eSHADOW_AMBIENT_SGIX = 0x80BF,
    eDUAL_TEXTURE_SELECT_SGIS = 0x8124,
    eQUAD_TEXTURE_SELECT_SGIS = 0x8125,
    eTEXTURE_4DSIZE_SGIS = 0x8136,
    eTEXTURE_WRAP_Q_SGIS = 0x8137,
    eTEXTURE_MIN_LOD_SGIS = 0x813A,
    eTEXTURE_MAX_LOD_SGIS = 0x813B,
    eTEXTURE_BASE_LEVEL_SGIS = 0x813C,
    eTEXTURE_MAX_LEVEL_SGIS = 0x813D,
    eTEXTURE_FILTER4_SIZE_SGIS = 0x8147,
    eTEXTURE_CLIPMAP_CENTER_SGIX = 0x8171,
    eTEXTURE_CLIPMAP_FRAME_SGIX = 0x8172,
    eTEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173,
    eTEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174,
    eTEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175,
    eTEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176,
    ePOST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
    ePOST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
    eTEXTURE_LOD_BIAS_S_SGIX = 0x818E,
    eTEXTURE_LOD_BIAS_T_SGIX = 0x818F,
    eTEXTURE_LOD_BIAS_R_SGIX = 0x8190,
    eGENERATE_MIPMAP_SGIS = 0x8191,
    eTEXTURE_COMPARE_SGIX = 0x819A,
    eTEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
    eTEXTURE_LEQUAL_R_SGIX = 0x819C,
    eTEXTURE_GEQUAL_R_SGIX = 0x819D,
    eTEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
    eTEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
    eTEXTURE_MAX_CLAMP_R_SGIX = 0x836B,
    eNORMAL_MAP = 0x8511,
    eNORMAL_MAP_ARB = 0x8511,
    eNORMAL_MAP_EXT = 0x8511,
    eNORMAL_MAP_NV = 0x8511,
    eNORMAL_MAP_OES = 0x8511,
    eREFLECTION_MAP = 0x8512,
    eREFLECTION_MAP_ARB = 0x8512,
    eREFLECTION_MAP_EXT = 0x8512,
    eREFLECTION_MAP_NV = 0x8512,
    eREFLECTION_MAP_OES = 0x8512,
    eTEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A,
    eSURFACE_COMPRESSION_EXT = 0x96C0
};
enum class RenderingMode : GLenum {
    eRENDER = 0x1C00,
    eFEEDBACK = 0x1C01,
    eSELECT = 0x1C02
};
enum class PixelType : GLenum {
    eBYTE = 0x1400,
    eUNSIGNED_BYTE = 0x1401,
    eSHORT = 0x1402,
    eUNSIGNED_SHORT = 0x1403,
    eINT = 0x1404,
    eUNSIGNED_INT = 0x1405,
    eFLOAT = 0x1406,
    eHALF_FLOAT = 0x140B,
    eHALF_FLOAT_ARB = 0x140B,
    eHALF_FLOAT_NV = 0x140B,
    eHALF_APPLE = 0x140B,
    eBITMAP = 0x1A00,
    eUNSIGNED_BYTE_3_3_2 = 0x8032,
    eUNSIGNED_BYTE_3_3_2_EXT = 0x8032,
    eUNSIGNED_SHORT_4_4_4_4 = 0x8033,
    eUNSIGNED_SHORT_4_4_4_4_EXT = 0x8033,
    eUNSIGNED_SHORT_5_5_5_1 = 0x8034,
    eUNSIGNED_SHORT_5_5_5_1_EXT = 0x8034,
    eUNSIGNED_INT_8_8_8_8 = 0x8035,
    eUNSIGNED_INT_8_8_8_8_EXT = 0x8035,
    eUNSIGNED_INT_10_10_10_2 = 0x8036,
    eUNSIGNED_INT_10_10_10_2_EXT = 0x8036,
    eUNSIGNED_BYTE_2_3_3_REV = 0x8362,
    eUNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362,
    eUNSIGNED_SHORT_5_6_5 = 0x8363,
    eUNSIGNED_SHORT_5_6_5_EXT = 0x8363,
    eUNSIGNED_SHORT_5_6_5_REV = 0x8364,
    eUNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364,
    eUNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
    eUNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365,
    eUNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365,
    eUNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
    eUNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366,
    eUNSIGNED_INT_8_8_8_8_REV = 0x8367,
    eUNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367,
    eUNSIGNED_INT_2_10_10_10_REV = 0x8368,
    eUNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368,
    eUNSIGNED_INT_24_8 = 0x84FA,
    eUNSIGNED_INT_24_8_EXT = 0x84FA,
    eUNSIGNED_INT_24_8_NV = 0x84FA,
    eUNSIGNED_INT_24_8_OES = 0x84FA,
    eUNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
    eUNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3B,
    eUNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B,
    eUNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
    eUNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3E,
    eUNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E,
    eFLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
    eFLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD
};
enum class DepthFunction : GLenum {
    eNEVER = 0x0200,
    eLESS = 0x0201,
    eEQUAL = 0x0202,
    eLEQUAL = 0x0203,
    eGREATER = 0x0204,
    eNOTEQUAL = 0x0205,
    eGEQUAL = 0x0206,
    eALWAYS = 0x0207
};
enum class FrontFaceDirection : GLenum {
    eCW = 0x0900,
    eCCW = 0x0901
};
enum class StringName : GLenum {
    eVENDOR = 0x1F00,
    eRENDERER = 0x1F01,
    eVERSION = 0x1F02,
    eEXTENSIONS = 0x1F03,
    eSHADING_LANGUAGE_VERSION = 0x8B8C
};
enum class LightParameter : GLenum {
    ePOSITION = 0x1203,
    eSPOT_DIRECTION = 0x1204,
    eSPOT_EXPONENT = 0x1205,
    eSPOT_CUTOFF = 0x1206,
    eCONSTANT_ATTENUATION = 0x1207,
    eLINEAR_ATTENUATION = 0x1208,
    eQUADRATIC_ATTENUATION = 0x1209
};
enum class ListMode : GLenum {
    eCOMPILE = 0x1300,
    eCOMPILE_AND_EXECUTE = 0x1301
};
enum class HintMode : GLenum {
    eDONT_CARE = 0x1100,
    eFASTEST = 0x1101,
    eNICEST = 0x1102
};
enum class Boolean : GLenum {
    eFALSE = 0,
    eTRUE = 1
};
enum class PolygonMode : GLenum {
    ePOINT = 0x1B00,
    eLINE = 0x1B01,
    eFILL = 0x1B02
};
enum class ListNameType : GLenum {
    eBYTE = 0x1400,
    eUNSIGNED_BYTE = 0x1401,
    eSHORT = 0x1402,
    eUNSIGNED_SHORT = 0x1403,
    eINT = 0x1404,
    eUNSIGNED_INT = 0x1405,
    eFLOAT = 0x1406,
    e2_BYTES = 0x1407,
    e3_BYTES = 0x1408,
    e4_BYTES = 0x1409
};
enum class PrimitiveType : GLenum {
    ePOINTS = 0x0000,
    eLINES = 0x0001,
    eLINE_LOOP = 0x0002,
    eLINE_STRIP = 0x0003,
    eTRIANGLES = 0x0004,
    eTRIANGLE_STRIP = 0x0005,
    eTRIANGLE_FAN = 0x0006,
    eQUADS = 0x0007,
    eQUADS_EXT = 0x0007,
    eQUAD_STRIP = 0x0008,
    ePOLYGON = 0x0009,
    eLINES_ADJACENCY = 0x000A,
    eLINES_ADJACENCY_ARB = 0x000A,
    eLINES_ADJACENCY_EXT = 0x000A,
    eLINE_STRIP_ADJACENCY = 0x000B,
    eLINE_STRIP_ADJACENCY_ARB = 0x000B,
    eLINE_STRIP_ADJACENCY_EXT = 0x000B,
    eTRIANGLES_ADJACENCY = 0x000C,
    eTRIANGLES_ADJACENCY_ARB = 0x000C,
    eTRIANGLES_ADJACENCY_EXT = 0x000C,
    eTRIANGLE_STRIP_ADJACENCY = 0x000D,
    eTRIANGLE_STRIP_ADJACENCY_ARB = 0x000D,
    eTRIANGLE_STRIP_ADJACENCY_EXT = 0x000D,
    ePATCHES = 0x000E,
    ePATCHES_EXT = 0x000E
};
enum class ColorMaterialParameter : GLenum {
    eAMBIENT = 0x1200,
    eDIFFUSE = 0x1201,
    eSPECULAR = 0x1202,
    eEMISSION = 0x1600,
    eAMBIENT_AND_DIFFUSE = 0x1602
};
enum class TextureCoordName : GLenum {
    eS = 0x2000,
    eT = 0x2001,
    eR = 0x2002,
    eQ = 0x2003,
    eTEXTURE_GEN_STR_OES = 0x8D60
};
enum class LightModelParameter : GLenum {
    eLIGHT_MODEL_LOCAL_VIEWER = 0x0B51,
    eLIGHT_MODEL_TWO_SIDE = 0x0B52,
    eLIGHT_MODEL_AMBIENT = 0x0B53,
    eLIGHT_MODEL_COLOR_CONTROL = 0x81F8,
    eLIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8
};
enum class PixelStoreParameter : GLenum {
    eUNPACK_SWAP_BYTES = 0x0CF0,
    eUNPACK_LSB_FIRST = 0x0CF1,
    eUNPACK_ROW_LENGTH = 0x0CF2,
    eUNPACK_ROW_LENGTH_EXT = 0x0CF2,
    eUNPACK_SKIP_ROWS = 0x0CF3,
    eUNPACK_SKIP_ROWS_EXT = 0x0CF3,
    eUNPACK_SKIP_PIXELS = 0x0CF4,
    eUNPACK_SKIP_PIXELS_EXT = 0x0CF4,
    eUNPACK_ALIGNMENT = 0x0CF5,
    ePACK_SWAP_BYTES = 0x0D00,
    ePACK_LSB_FIRST = 0x0D01,
    ePACK_ROW_LENGTH = 0x0D02,
    ePACK_SKIP_ROWS = 0x0D03,
    ePACK_SKIP_PIXELS = 0x0D04,
    ePACK_ALIGNMENT = 0x0D05,
    ePACK_SKIP_IMAGES = 0x806B,
    ePACK_SKIP_IMAGES_EXT = 0x806B,
    ePACK_IMAGE_HEIGHT = 0x806C,
    ePACK_IMAGE_HEIGHT_EXT = 0x806C,
    eUNPACK_SKIP_IMAGES = 0x806D,
    eUNPACK_SKIP_IMAGES_EXT = 0x806D,
    eUNPACK_IMAGE_HEIGHT = 0x806E,
    eUNPACK_IMAGE_HEIGHT_EXT = 0x806E,
    ePACK_SKIP_VOLUMES_SGIS = 0x8130,
    ePACK_IMAGE_DEPTH_SGIS = 0x8131,
    eUNPACK_SKIP_VOLUMES_SGIS = 0x8132,
    eUNPACK_IMAGE_DEPTH_SGIS = 0x8133,
    ePIXEL_TILE_WIDTH_SGIX = 0x8140,
    ePIXEL_TILE_HEIGHT_SGIX = 0x8141,
    ePIXEL_TILE_GRID_WIDTH_SGIX = 0x8142,
    ePIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143,
    ePIXEL_TILE_GRID_DEPTH_SGIX = 0x8144,
    ePIXEL_TILE_CACHE_SIZE_SGIX = 0x8145,
    ePACK_RESAMPLE_SGIX = 0x842E,
    eUNPACK_RESAMPLE_SGIX = 0x842F,
    ePACK_SUBSAMPLE_RATE_SGIX = 0x85A0,
    eUNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1,
    ePACK_RESAMPLE_OML = 0x8984,
    eUNPACK_RESAMPLE_OML = 0x8985
};
enum class AccumOp : GLenum {
    eACCUM = 0x0100,
    eLOAD = 0x0101,
    eRETURN = 0x0102,
    eMULT = 0x0103,
    eADD = 0x0104
};
enum class TextureGenParameter : GLenum {
    eTEXTURE_GEN_MODE = 0x2500,
    eTEXTURE_GEN_MODE_OES = 0x2500,
    eOBJECT_PLANE = 0x2501,
    eEYE_PLANE = 0x2502,
    eEYE_POINT_SGIS = 0x81F4,
    eOBJECT_POINT_SGIS = 0x81F5,
    eEYE_LINE_SGIS = 0x81F6,
    eOBJECT_LINE_SGIS = 0x81F7
};
enum class AttribMask : GLenum {
    eCURRENT_BIT = 0x00000001,
    ePOINT_BIT = 0x00000002,
    eLINE_BIT = 0x00000004,
    ePOLYGON_BIT = 0x00000008,
    ePOLYGON_STIPPLE_BIT = 0x00000010,
    ePIXEL_MODE_BIT = 0x00000020,
    eLIGHTING_BIT = 0x00000040,
    eFOG_BIT = 0x00000080,
    eDEPTH_BUFFER_BIT = 0x00000100,
    eACCUM_BUFFER_BIT = 0x00000200,
    eSTENCIL_BUFFER_BIT = 0x00000400,
    eVIEWPORT_BIT = 0x00000800,
    eTRANSFORM_BIT = 0x00001000,
    eENABLE_BIT = 0x00002000,
    eCOLOR_BUFFER_BIT = 0x00004000,
    eHINT_BIT = 0x00008000,
    eEVAL_BIT = 0x00010000,
    eLIST_BIT = 0x00020000,
    eTEXTURE_BIT = 0x00040000,
    eSCISSOR_BIT = 0x00080000,
    eMULTISAMPLE_BIT = 0x20000000,
    eMULTISAMPLE_BIT_ARB = 0x20000000,
    eMULTISAMPLE_BIT_EXT = 0x20000000,
    eMULTISAMPLE_BIT_3DFX = 0x20000000,
    eALL_ATTRIB_BITS = 0xFFFFFFFF
};
enum class PixelCopyType : GLenum {
    eCOLOR = 0x1800,
    eCOLOR_EXT = 0x1800,
    eDEPTH = 0x1801,
    eDEPTH_EXT = 0x1801,
    eSTENCIL = 0x1802,
    eSTENCIL_EXT = 0x1802
};
enum class TextureEnvTarget : GLenum {
    eTEXTURE_ENV = 0x2300
};
inline void  cullFace(TriangleFace mode) {
    return glCullFace(static_cast<GLenum>(mode));
}
inline void  frontFace(FrontFaceDirection mode) {
    return glFrontFace(static_cast<GLenum>(mode));
}
inline void  hint(HintTarget target, HintMode mode) {
    return glHint(static_cast<GLenum>(target), static_cast<GLenum>(mode));
}
inline void  lineWidth(GLfloat width) {
    return glLineWidth(static_cast<GLfloat>(width));
}
inline void  pointSize(GLfloat size) {
    return glPointSize(static_cast<GLfloat>(size));
}
inline void  polygonMode(TriangleFace face, PolygonMode mode) {
    return glPolygonMode(static_cast<GLenum>(face), static_cast<GLenum>(mode));
}
inline void  scissor(GLint x, GLint y, GLsizei width, GLsizei height) {
    return glScissor(static_cast<GLint>(x), static_cast<GLint>(y), width, height);
}
inline void  texParameterf(TextureTarget target, TextureParameterName pname, GLfloat param) {
    return glTexParameterf(static_cast<GLenum>(target), static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  texParameterfv(TextureTarget target, TextureParameterName pname, const GLfloat*  params) {
    return glTexParameterfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  texParameteri(TextureTarget target, TextureParameterName pname, GLint param) {
    return glTexParameteri(static_cast<GLenum>(target), static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  texParameteriv(TextureTarget target, TextureParameterName pname, const GLint*  params) {
    return glTexParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  texImage1D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLint border, PixelFormat format, PixelType type, const void * pixels) {
    return glTexImage1D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(internalformat), width, static_cast<GLint>(border), static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void  texImage2D(TextureTarget target, GLint level, InternalFormat internalformat, GLsizei width, GLsizei height, GLint border, PixelFormat format, PixelType type, const void * pixels) {
    return glTexImage2D(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLint>(internalformat), width, height, static_cast<GLint>(border), static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void  drawBuffer(DrawBufferMode buf) {
    return glDrawBuffer(static_cast<GLenum>(buf));
}
inline void  clear(ClearBufferMask mask) {
    return glClear(static_cast<GLbitfield>(mask));
}
inline void  clearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    return glClearColor(static_cast<GLfloat>(red), static_cast<GLfloat>(green), static_cast<GLfloat>(blue), static_cast<GLfloat>(alpha));
}
inline void  clearStencil(GLint s) {
    return glClearStencil(static_cast<GLint>(s));
}
inline void  clearDepth(GLdouble depth) {
    return glClearDepth(depth);
}
inline void  stencilMask(GLuint mask) {
    return glStencilMask(static_cast<GLuint>(mask));
}
inline void  colorMask(Boolean red, Boolean green, Boolean blue, Boolean alpha) {
    return glColorMask(static_cast<GLboolean>(red), static_cast<GLboolean>(green), static_cast<GLboolean>(blue), static_cast<GLboolean>(alpha));
}
inline void  depthMask(Boolean flag) {
    return glDepthMask(static_cast<GLboolean>(flag));
}
inline void  disable(EnableCap cap) {
    return glDisable(static_cast<GLenum>(cap));
}
inline void  enable(EnableCap cap) {
    return glEnable(static_cast<GLenum>(cap));
}
inline void  finish() {
    return glFinish();
}
inline void  flush() {
    return glFlush();
}
inline void  blendFunc(BlendingFactor sfactor, BlendingFactor dfactor) {
    return glBlendFunc(static_cast<GLenum>(sfactor), static_cast<GLenum>(dfactor));
}
inline void  logicOp(LogicOp opcode) {
    return glLogicOp(static_cast<GLenum>(opcode));
}
inline void  stencilFunc(StencilFunction func, GLint ref, GLuint mask) {
    return glStencilFunc(static_cast<GLenum>(func), static_cast<GLint>(ref), static_cast<GLuint>(mask));
}
inline void  stencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass) {
    return glStencilOp(static_cast<GLenum>(fail), static_cast<GLenum>(zfail), static_cast<GLenum>(zpass));
}
inline void  depthFunc(DepthFunction func) {
    return glDepthFunc(static_cast<GLenum>(func));
}
inline void  pixelStoref(PixelStoreParameter pname, GLfloat param) {
    return glPixelStoref(static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  pixelStorei(PixelStoreParameter pname, GLint param) {
    return glPixelStorei(static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  readBuffer(ReadBufferMode src) {
    return glReadBuffer(static_cast<GLenum>(src));
}
inline void  readPixels(GLint x, GLint y, GLsizei width, GLsizei height, PixelFormat format, PixelType type, const void * pixels) {
    return glReadPixels(static_cast<GLint>(x), static_cast<GLint>(y), width, height, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void  getBooleanv(GetPName pname, Boolean data) {
    return glGetBooleanv(static_cast<GLenum>(pname), static_cast<GLboolean>(data));
}
inline void  getDoublev(GetPName pname, GLdouble data) {
    return glGetDoublev(static_cast<GLenum>(pname), data);
}
inline GLenum getError() {
    return glGetError();
}
inline void  getFloatv(GetPName pname, GLfloat data) {
    return glGetFloatv(static_cast<GLenum>(pname), data);
}
inline void  getIntegerv(GetPName pname, GLint data) {
    return glGetIntegerv(static_cast<GLenum>(pname), data);
}
inline GLubyte getString(StringName name) {
    return glGetString(static_cast<GLenum>(name));
}
inline void  getTexImage(TextureTarget target, GLint level, PixelFormat format, PixelType type, const void * pixels) {
    return glGetTexImage(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void  getTexParameterfv(TextureTarget target, GetTextureParameter pname, GLfloat params) {
    return glGetTexParameterfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  getTexParameteriv(TextureTarget target, GetTextureParameter pname, GLint params) {
    return glGetTexParameteriv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  getTexLevelParameterfv(TextureTarget target, GLint level, GetTextureParameter pname, GLfloat params) {
    return glGetTexLevelParameterfv(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(pname), params);
}
inline void  getTexLevelParameteriv(TextureTarget target, GLint level, GetTextureParameter pname, GLint params) {
    return glGetTexLevelParameteriv(static_cast<GLenum>(target), static_cast<GLint>(level), static_cast<GLenum>(pname), params);
}
inline GLboolean isEnabled(EnableCap cap) {
    return glIsEnabled(static_cast<GLenum>(cap));
}
inline void  depthRange(GLdouble n, GLdouble f) {
    return glDepthRange(n, f);
}
inline void  viewport(GLint x, GLint y, GLsizei width, GLsizei height) {
    return glViewport(static_cast<GLint>(x), static_cast<GLint>(y), width, height);
}
inline void  newList(GLuint list, ListMode mode) {
    return glNewList(static_cast<GLuint>(list), static_cast<GLenum>(mode));
}
inline void  endList() {
    return glEndList();
}
inline void  callList(GLuint list) {
    return glCallList(static_cast<GLuint>(list));
}
inline void  callLists(GLsizei n, ListNameType type, const void * lists) {
    return glCallLists(n, static_cast<GLenum>(type), lists);
}
inline void  deleteLists(GLuint list, GLsizei range) {
    return glDeleteLists(static_cast<GLuint>(list), range);
}
inline GLuint genLists(GLsizei range) {
    return glGenLists(range);
}
inline void  listBase(GLuint base) {
    return glListBase(static_cast<GLuint>(base));
}
inline void  begin(PrimitiveType mode) {
    return glBegin(static_cast<GLenum>(mode));
}
inline void  bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte*  bitmap) {
    return glBitmap(width, height, static_cast<GLfloat>(xorig), static_cast<GLfloat>(yorig), static_cast<GLfloat>(xmove), static_cast<GLfloat>(ymove), bitmap);
}
inline void  color3b(GLbyte red, GLbyte green, GLbyte blue) {
    return glColor3b(static_cast<GLbyte>(red), static_cast<GLbyte>(green), static_cast<GLbyte>(blue));
}
inline void  color3bv(const GLbyte*  v) {
    return glColor3bv(v);
}
inline void  color3d(GLdouble red, GLdouble green, GLdouble blue) {
    return glColor3d(static_cast<GLdouble>(red), static_cast<GLdouble>(green), static_cast<GLdouble>(blue));
}
inline void  color3dv(const GLdouble*  v) {
    return glColor3dv(v);
}
inline void  color3f(GLfloat red, GLfloat green, GLfloat blue) {
    return glColor3f(static_cast<GLfloat>(red), static_cast<GLfloat>(green), static_cast<GLfloat>(blue));
}
inline void  color3fv(const GLfloat*  v) {
    return glColor3fv(v);
}
inline void  color3i(GLint red, GLint green, GLint blue) {
    return glColor3i(static_cast<GLint>(red), static_cast<GLint>(green), static_cast<GLint>(blue));
}
inline void  color3iv(const GLint*  v) {
    return glColor3iv(v);
}
inline void  color3s(GLshort red, GLshort green, GLshort blue) {
    return glColor3s(static_cast<GLshort>(red), static_cast<GLshort>(green), static_cast<GLshort>(blue));
}
inline void  color3sv(const GLshort*  v) {
    return glColor3sv(v);
}
inline void  color3ub(GLubyte red, GLubyte green, GLubyte blue) {
    return glColor3ub(static_cast<GLubyte>(red), static_cast<GLubyte>(green), static_cast<GLubyte>(blue));
}
inline void  color3ubv(const GLubyte*  v) {
    return glColor3ubv(v);
}
inline void  color3ui(GLuint red, GLuint green, GLuint blue) {
    return glColor3ui(static_cast<GLuint>(red), static_cast<GLuint>(green), static_cast<GLuint>(blue));
}
inline void  color3uiv(const GLuint*  v) {
    return glColor3uiv(v);
}
inline void  color3us(GLushort red, GLushort green, GLushort blue) {
    return glColor3us(static_cast<GLushort>(red), static_cast<GLushort>(green), static_cast<GLushort>(blue));
}
inline void  color3usv(const GLushort*  v) {
    return glColor3usv(v);
}
inline void  color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
    return glColor4b(static_cast<GLbyte>(red), static_cast<GLbyte>(green), static_cast<GLbyte>(blue), static_cast<GLbyte>(alpha));
}
inline void  color4bv(const GLbyte*  v) {
    return glColor4bv(v);
}
inline void  color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
    return glColor4d(static_cast<GLdouble>(red), static_cast<GLdouble>(green), static_cast<GLdouble>(blue), static_cast<GLdouble>(alpha));
}
inline void  color4dv(const GLdouble*  v) {
    return glColor4dv(v);
}
inline void  color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    return glColor4f(static_cast<GLfloat>(red), static_cast<GLfloat>(green), static_cast<GLfloat>(blue), static_cast<GLfloat>(alpha));
}
inline void  color4fv(const GLfloat*  v) {
    return glColor4fv(v);
}
inline void  color4i(GLint red, GLint green, GLint blue, GLint alpha) {
    return glColor4i(static_cast<GLint>(red), static_cast<GLint>(green), static_cast<GLint>(blue), static_cast<GLint>(alpha));
}
inline void  color4iv(const GLint*  v) {
    return glColor4iv(v);
}
inline void  color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
    return glColor4s(static_cast<GLshort>(red), static_cast<GLshort>(green), static_cast<GLshort>(blue), static_cast<GLshort>(alpha));
}
inline void  color4sv(const GLshort*  v) {
    return glColor4sv(v);
}
inline void  color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
    return glColor4ub(static_cast<GLubyte>(red), static_cast<GLubyte>(green), static_cast<GLubyte>(blue), static_cast<GLubyte>(alpha));
}
inline void  color4ubv(const GLubyte*  v) {
    return glColor4ubv(v);
}
inline void  color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
    return glColor4ui(static_cast<GLuint>(red), static_cast<GLuint>(green), static_cast<GLuint>(blue), static_cast<GLuint>(alpha));
}
inline void  color4uiv(const GLuint*  v) {
    return glColor4uiv(v);
}
inline void  color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
    return glColor4us(static_cast<GLushort>(red), static_cast<GLushort>(green), static_cast<GLushort>(blue), static_cast<GLushort>(alpha));
}
inline void  color4usv(const GLushort*  v) {
    return glColor4usv(v);
}
inline void  edgeFlag(Boolean flag) {
    return glEdgeFlag(static_cast<GLboolean>(flag));
}
inline void  edgeFlagv(Boolean flag) {
    return glEdgeFlagv(flag);
}
inline void  end() {
    return glEnd();
}
inline void  indexd(GLdouble c) {
    return glIndexd(static_cast<GLdouble>(c));
}
inline void  indexdv(const GLdouble*  c) {
    return glIndexdv(c);
}
inline void  indexf(GLfloat c) {
    return glIndexf(static_cast<GLfloat>(c));
}
inline void  indexfv(const GLfloat*  c) {
    return glIndexfv(c);
}
inline void  indexi(GLint c) {
    return glIndexi(static_cast<GLint>(c));
}
inline void  indexiv(const GLint*  c) {
    return glIndexiv(c);
}
inline void  indexs(GLshort c) {
    return glIndexs(static_cast<GLshort>(c));
}
inline void  indexsv(const GLshort*  c) {
    return glIndexsv(c);
}
inline void  normal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
    return glNormal3b(nx, ny, nz);
}
inline void  normal3bv(const GLbyte*  v) {
    return glNormal3bv(v);
}
inline void  normal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
    return glNormal3d(static_cast<GLdouble>(nx), static_cast<GLdouble>(ny), static_cast<GLdouble>(nz));
}
inline void  normal3dv(const GLdouble*  v) {
    return glNormal3dv(v);
}
inline void  normal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
    return glNormal3f(static_cast<GLfloat>(nx), static_cast<GLfloat>(ny), static_cast<GLfloat>(nz));
}
inline void  normal3fv(const GLfloat*  v) {
    return glNormal3fv(v);
}
inline void  normal3i(GLint nx, GLint ny, GLint nz) {
    return glNormal3i(nx, ny, nz);
}
inline void  normal3iv(const GLint*  v) {
    return glNormal3iv(v);
}
inline void  normal3s(GLshort nx, GLshort ny, GLshort nz) {
    return glNormal3s(nx, ny, nz);
}
inline void  normal3sv(const GLshort*  v) {
    return glNormal3sv(v);
}
inline void  rasterPos2d(GLdouble x, GLdouble y) {
    return glRasterPos2d(static_cast<GLdouble>(x), static_cast<GLdouble>(y));
}
inline void  rasterPos2dv(const GLdouble*  v) {
    return glRasterPos2dv(v);
}
inline void  rasterPos2f(GLfloat x, GLfloat y) {
    return glRasterPos2f(static_cast<GLfloat>(x), static_cast<GLfloat>(y));
}
inline void  rasterPos2fv(const GLfloat*  v) {
    return glRasterPos2fv(v);
}
inline void  rasterPos2i(GLint x, GLint y) {
    return glRasterPos2i(static_cast<GLint>(x), static_cast<GLint>(y));
}
inline void  rasterPos2iv(const GLint*  v) {
    return glRasterPos2iv(v);
}
inline void  rasterPos2s(GLshort x, GLshort y) {
    return glRasterPos2s(static_cast<GLshort>(x), static_cast<GLshort>(y));
}
inline void  rasterPos2sv(const GLshort*  v) {
    return glRasterPos2sv(v);
}
inline void  rasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
    return glRasterPos3d(static_cast<GLdouble>(x), static_cast<GLdouble>(y), static_cast<GLdouble>(z));
}
inline void  rasterPos3dv(const GLdouble*  v) {
    return glRasterPos3dv(v);
}
inline void  rasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
    return glRasterPos3f(static_cast<GLfloat>(x), static_cast<GLfloat>(y), static_cast<GLfloat>(z));
}
inline void  rasterPos3fv(const GLfloat*  v) {
    return glRasterPos3fv(v);
}
inline void  rasterPos3i(GLint x, GLint y, GLint z) {
    return glRasterPos3i(static_cast<GLint>(x), static_cast<GLint>(y), static_cast<GLint>(z));
}
inline void  rasterPos3iv(const GLint*  v) {
    return glRasterPos3iv(v);
}
inline void  rasterPos3s(GLshort x, GLshort y, GLshort z) {
    return glRasterPos3s(static_cast<GLshort>(x), static_cast<GLshort>(y), static_cast<GLshort>(z));
}
inline void  rasterPos3sv(const GLshort*  v) {
    return glRasterPos3sv(v);
}
inline void  rasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    return glRasterPos4d(static_cast<GLdouble>(x), static_cast<GLdouble>(y), static_cast<GLdouble>(z), static_cast<GLdouble>(w));
}
inline void  rasterPos4dv(const GLdouble*  v) {
    return glRasterPos4dv(v);
}
inline void  rasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    return glRasterPos4f(static_cast<GLfloat>(x), static_cast<GLfloat>(y), static_cast<GLfloat>(z), static_cast<GLfloat>(w));
}
inline void  rasterPos4fv(const GLfloat*  v) {
    return glRasterPos4fv(v);
}
inline void  rasterPos4i(GLint x, GLint y, GLint z, GLint w) {
    return glRasterPos4i(static_cast<GLint>(x), static_cast<GLint>(y), static_cast<GLint>(z), static_cast<GLint>(w));
}
inline void  rasterPos4iv(const GLint*  v) {
    return glRasterPos4iv(v);
}
inline void  rasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    return glRasterPos4s(static_cast<GLshort>(x), static_cast<GLshort>(y), static_cast<GLshort>(z), static_cast<GLshort>(w));
}
inline void  rasterPos4sv(const GLshort*  v) {
    return glRasterPos4sv(v);
}
inline void  rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
    return glRectd(static_cast<GLdouble>(x1), static_cast<GLdouble>(y1), static_cast<GLdouble>(x2), static_cast<GLdouble>(y2));
}
inline void  rectdv(const GLdouble*  v1, const GLdouble*  v2) {
    return glRectdv(v1, v2);
}
inline void  rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
    return glRectf(static_cast<GLfloat>(x1), static_cast<GLfloat>(y1), static_cast<GLfloat>(x2), static_cast<GLfloat>(y2));
}
inline void  rectfv(const GLfloat*  v1, const GLfloat*  v2) {
    return glRectfv(v1, v2);
}
inline void  recti(GLint x1, GLint y1, GLint x2, GLint y2) {
    return glRecti(static_cast<GLint>(x1), static_cast<GLint>(y1), static_cast<GLint>(x2), static_cast<GLint>(y2));
}
inline void  rectiv(const GLint*  v1, const GLint*  v2) {
    return glRectiv(v1, v2);
}
inline void  rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
    return glRects(static_cast<GLshort>(x1), static_cast<GLshort>(y1), static_cast<GLshort>(x2), static_cast<GLshort>(y2));
}
inline void  rectsv(const GLshort*  v1, const GLshort*  v2) {
    return glRectsv(v1, v2);
}
inline void  texCoord1d(GLdouble s) {
    return glTexCoord1d(static_cast<GLdouble>(s));
}
inline void  texCoord1dv(const GLdouble*  v) {
    return glTexCoord1dv(v);
}
inline void  texCoord1f(GLfloat s) {
    return glTexCoord1f(static_cast<GLfloat>(s));
}
inline void  texCoord1fv(const GLfloat*  v) {
    return glTexCoord1fv(v);
}
inline void  texCoord1i(GLint s) {
    return glTexCoord1i(static_cast<GLint>(s));
}
inline void  texCoord1iv(const GLint*  v) {
    return glTexCoord1iv(v);
}
inline void  texCoord1s(GLshort s) {
    return glTexCoord1s(static_cast<GLshort>(s));
}
inline void  texCoord1sv(const GLshort*  v) {
    return glTexCoord1sv(v);
}
inline void  texCoord2d(GLdouble s, GLdouble t) {
    return glTexCoord2d(static_cast<GLdouble>(s), static_cast<GLdouble>(t));
}
inline void  texCoord2dv(const GLdouble*  v) {
    return glTexCoord2dv(v);
}
inline void  texCoord2f(GLfloat s, GLfloat t) {
    return glTexCoord2f(static_cast<GLfloat>(s), static_cast<GLfloat>(t));
}
inline void  texCoord2fv(const GLfloat*  v) {
    return glTexCoord2fv(v);
}
inline void  texCoord2i(GLint s, GLint t) {
    return glTexCoord2i(static_cast<GLint>(s), static_cast<GLint>(t));
}
inline void  texCoord2iv(const GLint*  v) {
    return glTexCoord2iv(v);
}
inline void  texCoord2s(GLshort s, GLshort t) {
    return glTexCoord2s(static_cast<GLshort>(s), static_cast<GLshort>(t));
}
inline void  texCoord2sv(const GLshort*  v) {
    return glTexCoord2sv(v);
}
inline void  texCoord3d(GLdouble s, GLdouble t, GLdouble r) {
    return glTexCoord3d(static_cast<GLdouble>(s), static_cast<GLdouble>(t), static_cast<GLdouble>(r));
}
inline void  texCoord3dv(const GLdouble*  v) {
    return glTexCoord3dv(v);
}
inline void  texCoord3f(GLfloat s, GLfloat t, GLfloat r) {
    return glTexCoord3f(static_cast<GLfloat>(s), static_cast<GLfloat>(t), static_cast<GLfloat>(r));
}
inline void  texCoord3fv(const GLfloat*  v) {
    return glTexCoord3fv(v);
}
inline void  texCoord3i(GLint s, GLint t, GLint r) {
    return glTexCoord3i(static_cast<GLint>(s), static_cast<GLint>(t), static_cast<GLint>(r));
}
inline void  texCoord3iv(const GLint*  v) {
    return glTexCoord3iv(v);
}
inline void  texCoord3s(GLshort s, GLshort t, GLshort r) {
    return glTexCoord3s(static_cast<GLshort>(s), static_cast<GLshort>(t), static_cast<GLshort>(r));
}
inline void  texCoord3sv(const GLshort*  v) {
    return glTexCoord3sv(v);
}
inline void  texCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    return glTexCoord4d(static_cast<GLdouble>(s), static_cast<GLdouble>(t), static_cast<GLdouble>(r), static_cast<GLdouble>(q));
}
inline void  texCoord4dv(const GLdouble*  v) {
    return glTexCoord4dv(v);
}
inline void  texCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    return glTexCoord4f(static_cast<GLfloat>(s), static_cast<GLfloat>(t), static_cast<GLfloat>(r), static_cast<GLfloat>(q));
}
inline void  texCoord4fv(const GLfloat*  v) {
    return glTexCoord4fv(v);
}
inline void  texCoord4i(GLint s, GLint t, GLint r, GLint q) {
    return glTexCoord4i(static_cast<GLint>(s), static_cast<GLint>(t), static_cast<GLint>(r), static_cast<GLint>(q));
}
inline void  texCoord4iv(const GLint*  v) {
    return glTexCoord4iv(v);
}
inline void  texCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
    return glTexCoord4s(static_cast<GLshort>(s), static_cast<GLshort>(t), static_cast<GLshort>(r), static_cast<GLshort>(q));
}
inline void  texCoord4sv(const GLshort*  v) {
    return glTexCoord4sv(v);
}
inline void  vertex2d(GLdouble x, GLdouble y) {
    return glVertex2d(static_cast<GLdouble>(x), static_cast<GLdouble>(y));
}
inline void  vertex2dv(const GLdouble*  v) {
    return glVertex2dv(v);
}
inline void  vertex2f(GLfloat x, GLfloat y) {
    return glVertex2f(static_cast<GLfloat>(x), static_cast<GLfloat>(y));
}
inline void  vertex2fv(const GLfloat*  v) {
    return glVertex2fv(v);
}
inline void  vertex2i(GLint x, GLint y) {
    return glVertex2i(static_cast<GLint>(x), static_cast<GLint>(y));
}
inline void  vertex2iv(const GLint*  v) {
    return glVertex2iv(v);
}
inline void  vertex2s(GLshort x, GLshort y) {
    return glVertex2s(static_cast<GLshort>(x), static_cast<GLshort>(y));
}
inline void  vertex2sv(const GLshort*  v) {
    return glVertex2sv(v);
}
inline void  vertex3d(GLdouble x, GLdouble y, GLdouble z) {
    return glVertex3d(static_cast<GLdouble>(x), static_cast<GLdouble>(y), static_cast<GLdouble>(z));
}
inline void  vertex3dv(const GLdouble*  v) {
    return glVertex3dv(v);
}
inline void  vertex3f(GLfloat x, GLfloat y, GLfloat z) {
    return glVertex3f(static_cast<GLfloat>(x), static_cast<GLfloat>(y), static_cast<GLfloat>(z));
}
inline void  vertex3fv(const GLfloat*  v) {
    return glVertex3fv(v);
}
inline void  vertex3i(GLint x, GLint y, GLint z) {
    return glVertex3i(static_cast<GLint>(x), static_cast<GLint>(y), static_cast<GLint>(z));
}
inline void  vertex3iv(const GLint*  v) {
    return glVertex3iv(v);
}
inline void  vertex3s(GLshort x, GLshort y, GLshort z) {
    return glVertex3s(static_cast<GLshort>(x), static_cast<GLshort>(y), static_cast<GLshort>(z));
}
inline void  vertex3sv(const GLshort*  v) {
    return glVertex3sv(v);
}
inline void  vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    return glVertex4d(static_cast<GLdouble>(x), static_cast<GLdouble>(y), static_cast<GLdouble>(z), static_cast<GLdouble>(w));
}
inline void  vertex4dv(const GLdouble*  v) {
    return glVertex4dv(v);
}
inline void  vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    return glVertex4f(static_cast<GLfloat>(x), static_cast<GLfloat>(y), static_cast<GLfloat>(z), static_cast<GLfloat>(w));
}
inline void  vertex4fv(const GLfloat*  v) {
    return glVertex4fv(v);
}
inline void  vertex4i(GLint x, GLint y, GLint z, GLint w) {
    return glVertex4i(static_cast<GLint>(x), static_cast<GLint>(y), static_cast<GLint>(z), static_cast<GLint>(w));
}
inline void  vertex4iv(const GLint*  v) {
    return glVertex4iv(v);
}
inline void  vertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    return glVertex4s(static_cast<GLshort>(x), static_cast<GLshort>(y), static_cast<GLshort>(z), static_cast<GLshort>(w));
}
inline void  vertex4sv(const GLshort*  v) {
    return glVertex4sv(v);
}
inline void  clipPlane(ClipPlaneName plane, const GLdouble*  equation) {
    return glClipPlane(static_cast<GLenum>(plane), equation);
}
inline void  colorMaterial(TriangleFace face, ColorMaterialParameter mode) {
    return glColorMaterial(static_cast<GLenum>(face), static_cast<GLenum>(mode));
}
inline void  fogf(FogParameter pname, GLfloat param) {
    return glFogf(static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  fogfv(FogParameter pname, const GLfloat*  params) {
    return glFogfv(static_cast<GLenum>(pname), params);
}
inline void  fogi(FogParameter pname, GLint param) {
    return glFogi(static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  fogiv(FogParameter pname, const GLint*  params) {
    return glFogiv(static_cast<GLenum>(pname), params);
}
inline void  lightf(LightName light, LightParameter pname, GLfloat param) {
    return glLightf(static_cast<GLenum>(light), static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  lightfv(LightName light, LightParameter pname, const GLfloat*  params) {
    return glLightfv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
}
inline void  lighti(LightName light, LightParameter pname, GLint param) {
    return glLighti(static_cast<GLenum>(light), static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  lightiv(LightName light, LightParameter pname, const GLint*  params) {
    return glLightiv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
}
inline void  lightModelf(LightModelParameter pname, GLfloat param) {
    return glLightModelf(static_cast<GLenum>(pname), param);
}
inline void  lightModelfv(LightModelParameter pname, const GLfloat*  params) {
    return glLightModelfv(static_cast<GLenum>(pname), params);
}
inline void  lightModeli(LightModelParameter pname, GLint param) {
    return glLightModeli(static_cast<GLenum>(pname), param);
}
inline void  lightModeliv(LightModelParameter pname, const GLint*  params) {
    return glLightModeliv(static_cast<GLenum>(pname), params);
}
inline void  lineStipple(GLint factor, GLushort pattern) {
    return glLineStipple(static_cast<GLint>(factor), static_cast<GLushort>(pattern));
}
inline void  materialf(TriangleFace face, MaterialParameter pname, GLfloat param) {
    return glMaterialf(static_cast<GLenum>(face), static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  materialfv(TriangleFace face, MaterialParameter pname, const GLfloat*  params) {
    return glMaterialfv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
}
inline void  materiali(TriangleFace face, MaterialParameter pname, GLint param) {
    return glMateriali(static_cast<GLenum>(face), static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  materialiv(TriangleFace face, MaterialParameter pname, const GLint*  params) {
    return glMaterialiv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
}
inline void  polygonStipple(const GLubyte*  mask) {
    return glPolygonStipple(mask);
}
inline void  shadeModel(ShadingModel mode) {
    return glShadeModel(static_cast<GLenum>(mode));
}
inline void  texEnvf(TextureEnvTarget target, TextureEnvParameter pname, GLfloat param) {
    return glTexEnvf(static_cast<GLenum>(target), static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  texEnvfv(TextureEnvTarget target, TextureEnvParameter pname, const GLfloat*  params) {
    return glTexEnvfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  texEnvi(TextureEnvTarget target, TextureEnvParameter pname, GLint param) {
    return glTexEnvi(static_cast<GLenum>(target), static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  texEnviv(TextureEnvTarget target, TextureEnvParameter pname, const GLint*  params) {
    return glTexEnviv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  texGend(TextureCoordName coord, TextureGenParameter pname, GLdouble param) {
    return glTexGend(static_cast<GLenum>(coord), static_cast<GLenum>(pname), param);
}
inline void  texGendv(TextureCoordName coord, TextureGenParameter pname, const GLdouble*  params) {
    return glTexGendv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
}
inline void  texGenf(TextureCoordName coord, TextureGenParameter pname, GLfloat param) {
    return glTexGenf(static_cast<GLenum>(coord), static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  texGenfv(TextureCoordName coord, TextureGenParameter pname, const GLfloat*  params) {
    return glTexGenfv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
}
inline void  texGeni(TextureCoordName coord, TextureGenParameter pname, GLint param) {
    return glTexGeni(static_cast<GLenum>(coord), static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  texGeniv(TextureCoordName coord, TextureGenParameter pname, const GLint*  params) {
    return glTexGeniv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
}
inline void  feedbackBuffer(GLsizei size, FeedbackType type, GLfloat buffer) {
    return glFeedbackBuffer(size, static_cast<GLenum>(type), static_cast<GLfloat>(buffer));
}
inline void  selectBuffer(GLsizei size, GLuint buffer) {
    return glSelectBuffer(size, static_cast<GLuint>(buffer));
}
inline GLint renderMode(RenderingMode mode) {
    return glRenderMode(static_cast<GLenum>(mode));
}
inline void  initNames() {
    return glInitNames();
}
inline void  loadName(GLuint name) {
    return glLoadName(static_cast<GLuint>(name));
}
inline void  passThrough(GLfloat token) {
    return glPassThrough(static_cast<GLfloat>(token));
}
inline void  popName() {
    return glPopName();
}
inline void  pushName(GLuint name) {
    return glPushName(static_cast<GLuint>(name));
}
inline void  clearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    return glClearAccum(red, green, blue, alpha);
}
inline void  clearIndex(GLfloat c) {
    return glClearIndex(static_cast<GLfloat>(c));
}
inline void  indexMask(GLuint mask) {
    return glIndexMask(static_cast<GLuint>(mask));
}
inline void  accum(AccumOp op, GLfloat value) {
    return glAccum(static_cast<GLenum>(op), static_cast<GLfloat>(value));
}
inline void  popAttrib() {
    return glPopAttrib();
}
inline void  pushAttrib(AttribMask mask) {
    return glPushAttrib(static_cast<GLbitfield>(mask));
}
inline void  map1d(MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble*  points) {
    return glMap1d(static_cast<GLenum>(target), static_cast<GLdouble>(u1), static_cast<GLdouble>(u2), stride, static_cast<GLint>(order), points);
}
inline void  map1f(MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat*  points) {
    return glMap1f(static_cast<GLenum>(target), static_cast<GLfloat>(u1), static_cast<GLfloat>(u2), stride, static_cast<GLint>(order), points);
}
inline void  map2d(MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble*  points) {
    return glMap2d(static_cast<GLenum>(target), static_cast<GLdouble>(u1), static_cast<GLdouble>(u2), ustride, static_cast<GLint>(uorder), static_cast<GLdouble>(v1), static_cast<GLdouble>(v2), vstride, static_cast<GLint>(vorder), points);
}
inline void  map2f(MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat*  points) {
    return glMap2f(static_cast<GLenum>(target), static_cast<GLfloat>(u1), static_cast<GLfloat>(u2), ustride, static_cast<GLint>(uorder), static_cast<GLfloat>(v1), static_cast<GLfloat>(v2), vstride, static_cast<GLint>(vorder), points);
}
inline void  mapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
    return glMapGrid1d(un, static_cast<GLdouble>(u1), static_cast<GLdouble>(u2));
}
inline void  mapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
    return glMapGrid1f(un, static_cast<GLfloat>(u1), static_cast<GLfloat>(u2));
}
inline void  mapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
    return glMapGrid2d(un, static_cast<GLdouble>(u1), static_cast<GLdouble>(u2), vn, static_cast<GLdouble>(v1), static_cast<GLdouble>(v2));
}
inline void  mapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
    return glMapGrid2f(un, static_cast<GLfloat>(u1), static_cast<GLfloat>(u2), vn, static_cast<GLfloat>(v1), static_cast<GLfloat>(v2));
}
inline void  evalCoord1d(GLdouble u) {
    return glEvalCoord1d(static_cast<GLdouble>(u));
}
inline void  evalCoord1dv(const GLdouble*  u) {
    return glEvalCoord1dv(u);
}
inline void  evalCoord1f(GLfloat u) {
    return glEvalCoord1f(static_cast<GLfloat>(u));
}
inline void  evalCoord1fv(const GLfloat*  u) {
    return glEvalCoord1fv(u);
}
inline void  evalCoord2d(GLdouble u, GLdouble v) {
    return glEvalCoord2d(static_cast<GLdouble>(u), static_cast<GLdouble>(v));
}
inline void  evalCoord2dv(const GLdouble*  u) {
    return glEvalCoord2dv(u);
}
inline void  evalCoord2f(GLfloat u, GLfloat v) {
    return glEvalCoord2f(static_cast<GLfloat>(u), static_cast<GLfloat>(v));
}
inline void  evalCoord2fv(const GLfloat*  u) {
    return glEvalCoord2fv(u);
}
inline void  evalMesh1(MeshMode1 mode, GLint i1, GLint i2) {
    return glEvalMesh1(static_cast<GLenum>(mode), static_cast<GLint>(i1), static_cast<GLint>(i2));
}
inline void  evalPoint1(GLint i) {
    return glEvalPoint1(i);
}
inline void  evalMesh2(MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2) {
    return glEvalMesh2(static_cast<GLenum>(mode), static_cast<GLint>(i1), static_cast<GLint>(i2), static_cast<GLint>(j1), static_cast<GLint>(j2));
}
inline void  evalPoint2(GLint i, GLint j) {
    return glEvalPoint2(static_cast<GLint>(i), static_cast<GLint>(j));
}
inline void  alphaFunc(AlphaFunction func, GLfloat ref) {
    return glAlphaFunc(static_cast<GLenum>(func), ref);
}
inline void  pixelZoom(GLfloat xfactor, GLfloat yfactor) {
    return glPixelZoom(xfactor, yfactor);
}
inline void  pixelTransferf(PixelTransferParameter pname, GLfloat param) {
    return glPixelTransferf(static_cast<GLenum>(pname), static_cast<GLfloat>(param));
}
inline void  pixelTransferi(PixelTransferParameter pname, GLint param) {
    return glPixelTransferi(static_cast<GLenum>(pname), static_cast<GLint>(param));
}
inline void  pixelMapfv(PixelMap map, GLsizei mapsize, const GLfloat*  values) {
    return glPixelMapfv(static_cast<GLenum>(map), static_cast<GLsizei>(mapsize), values);
}
inline void  pixelMapuiv(PixelMap map, GLsizei mapsize, const GLuint*  values) {
    return glPixelMapuiv(static_cast<GLenum>(map), static_cast<GLsizei>(mapsize), values);
}
inline void  pixelMapusv(PixelMap map, GLsizei mapsize, const GLushort*  values) {
    return glPixelMapusv(static_cast<GLenum>(map), static_cast<GLsizei>(mapsize), values);
}
inline void  copyPixels(GLint x, GLint y, GLsizei width, GLsizei height, PixelCopyType type) {
    return glCopyPixels(static_cast<GLint>(x), static_cast<GLint>(y), width, height, static_cast<GLenum>(type));
}
inline void  drawPixels(GLsizei width, GLsizei height, PixelFormat format, PixelType type, const void * pixels) {
    return glDrawPixels(width, height, static_cast<GLenum>(format), static_cast<GLenum>(type), pixels);
}
inline void  getClipPlane(ClipPlaneName plane, GLdouble equation) {
    return glGetClipPlane(static_cast<GLenum>(plane), equation);
}
inline void  getLightfv(LightName light, LightParameter pname, GLfloat params) {
    return glGetLightfv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
}
inline void  getLightiv(LightName light, LightParameter pname, GLint params) {
    return glGetLightiv(static_cast<GLenum>(light), static_cast<GLenum>(pname), params);
}
inline void  getMapdv(MapTarget target, GetMapQuery query, GLdouble v) {
    return glGetMapdv(static_cast<GLenum>(target), static_cast<GLenum>(query), v);
}
inline void  getMapfv(MapTarget target, GetMapQuery query, GLfloat v) {
    return glGetMapfv(static_cast<GLenum>(target), static_cast<GLenum>(query), v);
}
inline void  getMapiv(MapTarget target, GetMapQuery query, GLint v) {
    return glGetMapiv(static_cast<GLenum>(target), static_cast<GLenum>(query), v);
}
inline void  getMaterialfv(TriangleFace face, MaterialParameter pname, GLfloat params) {
    return glGetMaterialfv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
}
inline void  getMaterialiv(TriangleFace face, MaterialParameter pname, GLint params) {
    return glGetMaterialiv(static_cast<GLenum>(face), static_cast<GLenum>(pname), params);
}
inline void  getPixelMapfv(PixelMap map, GLfloat values) {
    return glGetPixelMapfv(static_cast<GLenum>(map), values);
}
inline void  getPixelMapuiv(PixelMap map, GLuint values) {
    return glGetPixelMapuiv(static_cast<GLenum>(map), values);
}
inline void  getPixelMapusv(PixelMap map, GLushort values) {
    return glGetPixelMapusv(static_cast<GLenum>(map), values);
}
inline void  getPolygonStipple(GLubyte mask) {
    return glGetPolygonStipple(mask);
}
inline void  getTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, GLfloat params) {
    return glGetTexEnvfv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  getTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, GLint params) {
    return glGetTexEnviv(static_cast<GLenum>(target), static_cast<GLenum>(pname), params);
}
inline void  getTexGendv(TextureCoordName coord, TextureGenParameter pname, GLdouble params) {
    return glGetTexGendv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
}
inline void  getTexGenfv(TextureCoordName coord, TextureGenParameter pname, GLfloat params) {
    return glGetTexGenfv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
}
inline void  getTexGeniv(TextureCoordName coord, TextureGenParameter pname, GLint params) {
    return glGetTexGeniv(static_cast<GLenum>(coord), static_cast<GLenum>(pname), params);
}
inline GLboolean isList(GLuint list) {
    return glIsList(static_cast<GLuint>(list));
}
inline void  frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    return glFrustum(left, right, bottom, top, zNear, zFar);
}
inline void  loadIdentity() {
    return glLoadIdentity();
}
inline void  loadMatrixf(const GLfloat*  m) {
    return glLoadMatrixf(m);
}
inline void  loadMatrixd(const GLdouble*  m) {
    return glLoadMatrixd(m);
}
inline void  matrixMode(MatrixMode mode) {
    return glMatrixMode(static_cast<GLenum>(mode));
}
inline void  multMatrixf(const GLfloat*  m) {
    return glMultMatrixf(m);
}
inline void  multMatrixd(const GLdouble*  m) {
    return glMultMatrixd(m);
}
inline void  ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    return glOrtho(left, right, bottom, top, zNear, zFar);
}
inline void  popMatrix() {
    return glPopMatrix();
}
inline void  pushMatrix() {
    return glPushMatrix();
}
inline void  rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
    return glRotated(angle, x, y, z);
}
inline void  rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
    return glRotatef(angle, x, y, z);
}
inline void  scaled(GLdouble x, GLdouble y, GLdouble z) {
    return glScaled(x, y, z);
}
inline void  scalef(GLfloat x, GLfloat y, GLfloat z) {
    return glScalef(x, y, z);
}
inline void  translated(GLdouble x, GLdouble y, GLdouble z) {
    return glTranslated(x, y, z);
}
inline void  translatef(GLfloat x, GLfloat y, GLfloat z) {
    return glTranslatef(x, y, z);
}
}
#endif 

